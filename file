<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Linear Search Algorithm &#8211; Data Structure and Algorithms Tutorials</div> --> 
  <h1>Linear Search Algorithm – Data Structure and Algorithms Tutorials</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab-->  <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content">  
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <blockquote>
  <p><strong>Linear Search</strong> is defined as a sequential <a href="https://www.geeksforgeeks.org/searching-algorithms/">search algorithm</a> that starts at one end and goes through each element of a list until the desired element is found, otherwise the search continues till the end of the data set.</p>
 </blockquote>
 <div style="width: 810px" class="wp-caption alignnone">
  <img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Linear-Search.png" alt="Linear Search Algorithm">
  <p class="wp-caption-text">Linear Search Algorithm</p>
 </div>
 <h2>How Does Linear Search Algorithm Work?</h2>
 <p>In Linear Search Algorithm,&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <ul>
  <li>Every element is considered as a potential match for the key and checked for the same.</li>
  <li>If any element is found equal to the key, the search is successful and the index of that element is returned.</li>
  <li>If no element is found equal to the key, the search yields “No match found”.</li>
 </ul>
 <p><strong>For example:</strong> Consider the array <strong>arr[] = {10, 50, 30, 70, 80, 20, 90, 40}</strong> and <strong>key</strong> = 30</p>
 <blockquote>
  <p><strong>Step 1:</strong> Start from the first element (index 0) and compare <strong>key</strong> with each element (arr[i]).</p>
  <ul>
   <li>Comparing key with first element arr[0]. SInce not equal, the iterator moves to the next element as a potential match.</li>
  </ul>
  <div style="width: 810px" class="wp-caption alignnone">
   <img src="https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1.webp" alt="Compare key with arr[0]" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1.webp 1000w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1-100.webp 100w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1-200.webp 200w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1-300.webp 300w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1-660.webp 660w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161339/Linear-search-algorithm-1-768.webp 768w, " sizes="100vw" width="1000">
   <p class="wp-caption-text">Compare key with arr[0]</p>
  </div>
  <ul>
   <li>Comparing key with next element arr[1]. SInce not equal, the iterator moves to the next element as a potential match.</li>
  </ul>
  <div style="width: 810px" class="wp-caption alignnone">
   <img src="https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2.webp" alt="Compare key with arr[1]" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2.webp 1000w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2-100.webp 100w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2-200.webp 200w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2-300.webp 300w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2-660.webp 660w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161415/Linear-search-algorithm-2-768.webp 768w, " sizes="100vw" width="1000">
   <p class="wp-caption-text">Compare key with arr[1]</p>
  </div>
  <p><strong>Step 2:</strong> Now when comparing arr[2] with key, the value matches. So the Linear Search Algorithm will yield a successful message and return the index of the element when key is found (here 2).</p>
  <div style="width: 810px" class="wp-caption alignnone">
   <img src="https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3.webp" alt="Compare key with arr[2]" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3.webp 1000w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3-100.webp 100w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3-200.webp 200w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3-300.webp 300w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3-660.webp 660w, https://media.geeksforgeeks.org/wp-content/uploads/20230519161442/Linear-search-algorithm-3-768.webp 768w, " sizes="100vw" width="1000">
   <p class="wp-caption-text">Compare key with arr[2]</p>
  </div>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
     Recommended Problem
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/search-an-element-in-an-array/0">Search an Element in an array<br> </a>
    </div>
    <p></p>
   </div>
   <div class="redirect">
    <a href="https://www.geeksforgeeks.org/problems/search-an-element-in-an-array/0">Solve Problem</a>
   </div>
   <p></p>
  </div>
  <p></p>
 </div>
 <h2>Implementation of Linear Search Algorithm:</h2>
 <p>Below is the implementation of the linear search algorithm:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_996034" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2">
            <code class="comments">// Java code for linearly searching x in arr[].&nbsp; </code>
           </div>
           <div class="line number2 index1 alt1">
            <code class="undefined spaces">&nbsp;</code>&nbsp;
           </div>
           <div class="line number3 index2 alt2">
            <code class="keyword">import</code> <code class="plain">java.io.*; </code>
           </div>
           <div class="line number4 index3 alt1">
            <code class="undefined spaces">&nbsp;</code>&nbsp;
           </div>
           <div class="line number5 index4 alt2">
            <code class="keyword">class</code> <code class="plain">GFG { </code>
           </div>
           <div class="line number6 index5 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">search(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">N, </code><code class="keyword">int</code> <code class="plain">x) </code>
           </div>
           <div class="line number7 index6 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number8 index7 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; N; i++) { </code>
           </div>
           <div class="line number9 index8 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == x) </code>
           </div>
           <div class="line number10 index9 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i; </code>
           </div>
           <div class="line number11 index10 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number12 index11 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number13 index12 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number14 index13 alt1">
            <code class="undefined spaces">&nbsp;</code>&nbsp;
           </div>
           <div class="line number15 index14 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code </code>
           </div>
           <div class="line number16 index15 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) </code>
           </div>
           <div class="line number17 index16 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number18 index17 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">40</code> <code class="plain">}; </code>
           </div>
           <div class="line number19 index18 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">; </code>
           </div>
           <div class="line number20 index19 alt1">
            <code class="undefined spaces">&nbsp;</code>&nbsp;
           </div>
           <div class="line number21 index20 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call </code>
           </div>
           <div class="line number22 index21 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = search(arr, arr.length, x); </code>
           </div>
           <div class="line number23 index22 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">) </code>
           </div>
           <div class="line number24 index23 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print( </code>
           </div>
           <div class="line number25 index24 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code><code class="plain">); </code>
           </div>
           <div class="line number26 index25 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number27 index26 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Element is present at index "</code>
           </div>
           <div class="line number28 index27 alt1">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ result); </code>
           </div>
           <div class="line number29 index28 alt2">
            <code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number30 index29 alt1">
            <code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block"><i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div"><i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output">
  <strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3</pre>
 </div>
 <h2>Complexity Analysis of Linear Search:</h2>
 <p><strong>Time Complexity:</strong></p>
 <ul>
  <li><strong>Best Case:</strong> In the best case, the key might be present at the first index. So the best case complexity is O(1)</li>
  <li><strong>Worst Case:</strong> In the worst case, the key might be present at the last index i.e., opposite to the end from which the search has started in the list. So the worst-case complexity is O(N) where N is the size of the list.</li>
  <li><strong>Average Case:</strong> O(N)</li>
 </ul>
 <p><strong>Auxiliary Space:</strong> O(1) as except for the variable to iterate through the list, no other variable is used.&nbsp;</p>
 <h2><strong>Advantages of Linear Search:</strong></h2>
 <ul>
  <li>Linear search can be used irrespective of whether the array is sorted or not. It can be used on arrays of any data type.</li>
  <li>Does not require any additional memory.</li>
  <li>It is a well-suited algorithm for small datasets.</li>
 </ul>
 <h2><strong>Drawbacks of Linear Search:</strong></h2>
 <ul>
  <li>Linear search has a time complexity of O(N), which in turn makes it slow for large datasets.</li>
  <li>Not suitable for large arrays.</li>
 </ul>
 <h2><strong>When to use Linear Search?</strong></h2>
 <ul>
  <li>When we are dealing with a small dataset.</li>
  <li>When you are searching for a dataset stored in contiguous memory.</li>
 </ul>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style>      
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Sentinel Linear Search</div> --> 
  <h1>Sentinel Linear Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["CPP","Algorithms","Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Sentinel Linear Search as the name suggests is a type of <a href="https://www.geeksforgeeks.org/linear-search/">Linear Search</a> where the number of comparisons is reduced as compared to a traditional linear search. In a traditional linear search, only N comparisons are made, and in a Sentinel Linear Search, the sentinel value is used to avoid any out-of-bounds comparisons, but there is no additional comparison made specifically for the index of the element being searched.<br>In this search, the last element of the array is replaced with the element to be searched and then the linear search is performed on the array without checking whether the current index is inside the index range of the array or not because the element to be searched will definitely be found inside the array even if it was not present in the original array since the last element got replaced with it. So, the index to be checked will never be out of the bounds of the array. The number of comparisons in the worst case there will be (N + 2).</p>
 <p>Sentinel linear search is a variation of the standard linear search algorithm used to find a target value in an array or list. The basic idea behind this algorithm is to add a sentinel value at the end of the array which is equal to the target value we are looking for. This helps to avoid checking the array boundary condition during each iteration of the loop, as the sentinel value acts as a stopper for the loop.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p>Although in worst-case time complexity both algorithms are O(n). Only the number of comparisons are less in sentinel linear search than linear search</p>
 <h3><strong>Use of the Sentinel Linear Search :</strong></h3>
 <p>In the context of searching for an element in an array, Sentinel Linear Search is a variant of Linear Search algorithm that uses a sentinel value to optimize the search process.</p>
 <p>The basic idea of Sentinel Linear Search is to add an extra element at the end of the array (i.e., the sentinel value) that matches the search key. By doing so, we can avoid the conditional check for the end of the array in the loop and terminate the search early, as soon as we find the sentinel element. This eliminates the need for a separate check for the end of the array, resulting in a slight improvement in the average case performance of the algorithm.</p>
 <p>Here are the steps for Sentinel Linear Search algorithm:</p>
 <ul>
  <li>Initialize the search index variable i to 0.</li>
  <li>Set the last element of the array to the search key.</li>
  <li>While the search key is not equal to the current element of the array (i.e., arr[i]), increment the search index i.</li>
  <li>If i is less than the size of the array or arr[i] is equal to the search key, return the value of i (i.e., the index of the search key in the array).</li>
  <li>Otherwise, the search key is not present in the array, so return -1 (or any other appropriate value to indicate that the key is not found).</li>
 </ul>
 <p>The key benefit of the Sentinel Linear Search algorithm is that it eliminates the need for a separate check for the end of the array, which can improve the average case performance of the algorithm. However, it does not improve the worst-case performance, which is still O(n) (where n is the size of the array), as we may need to scan the entire array to find the sentinel value.<br><strong>Examples:</strong>&nbsp;</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <blockquote>
  <p><strong>Input:</strong> arr[] = {10, 20, 180, 30, 60, 50, 110, 100, 70}, x = 180&nbsp;<br><strong>Output:</strong> 180 is present at index 2<br><strong>Input:</strong> arr[] = {10, 20, 180, 30, 60, 50, 110, 100, 70}, x = 90&nbsp;<br><strong>Output:</strong> Not found&nbsp;</p>
 </blockquote>
 <p>Below is the implementation of the above approach:&nbsp;&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_62464" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation of the approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to search x in the given array</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">sentinelSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Last element of the array</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">last = arr[n - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Element to be searched is</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// placed at the last index</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[n - </code><code class="value">1</code><code class="plain">] = key;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(arr[i] != key)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Put the last element back</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[n - </code><code class="value">1</code><code class="plain">] = last;</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((i &lt; n - </code><code class="value">1</code><code class="plain">) || (arr[n - </code><code class="value">1</code><code class="plain">] == key))</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(key + </code><code class="string">" is present at index "</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ i);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element Not found"</code><code class="plain">);</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[]</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= { </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">180</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">60</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">110</code><code class="plain">, </code><code class="value">100</code><code class="plain">, </code><code class="value">70</code> <code class="plain">};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">180</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sentinelSearch(arr, n, key);</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="comments">// This code is contributed by Ankit Rai, Mandeep Dalavi</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>180 is present at index 2</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N)<br><strong>Auxiliary Space: </strong>O(1)</p>
 <h4>Method 2 :</h4>
 <h3>Here are the steps involved in the Sentinel Linear Search Algorithm:</h3>
 <ol>
  <li>Set the last element of the array to the target value. This is known as the sentinel value.</li>
  <li>Set the index variable “i” to the first element of the array.</li>
  <li>Use a loop to iterate through the array, comparing each element with the target value.</li>
  <li>If the current element is equal to the target value, return the index of the current element.</li>
  <li>Increment the index variable “i” by 1 after each iteration of the loop.</li>
  <li>If the loop completes and the target value is not found, return -1 to indicate that the value is not present in the array.</li>
 </ol>
 <p>The sentinel linear search algorithm is useful for arrays with a large number of elements where the target value may be located towards the end of the array. By adding the sentinel value at the end of the array, we can eliminate the need to check the array boundary condition during each iteration of the loop, thereby reducing the overall running time of the algorithm.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_634693" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">SentinelLinearSearch {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">sentinelLinearSearch(</code><code class="keyword">int</code><code class="plain">[] array, </code><code class="keyword">int</code> <code class="plain">key) {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">last = array[array.length - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">array[array.length - </code><code class="value">1</code><code class="plain">] = key;</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(array[i] != key) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">array[array.length - </code><code class="value">1</code><code class="plain">] = last;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &lt; array.length - </code><code class="value">1</code> <code class="plain">|| last == key) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] array = {</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">};</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = sentinelLinearSearch(array, key);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(key + </code><code class="string">" is not found in the array: "</code> <code class="plain">+ Arrays.toString(array));</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(key + </code><code class="string">" is found at index "</code> <code class="plain">+ index + </code><code class="string">" in the array: "</code> <code class="plain">+ Arrays.toString(array));</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>5 is found at index 4 in the array: [1, 2, 3, 4, 5, 6, 7, 8, 9]</pre>
 </div>
 <h3>Time Complexity :</h3>
 <p>The time complexity of the Sentinel Linear Search algorithm is O(n) in the worst case.</p>
 <p>In the best case, when the key is found in the first iteration, the time complexity will be O(1).</p>
 <p>However, the average time complexity is still O(n), because on average, the key will be found after</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/recursive-c-program-linearly-search-element-given-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/recursive-c-program-linearly-search-element-given-array/?ref=lbp">Recursive Linear Search Algorithm</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Binary Search &#8211; Data Structure and Algorithm Tutorials</div> --> 
  <h1>Binary Search – Data Structure and Algorithm Tutorials</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Accenture","Infosys","Oracle","Qualcomm","SAP Labs","TCS","Wipro"]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <blockquote>
  <p dir="ltr"><b><strong>Binary Search</strong></b><span> is defined as a </span><a href="https://www.geeksforgeeks.org/searching-algorithms/"><span>searching algorithm</span></a><span> used in a sorted array by </span><b><strong>repeatedly dividing the search interval in half</strong></b><span>. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N).&nbsp;</span></p>
 </blockquote>
 <div style="width: 810px" class="wp-caption alignnone">
  <img height="inherit" src="https://media.geeksforgeeks.org/wp-content/uploads/20220309171621/BinarySearch.png" width="inherit">
  <p class="wp-caption-text">Example of Binary Search Algorithm</p>
 </div>
 <h2><span>Conditions for when to apply Binary Search in a Data Structure:</span></h2>
 <p dir="ltr"><span>To apply Binary Search algorithm:</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <ul>
  <li value="1"><span>The data structure must be sorted.</span></li>
  <li value="2"><span>Access to any element of the data structure takes constant time.</span></li>
 </ul>
 <h2><span>Binary Search Algorithm:</span></h2>
 <blockquote>
  <p dir="ltr"><span>In this algorithm,&nbsp;</span></p>
  <ul>
   <li value="1"><span>Divide the search space into two halves by </span><a href="https://www.geeksforgeeks.org/problem-binary-search-implementations/"><b><strong>finding the middle index “mid”</strong></b></a><span>.&nbsp;</span></li>
  </ul>
  <div style="width: 810px" class="wp-caption alignnone">
   <img alt="finding the middle index &quot;mid&quot; in Binary Search Algorithm" height="inherit" src="https://media.geeksforgeeks.org/wp-content/uploads/20230522163247/mid-in-binary-search-768.webp" width="768">
   <p class="wp-caption-text">Finding the middle index “mid” in Binary Search Algorithm</p>
  </div>
  <ul>
   <li value="1"><span>Compare the middle element of the search space with the key.&nbsp;</span></li>
   <li value="2"><span>If the key is found at middle element, the process is terminated.</span></li>
   <li value="3"><span>If the key is not found at middle element, choose which half will be used as the next search space.</span>
    <ul>
     <li value="1"><span>If the key is smaller than the middle element, then the left side is used for next search.</span></li>
     <li value="2"><span>If the key is larger than the middle element, then the right side is used for next search.</span></li>
    </ul></li>
   <li value="4"><span>This process is continued until the key is found or the total search space is exhausted.</span></li>
  </ul>
 </blockquote>
 <h2><span>How does Binary Search work?</span></h2>
 <p dir="ltr"><span>To understand the working of binary search, consider the following illustration:</span></p>
 <blockquote>
  <p dir="ltr"><span>Consider an array </span><b><strong>arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91}</strong></b><span>, and the </span><b><strong>target = 23</strong></b><span>.</span></p>
  <p dir="ltr"><b><strong>First Step:</strong></b><span> Calculate the mid and compare the mid element with the key. If the key is less than mid element, move to left and if it is greater than the mid then move search space to the right.</span></p>
  <ul>
   <li value="1"><span>Key (i.e., 23) is greater than current mid element (i.e., 16). The search space moves to the right.</span></li>
  </ul>
  <div style="width: 810px" class="wp-caption alignnone">
   <img alt="Binary Search Algorithm : Compare key with 16" height="inherit" src="https://media.geeksforgeeks.org/wp-content/uploads/20230524114905/1.webp" width="1000">
   <p class="wp-caption-text">Binary Search Algorithm : Compare key with 16</p>
  </div>
  <ul>
   <li value="1"><span>Key is less than the current mid 56. The search space moves to the left.</span></li>
  </ul>
  <div style="width: 810px" class="wp-caption alignnone">
   <img alt="Binary Search Algorithm : Compare key with 56" height="inherit" src="https://media.geeksforgeeks.org/wp-content/uploads/20230524114935/2.webp" width="1000">
   <p class="wp-caption-text">Binary Search Algorithm : Compare key with 56</p>
  </div>
  <p dir="ltr"><b><strong>Second Step:</strong></b><span> If the key matches the value of the mid element, the element is found and stop search.</span></p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <p dir="ltr"></p>
  <div style="width: 810px" class="wp-caption alignnone">
   <img alt="binary-search-step-3" height="370" src="https://media.geeksforgeeks.org/wp-content/uploads/20230726182418/binary-search-step-3.webp" width="1000">
   <p class="wp-caption-text">Binary Search Algorithm : Key matches with mid</p>
  </div>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/binary-search-1587115620/1/">Binary Search</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/binary-search-1587115620/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><span>How to Implement Binary Search?</span></h2>
 <p dir="ltr"><span>The </span><b><strong>Binary Search Algorithm</strong></b><span> can be implemented in the following two ways</span></p>
 <ul>
  <li value="1"><span>Iterative Binary Search Algorithm</span></li>
  <li value="2"><span>Recursive Binary Search Algorithm</span></li>
 </ul>
 <p dir="ltr"><span>Given below are the pseudocodes for the approaches.</span></p>
 <h2><b><strong>1. Iterative &nbsp;Binary Search Algorithm:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span>Here we use a while loop to continue the process of comparing the key and splitting the search space in two halves.</span></p>
 </blockquote>
 <p dir="ltr"><span>Implementation of Iterative &nbsp;Binary Search Algorithm:</span><u><b><strong class="GFGEditorTheme__textUnderline">&nbsp;</strong></b></u></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_306767" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation of iterative Binary Search</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">BinarySearch {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns index of x if it is present in arr[].</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = arr.length - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if x is present at mid</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[m] == x)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">m;</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x greater, ignore left half</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[m] &lt; x)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = m + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is smaller, ignore right half</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we reach here, then element was</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// not present</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BinarySearch ob = </code><code class="keyword">new</code> <code class="plain">BinarySearch();</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">40</code> <code class="plain">};</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = ob.binarySearch(arr, x);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code><code class="plain">);</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element is present at "</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"index "</code> <code class="plain">+ result);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <pre>Element is present at index 3


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log N)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <h2><b><strong>2. Recursive &nbsp;Binary Search Algorithm:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span>Create a recursive function and compare the mid of the search space with the key. And based on the result either return the index where the key is found or call the recursive function for the next search space.</span></p>
 </blockquote>
 <p dir="ltr"><span>Implementation of Recursive &nbsp;Binary Search Algorithm:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_533208" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation of recursive Binary Search</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">BinarySearch {</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns index of x if it is present in arr[l..</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// r], else return -1</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(r &gt;= l) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the element is present at the</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// middle itself</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == x)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is smaller than mid, then</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it can only be present in left subarray</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &gt; x)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, l, mid - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else the element can only be present</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in right subarray</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, mid + </code><code class="value">1</code><code class="plain">, r, x);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We reach here when element is not present</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in array</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BinarySearch ob = </code><code class="keyword">new</code> <code class="plain">BinarySearch();</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">40</code> <code class="plain">};</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = ob.binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code><code class="plain">);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is present at index "</code> <code class="plain">+ result);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="comments">/* This code is contributed by Rajat Mishra */</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3


</pre>
 </div>
 <h2><a href="https://www.geeksforgeeks.org/complexity-analysis-of-binary-search/"><span>Complexity Analysis of Binary Search:</span></a></h2>
 <ul>
  <li value="1"><b><strong>Time Complexity:</strong></b><span>&nbsp;</span>
   <ul>
    <li value="1"><span>Best Case: O(1)</span></li>
    <li value="2"><span>Average Case: O(log N)</span></li>
    <li value="3"><span>Worst Case: O(log N)</span></li>
   </ul></li>
  <li value="2"><b><strong>Auxiliary Space:</strong></b><span> O(1), If the recursive call stack is considered then the auxiliary space will be O(logN).</span></li>
 </ul>
 <h2><b><strong>Advantages of Binary Search:</strong></b></h2>
 <ul>
  <li value="1"><span>Binary search is faster than linear search, especially for large arrays.</span></li>
  <li value="2"><span>More efficient than other searching algorithms with a similar time complexity, such as interpolation search or exponential search.</span></li>
  <li value="3"><span>Binary search is well-suited for searching large datasets that are stored in external memory, such as on a hard drive or in the cloud.</span></li>
 </ul>
 <h2><b><strong>Drawbacks of Binary Search:</strong></b></h2>
 <ul>
  <li value="1"><span>The array should be sorted.</span></li>
  <li value="2"><span>Binary search requires that the data structure being searched be stored in contiguous memory locations.&nbsp;</span></li>
  <li value="3"><span>Binary search requires that the elements of the array be comparable, meaning that they must be able to be ordered.</span></li>
 </ul>
 <h2><b><strong>Applications of Binary Search:</strong></b></h2>
 <ul>
  <li value="1"><span>Binary search can be used as a building block for more complex algorithms used in machine learning, such as algorithms for training neural networks or finding the optimal hyperparameters for a model.</span></li>
  <li value="2"><span>It can be used for searching in computer graphics such as algorithms for ray tracing or texture mapping.</span></li>
  <li value="3"><span>It can be used for searching a database.</span></li>
 </ul>
 <blockquote>
  <p dir="ltr"><span>Follow the link to know about </span><a href="https://www.geeksforgeeks.org/binary-search-on-answer-tutorial-with-problems/" rel="noreferrer noopener" target="_blank"><b><strong>Binary Search on Answers</strong></b></a></p>
 </blockquote>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Meta Binary Search | One-Sided Binary Search</div> --> 
  <h1>Meta Binary Search | One-Sided Binary Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Algorithms","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Meta binary search (also called one-sided binary search by Steven Skiena in The Algorithm Design Manual on page 134) is a modified form of binary search that incrementally constructs the index of the target value in the array. Like normal binary search, meta binary search takes O(log n) time.</p>
 <p>Meta Binary Search, also known as One-Sided Binary Search, is a variation of the binary search algorithm that is used to search an ordered list or array of elements. This algorithm is designed to reduce the number of comparisons needed to search the list for a given element.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p>The basic idea behind Meta Binary Search is to start with an initial interval of size n that includes the entire array. The algorithm then computes a middle element, as in binary search, and compares it to the target element. If the target element is found, the search terminates. If the middle element is greater than the target element, the algorithm sets the new interval to the left half of the previous interval, and if the middle element is less than the target element, the new interval is set to the right half of the previous interval. However, unlike binary search, Meta Binary Search does not perform a comparison for each iteration of the loop.</p>
 <p>Instead, the algorithm uses a heuristic to determine the size of the next interval. It computes the difference between the value of the middle element and the value of the target element, and divides the difference by a predetermined constant, usually 2. This result is then used as the size of the new interval. The algorithm continues until it finds the target element or determines that it is not in the list.</p>
 <p>The advantage of Meta Binary Search over binary search is that it can perform fewer comparisons in some cases, particularly when the target element is close to the beginning of the list. The disadvantage is that the algorithm may perform more comparisons than binary search in other cases, particularly when the target element is close to the end of the list. Therefore, Meta Binary Search is most effective when the list is ordered in a way that is consistent with the distribution of the target elements.</p>
 <p><strong>Here is the pseudocode for Meta Binary Search:</strong></p>
 <pre>function meta_binary_search(A, target):
    n = length(A)
    interval_size = n
    while interval_size &gt; 0:
        index = min(n - 1, interval_size / 2)
        mid = A[index]
        if mid == target:
            return index
        elif mid &lt; target:
            interval_size = (n - index) / 2
        else:
            interval_size = index / 2
    return -1</pre>
 <p><strong>Examples:</strong>&nbsp;&nbsp;</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <pre>Input: [-10, -5, 4, 6, 8, 10, 11], key_to_search = 10
Output: 5

Input: [-2, 10, 100, 250, 32315], key_to_search = -2
Output: 0</pre>
 <div id="practiceLinkDiv" ide-recommendation="removed"></div>
 <p>The exact implementation varies, but the basic algorithm has two parts:&nbsp;&nbsp;</p>
 <ol>
  <li>Figure out how many bits are necessary to store the largest array index.</li>
  <li>Incrementally construct the index of the target value in the array by determining whether each bit in the index should be set to 1 or 0.</li>
 </ol>
 <p><strong>Approach:</strong></p>
 <ol>
  <li>Store number of bits to represent the largest array index in variable lg.</li>
  <li>Use lg to start off the search in a for loop.</li>
  <li>If the element is found return pos.</li>
  <li>Otherwise, incrementally construct an index to reach the target value in the for loop.</li>
  <li>If element found return pos otherwise -1.</li>
 </ol>
 <p>Below is the implementation of the above approach:&nbsp;<br>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_706620" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">//Java implementation of above approach </code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.Vector;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">com.google.common.math.BigIntegerMath;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.math.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="comments">// Function to show the working of Meta binary search </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">bsearch(Vector&lt;Integer&gt; A, </code><code class="keyword">int</code> <code class="plain">key_to_search) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = (</code><code class="keyword">int</code><code class="plain">) A.size();</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Set number of bits to represent largest array index</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">lg = BigIntegerMath.log2(BigInteger.valueOf(n-</code><code class="value">1</code><code class="plain">),RoundingMode.UNNECESSARY) + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//while ((1 &lt;&lt; lg) &lt; n - 1) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp;&nbsp;&nbsp; lg += 1;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//}</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = lg - </code><code class="value">1</code><code class="plain">; i &gt;= </code><code class="value">0</code><code class="plain">; i--) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A.get(pos) == key_to_search) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">pos;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Incrementally construct the </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// index of the target value </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">new_pos = pos | (</code><code class="value">1</code> <code class="plain">&lt;&lt; i);</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// find the element in one </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// direction and update position </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((new_pos &lt; n) &amp;&amp; (A.get(new_pos) &lt;= key_to_search)) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pos = new_pos;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if element found return pos otherwise -1 </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">((A.get(pos) == key_to_search) ? pos : -</code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="comments">// Driver code </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; A = </code><code class="keyword">new</code> <code class="plain">Vector&lt;Integer&gt;();</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {-</code><code class="value">2</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">100</code><code class="plain">, </code><code class="value">250</code><code class="plain">, </code><code class="value">32315</code><code class="plain">};</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; arr.length; i++) {</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A.add(arr[i]);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(bsearch(A, </code><code class="value">10</code><code class="plain">));</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2">
             &nbsp; 
           </div>
           <div class="line number50 index49 alt1"><code class="comments">// This code is contributed by 29AjayKumar</code>
           </div>
           <div class="line number51 index50 alt2"><code class="comments">// This implementation was improved by Tanin</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output:</strong>&nbsp; 
  <p></p>
  <pre>1</pre>
  <p>&nbsp;</p>
 </div>
 <p><strong>Time Complexity: </strong>O(log n), where n is the size of the given array<br><strong>Auxiliary Space:</strong> O(1) , as we are not using any extra space</p>
 <p><strong>Reference:</strong> <a target="_blank" rel="noopener noreferrer nofollow" href="https://www.quora.com/What-is-meta-binary-search">https://www.quora.com/What-is-meta-binary-search</a></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/variants-of-binary-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/variants-of-binary-search/?ref=lbp">Variants of Binary Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Ternary Search</div> --> 
  <h1>Ternary Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Algorithms","Searching","Sorting"]');
                                            </script> 
<div class="text"> 
 <p></p>
 <p dir="ltr"><span>Computer systems use different methods to find specific data. There are various search algorithms, each better suited for certain situations. For instance, a </span><b><strong>binary search</strong></b><span> divides information into </span><b><strong>two parts</strong></b><span>, while a </span><b><strong>ternary search</strong></b><span> does the same but into </span><b><strong>three equal parts</strong></b><span>. It’s worth noting that ternary search is only effective for sorted data. In this article, we’re going to uncover the secrets of</span><b><strong> Ternary Search</strong></b><span> – how it works, why it’s faster in some situations. Whether you’re a coding pro or just starting out, get ready for a quick dive into the world of </span><b><strong>Ternary Search</strong></b><span>!</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">What is the Ternary Search?</span></u></h2>
 <p dir="ltr"><b><strong>Ternary search</strong></b><span> is a searching algorithm that is used to find the position of a target value within a sorted array. It operates on the principle of dividing the array into </span><b><strong>three</strong></b><span> </span><b><strong>parts</strong></b><span> instead of two, as in </span><a href="https://www.geeksforgeeks.org/binary-search/" rel=""><span>binary search</span></a><span>. The basic idea is to narrow down the search space by comparing the target value with elements at two points that divide the array into </span><b><strong>three equal parts</strong></b><span>.</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><span>mid1 = l + (r-l)/3&nbsp;</span><br><span>mid2 = r – (r-l)/3&nbsp;</span></p>
 </blockquote>
 <h2><u><span class="GFGEditorTheme__textUnderline">Working of Ternary Search:</span></u></h2>
 <p dir="ltr"><span>The concept involves dividing the array into </span><b><strong>three equal segments</strong></b><span> and determining in which segment the key element (the element being sought) is located. It works similarly to a binary search, with the distinction of reducing time complexity by dividing the array into three parts instead of two.</span></p>
 <p dir="ltr"><span>Below are the step-by-step explanation of working of Ternary Search:</span></p>
 <ol>
  <li value="1"><u><b><strong class="GFGEditorTheme__textUnderline">Initialization:</strong></b></u>
   <ul>
    <li value="1"><span>Begin with a sorted array.</span></li>
    <li value="2"><span>Set two pointers, </span><b><strong>left</strong></b><span> and </span><b><strong>right</strong></b><span>, initially pointing to the first and last elements of the array.</span></li>
   </ul></li>
  <li value="2"><u><b><strong class="GFGEditorTheme__textUnderline">Divide the Array:</strong></b></u>
   <ul>
    <li value="1"><span>Calculate two midpoints, </span><b><strong>mid1</strong></b><span> and </span><b><strong>mid2</strong></b><span>, dividing the current search space into three roughly equal parts:</span></li>
    <li value="2"><span>mid1 = left + (right – left) / 3</span></li>
    <li value="3"><span>mid2 = right – (right – left) / 3</span></li>
    <li value="4"><span>The array is now effectively divided into </span><b><strong>[left, mid1]</strong></b><span>, </span><b><strong>(mid1, mid2</strong></b><span>), and </span><b><strong>[mid2, right]</strong></b><span>.</span></li>
   </ul></li>
  <li value="3"><u><b><strong class="GFGEditorTheme__textUnderline">Comparison with Target:</strong></b></u><span>.</span>
   <ul>
    <li value="1"><span>If the </span><b><strong>target</strong></b><span> is equal to the element at </span><b><strong>mid1</strong></b><span> or </span><b><strong>mid2</strong></b><span>, the search is successful, and the index is returned</span></li>
    <li value="2"><span>If the </span><b><strong>target</strong></b><span> is less than the element at </span><b><strong>mid1</strong></b><span>, update the </span><b><strong>right</strong></b><span> pointer to </span><b><strong>mid1 – 1</strong></b><span>.</span></li>
    <li value="3"><span>If the </span><b><strong>target</strong></b><span> is greater than the element at </span><b><strong>mid2</strong></b><span>, update the </span><b><strong>left</strong></b><span> pointer to </span><b><strong>mid2 + 1</strong></b><span>.</span></li>
    <li value="4"><span>If the </span><b><strong>target</strong></b><span> is between the elements at </span><b><strong>mid1</strong></b><span> and </span><b><strong>mid2</strong></b><span>, update the </span><b><strong>left</strong></b><span> pointer to </span><b><strong>mid1 + 1</strong></b><span> and the </span><b><strong>right</strong></b><span> pointer to </span><b><strong>mid2 – </strong></b><span>1.</span></li>
   </ul></li>
  <li value="4"><u><b><strong class="GFGEditorTheme__textUnderline">Repeat or Conclude</strong></b></u><b><strong>:</strong></b>
   <ul>
    <li value="1"><span>Repeat the process with the reduced search space until the </span><b><strong>target</strong></b><span> is found or the search space becomes empty.</span></li>
    <li value="2"><span>If the search space is empty and the </span><b><strong>target</strong></b><span> is not found, return a value indicating that the </span><b><strong>target</strong></b><span> is not present in the array.</span></li>
   </ul></li>
 </ol>
 <div>
   &nbsp; 
 </div>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <p dir="ltr"><img src="https://media.geeksforgeeks.org/wp-content/uploads/ternaryS-3.png" width="inherit" height="inherit"></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><b><strong>Recursive Implementation of Ternary Search</strong></b><span>:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_490539" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// recursive approach to ternary search</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to perform Ternary Search</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">ternarySearch(</code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">key, </code><code class="keyword">int</code> <code class="plain">ar[])</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(r &gt;= l) {</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the mid1 and mid2</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid1 = l + (r - l) / </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid2 = r - (r - l) / </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if key is present at any mid</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar[mid1] == key) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid1;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar[mid2] == key) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid2;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Since key is not present at mid,</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// check in which region it is present</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// then repeat the Search operation</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in that region</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &lt; ar[mid1]) {</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between l and mid1</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ternarySearch(l, mid1 - </code><code class="value">1</code><code class="plain">, key, ar);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(key &gt; ar[mid2]) {</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between mid2 and r</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ternarySearch(mid2 + </code><code class="value">1</code><code class="plain">, r, key, ar);</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between mid1 and mid2</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ternarySearch(mid1 + </code><code class="value">1</code><code class="plain">, mid2 - </code><code class="value">1</code><code class="plain">, key, ar);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key not found</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l, r, p, key;</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Get the array</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Sort the array if not sorted</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting index</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// end element index</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = </code><code class="value">9</code><code class="plain">;</code>
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for 5</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key to be searched in the array</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">key = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number68 index67 alt1">
             &nbsp; 
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search the key using ternarySearch</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">p = ternarySearch(l, r, key, ar);</code>
           </div>
           <div class="line number71 index70 alt2">
             &nbsp; 
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of "</code> <code class="plain">+ key + </code><code class="string">" is "</code> <code class="plain">+ p);</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for 50</code>
           </div>
           <div class="line number76 index75 alt1">
             &nbsp; 
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key to be searched in the array</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">key = </code><code class="value">50</code><code class="plain">;</code>
           </div>
           <div class="line number79 index78 alt2">
             &nbsp; 
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search the key using ternarySearch</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">p = ternarySearch(l, r, key, ar);</code>
           </div>
           <div class="line number82 index81 alt1">
             &nbsp; 
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of "</code> <code class="plain">+ key + </code><code class="string">" is "</code> <code class="plain">+ p);</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number86 index85 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of 5 is 4
Index of 50 is -1
</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(2 * log</span><sub><span>3</span></sub><span>n)</span><br><b><strong>Auxiliary Space: </strong></b><span>O(log</span><sub><span>3</span></sub><span>n)</span></p>
 <p dir="ltr"><b><strong>Iterative Approach of Ternary Search</strong></b><span>:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_131102" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// the iterative approach to ternary search</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to perform Ternary Search</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">ternarySearch(</code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">key, </code><code class="keyword">int</code> <code class="plain">ar[])</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(r &gt;= l) {</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the mid1&nbsp; mid2</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid1 = l + (r - l) / </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid2 = r - (r - l) / </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if key is present at any mid</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar[mid1] == key) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid1;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar[mid2] == key) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid2;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Since key is not present at mid,</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// check in which region it is present</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// then repeat the Search operation</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in that region</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &lt; ar[mid1]) {</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between l and mid1</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = mid1 - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(key &gt; ar[mid2]) {</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between mid2 and r</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = mid2 + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The key lies in between mid1 and mid2</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = mid1 + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = mid2 - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key not found</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l, r, p, key;</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Get the array</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Sort the array if not sorted</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number59 index58 alt2">
             &nbsp; 
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting index</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number62 index61 alt1">
             &nbsp; 
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// end element index</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = </code><code class="value">9</code><code class="plain">;</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for 5</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key to be searched in the array</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">key = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number70 index69 alt1">
             &nbsp; 
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search the key using ternarySearch</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">p = ternarySearch(l, r, key, ar);</code>
           </div>
           <div class="line number73 index72 alt2">
             &nbsp; 
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of "</code> <code class="plain">+ key + </code><code class="string">" is "</code> <code class="plain">+ p);</code>
           </div>
           <div class="line number76 index75 alt1">
             &nbsp; 
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for 50</code>
           </div>
           <div class="line number78 index77 alt1">
             &nbsp; 
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Key to be searched in the array</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">key = </code><code class="value">50</code><code class="plain">;</code>
           </div>
           <div class="line number81 index80 alt2">
             &nbsp; 
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search the key using ternarySearch</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">p = ternarySearch(l, r, key, ar);</code>
           </div>
           <div class="line number84 index83 alt1">
             &nbsp; 
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of "</code> <code class="plain">+ key + </code><code class="string">" is "</code> <code class="plain">+ p);</code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number88 index87 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of 5 is 4
Index of 50 is -1</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(2 * log</span><sub><span>3</span></sub><span>n), where n is the size of the array.</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">Complexity Analysis of Ternary Search:</span></u></h2>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Time Complexity:</strong></b></u></p>
 <ul>
  <li value="1"><span>Worst case: O(log</span><sub><span>3</span></sub><span>N)</span></li>
  <li value="2"><span>Average case: Θ(log</span><sub><span>3</span></sub><span>N)</span></li>
  <li value="3"><span>Best case: Ω(1)</span></li>
 </ul>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Auxiliary Space:</strong></b></u><b><strong> </strong></b><span>O(1)</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">Binary search Vs Ternary Search:</span></u></h2>
 <p dir="ltr"><span>The time complexity of the binary search is less than the ternary search as the number of comparisons in ternary search is much more than binary search. Binary Search is used to find the maxima/minima of </span><a href="https://www.geeksforgeeks.org/binary-search-intuition-and-predicate-functions/" rel=""><span>monotonic functions</span></a><span> where as Ternary Search is used to find the maxima/minima of </span><a href="https://www.geeksforgeeks.org/mathematics-unimodal-functions-bimodal-functions/" rel=""><span>unimodal functions</span></a><span>. </span></p>
 <p dir="ltr"><b><strong>Note: </strong></b><span>We can also use ternary search for monotonic functions but the time complexity will be slightly higher as compared to binary search.</span></p>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">Advantages:</strong></b></u></h2>
 <ul>
  <li value="1"><span>Ternary search can find maxima/minima for unimodal functions, where binary search is not applicable.</span></li>
  <li value="2"><span>Ternary Search has a time complexity of O(2 * log</span><sub><span>3</span></sub><span>n), which is more efficient than linear search and comparable to binary search.</span></li>
  <li value="3"><span>Fits well with optimization problems.</span></li>
 </ul>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">Disadvantages:</strong></b></u></h2>
 <ul>
  <li value="1"><span>Ternary Search is only applicable to ordered lists or arrays, and cannot be used on unordered or non-linear data sets.</span></li>
  <li value="2"><span>Ternary Search takes more time to find maxima/minima of monotonic functions as compared to Binary Search. </span></li>
 </ul>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">When to use Ternary Search:</strong></b></u></h2>
 <ul>
  <li value="1"><span>When you have a large ordered array or list and need to find the position of a specific value.</span></li>
  <li value="2"><span>When you need to find the maximum or minimum value of a function.</span></li>
  <li value="3"><span>When you need to find bitonic point in a </span><a href="https://www.geeksforgeeks.org/bitonic-sort/" rel=""><span>bitonic </span></a><span>sequence.</span></li>
  <li value="4"><span>When you have to evaluate a quadratic expression</span></li>
 </ul>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">Summary:</strong></b></u></h2>
 <ul>
  <li value="1"><span>Ternary Search is a divide-and-conquer algorithm that is used to find the position of a specific value in a given array or list.</span></li>
  <li value="2"><span>It works by dividing the array into three parts and recursively performing the search operation on the appropriate part until the desired element is found.&nbsp;</span></li>
  <li value="3"><span>The algorithm has a time complexity of O(2 * log</span><sub><span>3</span></sub><span>n) and is more efficient than a linear search, but less commonly used than other search algorithms like binary search.&nbsp;</span></li>
  <li value="4"><span>It’s important to note that the array to be searched must be sorted for Ternary Search to work correctly.</span></li>
 </ul>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/meta-binary-search-one-sided-binary-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/meta-binary-search-one-sided-binary-search/?ref=lbp">Meta Binary Search | One-Sided Binary Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Jump Search</div> --> 
  <h1>Jump Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Misc"]');
                                            </script> 
<div class="text"> 
 <p>Like <a href="https://www.geeksforgeeks.org/binary-search/">Binary Search</a>, Jump Search is a searching algorithm for sorted arrays. The basic idea is to check fewer elements (than <a href="https://www.geeksforgeeks.org/analysis-of-algorithms-set-2-asymptotic-analysis/">linear search</a>) by jumping ahead by fixed steps or skipping some elements in place of searching all elements.<br>For example, suppose we have an array arr[] of size n and a block (to be jumped) of size m. Then we search in the indexes arr[0], arr[m], arr[2m]…..arr[km] and so on. Once we find the interval (arr[km] &lt; x &lt; arr[(k+1)m]), we perform a linear search operation from the index km to find the element x.<br>Let’s consider the following array: (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610). The length of the array is 16. The Jump search will find the value of 55 with the following steps assuming that the block size to be jumped is 4.&nbsp;<br>STEP 1: Jump from index 0 to index 4;&nbsp;<br>STEP 2: Jump from index 4 to index 8;&nbsp;<br>STEP 3: Jump from index 8 to index 12;&nbsp;<br>STEP 4: Since the element at index 12 is greater than 55, we will jump back a step to come to index 8.&nbsp;<br>STEP 5: Perform a linear search from index 8 to get the element 55.</p>
 <h4>Performance in comparison to linear and binary search:</h4>
 <p>If we compare it with linear and binary search then it comes out then it is better than linear search but not better than binary search.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p>The increasing order of performance is:</p>
 <p>linear search &nbsp;&lt; &nbsp;jump search &nbsp;&lt; &nbsp;binary search</p>
 <p><strong>What is the optimal block size to be skipped?</strong>&nbsp;<br>In the worst case, we have to do n/m jumps, and if the last checked value is greater than the element to be searched for, we perform m-1 comparisons more for linear search. Therefore, the total number of comparisons in the worst case will be ((n/m) + m-1). The value of the function ((n/m) + m-1) will be minimum when m = ?n. Therefore, the best step size is m = <strong>?n.</strong></p>
 <h4>Algorithm steps</h4>
 <ul>
  <li>Jump Search is an algorithm for finding a specific value in a sorted array by jumping through certain steps in the array.</li>
  <li>The steps are determined by the sqrt of the length of the array.&nbsp;</li>
  <li>Here is a step-by-step algorithm for the jump search:</li>
  <li>Determine the step size m by taking the sqrt of the length of the array n.</li>
  <li>Start at the first element of the array and jump m steps until the value at that position is greater than the target value.<br>Once a value greater than the target is found, perform a linear search starting from the previous step until the target is found or it is clear that the target is not in the array.<br>If the target is found, return its index. If not, return -1 to indicate that the target was not found in the array.&nbsp;</li>
 </ul>
 <h4>Example 1 :</h4>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_810064" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to implement Jump Search.</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">JumpSearch</code>
           </div>
           <div class="line number3 index2 alt2"><code class="plain">{</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">jumpSearch(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Finding block size to be jumped</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">step = (</code><code class="keyword">int</code><code class="plain">)Math.floor(Math.sqrt(n));</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Finding the block where element is</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// present (if it is present)</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">prev = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">minStep = Math.Min(step, n)-</code><code class="value">1</code><code class="plain">; arr[minStep] &lt; x; minStep = Math.Min(step, n)-</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">prev = step;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">step += (</code><code class="keyword">int</code><code class="plain">)Math.floor(Math.sqrt(n));</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(prev &gt;= n)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Doing a linear search for x in block</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// beginning with prev.</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(arr[prev] &lt; x)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">prev++;</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we reached next block or end of</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array, element is not present.</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(prev == Math.min(step, n))</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is found</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[prev] == x)</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">prev;</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test function</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String [ ] args)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">0</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">21</code><code class="plain">,</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">34</code><code class="plain">, </code><code class="value">55</code><code class="plain">, </code><code class="value">89</code><code class="plain">, </code><code class="value">144</code><code class="plain">, </code><code class="value">233</code><code class="plain">, </code><code class="value">377</code><code class="plain">, </code><code class="value">610</code><code class="plain">};</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">55</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the index of 'x' using Jump Search</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = jumpSearch(arr, x);</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the index where 'x' is located</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"\nNumber "</code> <code class="plain">+ x +</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">" is at index "</code> <code class="plain">+ index);</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p>Output:&nbsp;<br>&nbsp;</p>
 <pre>Number 55 is at index 10</pre>
 <p>Time Complexity : O(?n)&nbsp;<br>Auxiliary Space : O(1)</p>
 <h4>Advantages of Jump Search:</h4>
 <ol>
  <li>Better than a linear search for arrays where the elements are uniformly distributed.</li>
  <li>Jump search has a lower time complexity compared to a linear search for large arrays.</li>
  <li>The number of steps taken in jump search is proportional to the square root of the size of the array, making it more efficient for large arrays.</li>
  <li>It is easier to implement compared to other search algorithms like binary search or ternary search.</li>
  <li>Jump search works well for arrays where the elements are in order and uniformly distributed, as it can jump to a closer position in the array with each iteration.</li>
 </ol>
 <p><strong>Important points:</strong>&nbsp;<br>&nbsp;</p>
 <ul>
  <li>Works only with sorted arrays.</li>
  <li>The optimal size of a block to be jumped is (? n). This makes the time complexity of Jump Search O(? n).</li>
  <li>The time complexity of Jump Search is between Linear Search ((O(n)) and Binary Search (O(Log n)).</li>
  <li>Binary Search is better than Jump Search, but Jump Search has the advantage that we traverse back only once (Binary Search may require up to O(Log n) jumps, consider a situation where the element to be searched is the smallest element or just bigger than the smallest). So, in a system where binary search is costly, we use Jump Search.</li>
 </ul>
 <p><strong>References:</strong>&nbsp;<br><a target="_blank" rel="noopener noreferrer nofollow" href="https://en.wikipedia.org/wiki/Jump_search">https://en.wikipedia.org/wiki/Jump_search</a></p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/ternary-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/ternary-search/?ref=lbp">Ternary Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Interpolation Search</div> --> 
  <h1>Interpolation Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Algorithms","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given a sorted array of n uniformly distributed values arr[], write a function to search for a particular element x in the array.&nbsp;<br>Linear Search finds the element in O(n) time, <a href="https://www.geeksforgeeks.org/jump-search/">Jump Search</a> takes O(? n) time and <a href="https://www.geeksforgeeks.org/binary-search/">Binary Search</a> takes O(log n) time.&nbsp;<br>The Interpolation Search is an improvement over <a href="https://www.geeksforgeeks.org/binary-search/">Binary Search</a> for instances, where the values in a sorted array are uniformly distributed. Interpolation constructs new data points within the range of a discrete set of known data points. Binary Search always goes to the middle element to check. On the other hand, interpolation search may go to different locations according to the value of the key being searched. For example, if the value of the key is closer to the last element, interpolation search is likely to start search toward the end side.<br>To find the position to be searched, it uses the following formula.&nbsp;</p>
 <blockquote>
  <p>// The idea of formula is to return higher value of pos<br>// when element to be searched is closer to arr[hi]. And<br>// smaller value when closer to arr[lo]</p>
  <div id="GFG_AD_gfg_mobile_336x280"></div>
  <p>arr[] ==&gt; Array where elements need to be searched</p>
  <p>x &nbsp; &nbsp; ==&gt; Element to be searched</p>
  <p>lo &nbsp; &nbsp;==&gt; Starting index in arr[]</p>
  <p>hi &nbsp; &nbsp;==&gt; Ending index in arr[]</p>
  <p><img src="https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-c02001b17417bbc440bd7ffb877b2bff_l3.png" class="ql-img-inline-formula quicklatex-auto-format" alt="pos = lo + [ \frac{(x-arr[lo])*(hi-lo) }{ (arr[hi]-arr[Lo]) }]               " title="Rendered by QuickLaTeX.com" height="42" width="325" style="vertical-align: -14px;"></p>
 </blockquote>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p>There are many different interpolation methods and one such is known as linear interpolation. Linear interpolation takes two data points which we assume as (x1,y1) and (x2,y2) and the formula is : &nbsp;at point(x,y).</p>
 <p>This algorithm works in a way we search for a word in a dictionary. The interpolation search algorithm improves the binary search algorithm. &nbsp;The formula for finding a value is: K = data-low/high-low.</p>
 <div>
   &nbsp; 
 </div>
 <p>K is a constant which is used to narrow the search space. In the case of binary search, the value for this constant is: K=(low+high)/2.</p>
 <p>&nbsp;&nbsp;</p>
 <p><strong>The formula for pos can be derived as follows.</strong></p>
 <pre>Let's assume that the elements of the array are linearly distributed. 

General equation of line : y = m*x + c.
y is the value in the array and x is its index.

Now putting value of lo,hi and x in the equation
arr[hi] = m*hi+c ----(1)
arr[lo] = m*lo+c ----(2)
x = m*pos + c     ----(3)

m = (arr[hi] - arr[lo] )/ (hi - lo)

subtracting eqxn (2) from (3)
x - arr[lo] = m * (pos - lo)
lo + (x - arr[lo])/m = pos
pos = lo + (x - arr[lo]) *(hi - lo)/(arr[hi] - arr[lo])</pre>
 <p><strong>Algorithm</strong>&nbsp;<br>The rest of the Interpolation algorithm is the same except for the above partition logic.&nbsp;</p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <ul>
  <li><strong>Step1:</strong> In a loop, calculate the value of “pos” using the probe position formula.&nbsp;</li>
  <li><strong>Step2:</strong> If it is a match, return the index of the item, and exit.&nbsp;</li>
  <li><strong>Step3:</strong> If the item is less than arr[pos], calculate the probe position of the left sub-array. Otherwise, calculate the same in the right sub-array.&nbsp;</li>
  <li><strong>Step4:</strong> Repeat until a match is found or the sub-array reduces to zero.</li>
 </ul>
 <p>Below is the implementation of the algorithm.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_890825" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to implement interpolation</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// search with recursion</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is present in arr[0..n-1], then returns</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// index of it, else returns -1.</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">interpolationSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">lo,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">hi, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Since array is sorted, an element</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// present in array must be in range</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// defined by corner</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(lo &lt;= hi &amp;&amp; x &gt;= arr[lo] &amp;&amp; x &lt;= arr[hi]) {</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Probing the position with keeping</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// uniform distribution in mind.</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pos = lo</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (((hi - lo) / (arr[hi] - arr[lo]))</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">* (x - arr[lo]));</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Condition of target found</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] == x)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">pos;</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is larger, x is in right sub array</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] &lt; x)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">interpolationSearch(arr, pos + </code><code class="value">1</code><code class="plain">, hi,</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x);</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is smaller, x is in left sub array</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] &gt; x)</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">interpolationSearch(arr, lo, pos - </code><code class="value">1</code><code class="plain">,</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x);</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Array of items on which search will</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// be conducted.</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">16</code><code class="plain">, </code><code class="value">18</code><code class="plain">, </code><code class="value">19</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">21</code><code class="plain">,</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">22</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">24</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">42</code><code class="plain">, </code><code class="value">47</code> <code class="plain">};</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Element to be searched</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">18</code><code class="plain">;</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = interpolationSearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number56 index55 alt1">
             &nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element was found</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index != -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element found at index "</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ index);</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found."</code><code class="plain">);</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number64 index63 alt1"><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="comments">// This code is contributed by equbalzeeshan</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element found at index 4</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(log<sub>2</sub>(log<sub>2</sub> n)) for the average case, and O(n) for the worst case&nbsp;<br><strong>Auxiliary Space Complexity: </strong>O(1)</p>
 <h4>Another approach:-</h4>
 <p>This is the iteration approach for the interpolation search.</p>
 <ul>
  <li><strong>Step1:</strong> In a loop, calculate the value of “pos” using the probe position formula.&nbsp;</li>
  <li><strong>Step2:</strong> If it is a match, return the index of the item, and exit.&nbsp;</li>
  <li><strong>Step3:</strong> If the item is less than arr[pos], calculate the probe position of the left sub-array. Otherwise, calculate the same in the right sub-array.&nbsp;</li>
  <li><strong>Step4:</strong> Repeat until a match is found or the sub-array reduces to zero.</li>
 </ul>
 <p>Below is the implementation of the algorithm.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_899438" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to implement interpolation</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// search with recursion</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is present in arr[0..n-1], then returns</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// index of it, else returns -1.</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">interpolationSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">lo,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">hi, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(lo &lt;= hi &amp;&amp; x &gt;= arr[lo] &amp;&amp; x &lt;= arr[hi]) {</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Probing the position with keeping</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// uniform distribution in mind.</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pos = lo</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (((hi - lo) / (arr[hi] - arr[lo]))</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">* (x - arr[lo]));</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Condition of target found</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] == x)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">pos;</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is larger, x is in right sub array</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] &lt; x)</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">interpolationSearch(arr, pos + </code><code class="value">1</code><code class="plain">, hi,</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x);</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is smaller, x is in left sub array</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pos] &gt; x)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">interpolationSearch(arr, lo, pos - </code><code class="value">1</code><code class="plain">,</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x);</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Array of items on which search will</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// be conducted.</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">16</code><code class="plain">, </code><code class="value">18</code><code class="plain">, </code><code class="value">19</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">21</code><code class="plain">,</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">22</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">24</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">42</code><code class="plain">, </code><code class="value">47</code> <code class="plain">};</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number49 index48 alt2">
             &nbsp; 
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Element to be searched</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">18</code><code class="plain">;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = interpolationSearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element was found</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index != -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element found at index "</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ index);</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found."</code><code class="plain">);</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number61 index60 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element found at index 4</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(log2(log2 n)) for the average case, and O(n) for the worst case&nbsp;<br><strong>Auxiliary Space Complexity:</strong> O(1)</p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/jump-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/jump-search/?ref=lbp">Jump Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Exponential Search</div> --> 
  <h1>Exponential Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p>The name of this searching algorithm may be misleading as it works in O(Log n) time. The name comes from the way it searches an element.</p>
 <pre>Given a sorted array, and an element x to be 
searched, find position of x in the array.

Input:  arr[] = {10, 20, 40, 45, 55}
        x = 45
Output: Element found at index 3

Input:  arr[] = {10, 15, 25, 45, 55}
        x = 15
Output: Element found at index 1</pre>
 <p>We have discussed, <a href="https://www.geeksforgeeks.org/linear-search/">linear search</a>, <a href="https://www.geeksforgeeks.org/binary-search/">binary search</a> for this problem.<br>Exponential search involves two steps:&nbsp;&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <ol>
  <li>Find range where element is present</li>
  <li>Do Binary Search in above found range.</li>
 </ol>
 <p><strong>How to find the range where element may be present?</strong>&nbsp;<br>The idea is to start with subarray size 1, compare its last element with x, then try size 2, then 4 and so on until last element of a subarray is not greater.&nbsp;<br>Once we find an index i (after repeated doubling of i), we know that the element must be present between i/2 and i (Why i/2? because we could not find a greater value in previous iteration)<br>Given below are the implementations of above steps.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_404103" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// find an element x in a</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// sorted array using </code>
           </div>
           <div class="line number4 index3 alt1"><code class="comments">// Exponential search.</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">GFG</code>
           </div>
           <div class="line number8 index7 alt1"><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns position of </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first occurrence of</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// x in array</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">exponentialSearch(</code><code class="keyword">int</code> <code class="plain">arr[],</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is present at first location itself</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[</code><code class="value">0</code><code class="plain">] == x)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find range for binary search by</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// repeated doubling</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; n &amp;&amp; arr[i] &lt;= x)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i = i*</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Call binary search for the found range.</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Arrays.binarySearch(arr, i/</code><code class="value">2</code><code class="plain">, </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Math.min(i, n-</code><code class="value">1</code><code class="plain">), x);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">40</code><code class="plain">};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = exponentialSearch(arr, </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr.length, x);</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println((result &lt; </code><code class="value">0</code><code class="plain">) ? </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code> <code class="plain">:</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is present at index "</code> <code class="plain">+ </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">result);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3</pre>
 </div>
 <p><strong>Time Complexity : </strong>O(Log n)&nbsp;<br><strong>Auxiliary Space :</strong> The above implementation of Binary Search is recursive and requires O(Log n) space. With iterative Binary Search, we need only O(1) space.<br><strong>Applications of Exponential Search:</strong>&nbsp;</p>
 <ol>
  <li>Exponential Binary Search is particularly useful for unbounded searches, where size of array is infinite. Please refer <a href="https://www.geeksforgeeks.org/find-the-point-where-a-function-becomes-negative/">Unbounded Binary Search</a> for an example.</li>
  <li>It works better than Binary Search for bounded arrays, and also when the element to be searched is closer to the first element.</li>
 </ol>
 <p><strong>Reference:</strong>&nbsp;<br><a target="_blank" rel="noopener noreferrer nofollow" href="https://en.wikipedia.org/wiki/Exponential_search">https://en.wikipedia.org/wiki/Exponential_search</a></p>
 <p>&nbsp;</p>
 <p></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p><strong>Approach</strong> <strong>2</strong>: Iterative implementation</p>
 <p>Here’s how it works:</p>
 <p>&nbsp; &nbsp;We start with an index i equal to 1 and repeatedly double it until either i is greater than or equal to the length of the array or the value at index i is greater than or equal to the target value x.<br>&nbsp; &nbsp;We then perform a binary search on the range [i/2, min(i, n-1)], where n is the length of the array. This range is guaranteed to contain the target value, if it is present in the array, because we know that the target value must be greater than or equal to the value at index i/2 and less than or equal to the value at index min(i, n-1).<br>&nbsp; &nbsp;If we find the target value in the binary search, we return its index. Otherwise, we return -1 to indicate that the target value is not present in the array.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_539108" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation of above approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Exponential search function</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">exponential_search(ArrayList&lt;Integer&gt; arr, </code><code class="keyword">int</code> <code class="plain">x) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.size();</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find range for binary search by repeatedly doubling i</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; n &amp;&amp; arr.get(i) &lt; x)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i *= </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Perform binary search on the range [i/2, min(i, n-1)]</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">left = i / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">right = Math.min(i, n - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(left &lt;= right) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (left + right) / </code><code class="value">2</code><code class="plain">;&nbsp; </code><code class="comments">// finding mid</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr.get(mid) == x)</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr.get(mid) &lt; x)</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="comments">// Driver Code</code>
           </div>
           <div class="line number37 index36 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ArrayList&lt;Integer&gt; arr = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;(Arrays.asList(</code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">40</code><code class="plain">));</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.size();</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = exponential_search(arr, x);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found in the array"</code><code class="plain">);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element is present at index "</code> <code class="plain">+ result);</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3</pre>
 </div>
 <p>Time Complexity : O(Log n)&nbsp;<br>Auxiliary Space : &nbsp;O(1) space.</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/interpolation-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/interpolation-search/?ref=lbp">Interpolation Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Fibonacci Search</div> --> 
  <h1>Fibonacci Search</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Fibonacci","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given a sorted array arr[] of size n and an element x to be searched in it. Return index of x if it is present in array else return -1.&nbsp;<br><strong>Examples:&nbsp;</strong></p>
 <blockquote>
  <p><strong>Input:</strong> &nbsp;arr[] = {2, 3, 4, 10, 40}, x = 10<br><strong>Output:&nbsp;</strong> 3<br>Element x is present at index 3.</p>
  <div id="GFG_AD_gfg_mobile_336x280"></div>
  <p><strong>Input:&nbsp;</strong> arr[] = {2, 3, 4, 10, 40}, x = 11<br><strong>Output:</strong> &nbsp;-1<br>Element x is not present.</p>
 </blockquote>
 <p>Fibonacci Search is a comparison-based technique that uses Fibonacci numbers to search an element in a sorted array.<br><strong>Similarities with Binary Search:</strong>&nbsp;&nbsp;</p>
 <ol>
  <li>Works for sorted arrays</li>
  <li>A Divide and Conquer Algorithm.</li>
  <li>Has Log n time complexity.</li>
 </ol>
 <p><strong>Differences with Binary Search</strong>:&nbsp;</p>
 <ol>
  <li>Fibonacci Search divides given array into unequal parts</li>
  <li>Binary Search uses a division operator to divide range. Fibonacci Search doesn’t use /, but uses + and -. The division operator may be costly on some CPUs.</li>
  <li>Fibonacci Search examines relatively closer elements in subsequent steps. So when the input array is big that cannot fit in CPU cache or even in RAM, Fibonacci Search can be useful.</li>
 </ol>
 <p><strong>Background:</strong>&nbsp;<br>Fibonacci Numbers are recursively defined as F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1. First few Fibonacci Numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …<br><strong>Observations:</strong>&nbsp;<br>Below observation is used for range elimination, and hence for the O(log(n)) complexity.&nbsp;&nbsp;</p>
 <pre>F(n - 2) ≈ (1/3)*F(n) and 
F(n - 1) ≈ (2/3)*F(n).</pre>
 <p><strong>Algorithm:</strong>&nbsp;<br>Let the searched element be x.<br>The idea is to first find the smallest Fibonacci number that is greater than or equal to the length of the given array. Let the found Fibonacci number be fib (m’th Fibonacci number). We use (m-2)’th Fibonacci number as the index (If it is a valid index). Let (m-2)’th Fibonacci Number be i, we compare arr[i] with x, if x is same, we return i. Else if x is greater, we recur for subarray after i, else we recur for subarray before i.<br>Below is the complete algorithm&nbsp;<br>Let arr[0..n-1] be the input array and the element to be searched be x.&nbsp;&nbsp;</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <ol>
  <li>Find the smallest Fibonacci Number greater than or equal to n. Let this number be fibM [m’th Fibonacci Number]. Let the two Fibonacci numbers preceding it be fibMm1 [(m-1)’th Fibonacci Number] and fibMm2 [(m-2)’th Fibonacci Number].</li>
  <li>While the array has elements to be inspected:&nbsp; 
   <ol>
    <li>Compare x with the last element of the range covered by fibMm2</li>
    <li><strong>If</strong> x matches, return index</li>
    <li><strong>Else If</strong> x is less than the element, move the three Fibonacci variables two Fibonacci down, indicating elimination of approximately rear two-third of the remaining array.</li>
    <li><strong>Else</strong> x is greater than the element, move the three Fibonacci variables one Fibonacci down. Reset offset to index. Together these indicate the elimination of approximately front one-third of the remaining array.</li>
   </ol></li>
  <li>Since there might be a single element remaining for comparison, check if fibMm1 is 1. If Yes, compare x with that remaining element. If match, return index.</li>
 </ol>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_107399" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for Fibonacci Search </code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Fibonacci { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Utility function to find minimum </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of two elements </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">min(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y) </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x &lt;= y) ? x : y; </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Returns index of x if present, else returns -1 */</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">fibMonaccianSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">x, </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n) </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Initialize fibonacci numbers */</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">fibMMm2 = </code><code class="value">0</code><code class="plain">; </code><code class="comments">// (m-2)'th Fibonacci No. </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">fibMMm1 = </code><code class="value">1</code><code class="plain">; </code><code class="comments">// (m-1)'th Fibonacci No. </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">fibM = fibMMm2 + fibMMm1; </code><code class="comments">// m'th Fibonacci </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* fibM is going to store the smallest </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Fibonacci Number greater than or equal to n */</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(fibM &lt; n) { </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm2 = fibMMm1; </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm1 = fibM; </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibM = fibMMm2 + fibMMm1; </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Marks the eliminated range from front </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">offset = -</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* while there are elements to be inspected. </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Note that we compare arr[fibMm2] with x. </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">When fibM becomes 1, fibMm2 becomes 0 */</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(fibM &gt; </code><code class="value">1</code><code class="plain">) { </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if fibMm2 is a valid location </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = min(offset + fibMMm2, n - </code><code class="value">1</code><code class="plain">); </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is greater than the value at </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">index fibMm2, cut the subarray array </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">from offset to i */</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &lt; x) { </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibM = fibMMm1; </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm1 = fibMMm2; </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm2 = fibM - fibMMm1; </code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">offset = i; </code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is less than the value at index </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">fibMm2, cut the subarray after i+1 */</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[i] &gt; x) { </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibM = fibMMm2; </code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm1 = fibMMm1 - fibMMm2; </code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fibMMm2 = fibM - fibMMm1; </code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* element found. return index */</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i; </code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* comparing the last element with x */</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(fibMMm1 == </code><code class="value">1</code> <code class="plain">&amp;&amp; arr[n-</code><code class="value">1</code><code class="plain">] == x) </code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*element not found. return -1 */</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// driver code </code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">10</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">80</code><code class="plain">, </code><code class="value">82</code><code class="plain">, </code><code class="value">85</code><code class="plain">, </code><code class="value">90</code><code class="plain">, </code><code class="value">100</code><code class="plain">,</code><code class="value">235</code><code class="plain">}; </code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">12</code><code class="plain">; </code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">235</code><code class="plain">; </code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ind = fibMonaccianSearch(arr, x, n); </code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(ind&gt;=</code><code class="value">0</code><code class="plain">) </code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Found at index: "</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ind); </code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(x+</code><code class="string">" isn't present in the array"</code><code class="plain">); </code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number84 index83 alt1"><code class="plain">} </code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number86 index85 alt1"><code class="comments">// This code is contributed by rishabh_jain</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Found at index: 11</pre>
 </div>
 <p><strong>Illustration:</strong>&nbsp;<br>Let us understand the algorithm with the below example:&nbsp;&nbsp;</p>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/pic2-1024x136.png" alt="pic"></p>
 <p>Illustration assumption: 1-based indexing. Target element x is 85. Length of array n = 11.<br>Smallest Fibonacci number greater than or equal to 11 is 13. As per our illustration, fibMm2 = 5, fibMm1 = 8, and fibM = 13.<br>Another implementation detail is the offset variable (zero-initialized). It marks the range that has been eliminated, starting from the front. We will update it from time to time.<br>Now since the offset value is an index and all indices including it and below it have been eliminated, it only makes sense to add something to it. Since fibMm2 marks approximately one-third of our array, as well as the indices it marks, are sure to be valid ones, we can add fibMm2 to offset and check the element at index i = min(offset + fibMm2, n).&nbsp;</p>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/fibSearch-1024x303.png" alt="fibSearch"></p>
 <p><strong>Visualization:</strong>&nbsp;&nbsp;</p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/fibSearch31.png" alt="fibSearch3"></p>
 <p><strong>Time Complexity analysis:</strong>&nbsp;<br>The worst-case will occur when we have our target in the larger (2/3) fraction of the array, as we proceed to find it. In other words, we are eliminating the smaller (1/3) fraction of the array every time. We call once for n, then for(2/3) n, then for (4/9) n, and henceforth.<br>Consider that:&nbsp;</p>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/fibSearch2-1024x257.png" alt="fibSearch2"></p>
 <p><strong>Auxiliary Space:</strong> O(1)</p>
 <p><strong>References:</strong>&nbsp;<br><a target="_blank" rel="noopener noreferrer nofollow" href="https://en.wikipedia.org/wiki/Fibonacci_search_technique">https://en.wikipedia.org/wiki/Fibonacci_search_technique</a></p>
 <p>&nbsp;</p>
 <p> </p>
 <p><strong>Approach 2</strong>: Iterative implementation</p>
 <p>Fibonacci Search is a searching algorithm used to find the position of an element in a sorted array. The basic idea behind Fibonacci Search is to use Fibonacci numbers to determine the split points in the array and perform binary search on the appropriate subarray.</p>
 <p>Here’s a Python implementation of Fibonacci Search using an iterative approach:</p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_545742" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">fibonacciSearch(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">x) { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">0</code><code class="plain">) { </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize Fibonacci numbers </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">fib1 = </code><code class="value">0</code><code class="plain">, fib2 = </code><code class="value">1</code><code class="plain">, fib3 = fib1 + fib2; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the smallest Fibonacci number greater than or equal to n </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(fib3 &lt; n) { </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib1 = fib2; </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib2 = fib3; </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib3 = fib1 + fib2; </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize variables for the current and previous split points </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">offset = -</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(fib3 &gt; </code><code class="value">1</code><code class="plain">) { </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = Math.min(offset + fib2, n-</code><code class="value">1</code><code class="plain">); </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is greater than the value at index i, move the split point to the right </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &lt; x) { </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib3 = fib2; </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib2 = fib1; </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib1 = fib3 - fib2; </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">offset = i; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is less than the value at index i, move the split point to the left </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[i] &gt; x) { </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib3 = fib1; </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib2 = fib2 - fib1; </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">fib1 = fib3 - fib2; </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is equal to the value at index i, return the index </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{ </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i; </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is not found in the array, return -1 </code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(fib2 == </code><code class="value">1</code> <code class="plain">&amp;&amp; arr[offset+</code><code class="value">1</code><code class="plain">] == x) { </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">offset + </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{ </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) { </code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">10</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">80</code><code class="plain">, </code><code class="value">82</code><code class="plain">, </code><code class="value">85</code><code class="plain">, </code><code class="value">90</code><code class="plain">, </code><code class="value">100</code><code class="plain">, </code><code class="value">235</code><code class="plain">}; </code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">235</code><code class="plain">; </code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ind = fibonacciSearch(arr, x); </code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ind &gt;= </code><code class="value">0</code><code class="plain">) { </code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Found at index: "</code> <code class="plain">+ ind); </code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{ </code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x + </code><code class="string">" isn't present in the array"</code><code class="plain">); </code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number65 index64 alt2"><code class="plain">} </code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Found at index: 11</pre>
 </div>
 <p>The time complexity of Fibonacci Search is O(log n), where n is the length of the input array.</p>
 <p>This is because at each iteration of the algorithm, the search range is reduced by a factor of approximately 1/?, where ? is the golden ratio (? ? 1.618). The number of iterations required to reduce the search range to a single element is approximately log?(n), where log? denotes the natural logarithm.</p>
 <p>Since each iteration of Fibonacci Search requires constant time, the overall time complexity of the algorithm is O(log n). This makes Fibonacci Search a faster algorithm than linear search, but slower than binary search and other logarithmic search algorithms such as interpolation search and exponential search.</p>
 <p>Auxiliary Space: O(1)</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/fibonacci-coding/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/fibonacci-coding/?ref=lbp">Fibonacci Coding</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">The Ubiquitous Binary Search | Set 1</div> --> 
  <h1>The Ubiquitous Binary Search | Set 1</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>We are aware of the binary search algorithm. Binary search is&nbsp;the easiest algorithm to get right. I present some interesting problems that I collected on binary search. There were some requests on binary search. </span><b><strong>I request you to honor the code, “I sincerely attempt to solve the problem and ensure there are no corner cases”. After reading each problem, minimize the browser and try solving it.</strong></b><span>&nbsp;</span></p>
 <p dir="ltr"><b><strong>Problem Statement:</strong></b><span> Given a sorted array of N distinct elements, find a key in the array using the least number of comparisons. (Do you think binary search is optimal to search a key in sorted array?) Without much theory, here is typical binary search algorithm.&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_307543" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to implement the approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="comments">// Returns location of key, or -1 if not found</code>
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">BinarySearch(</code><code class="keyword">int</code> <code class="plain">A[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code><code class="plain">( l &lt; r )</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m = l + (r-l)/</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( A[m] == key ) </code><code class="comments">// first comparison</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">m;</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( A[m] &lt; key ) </code><code class="comments">// second comparison</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = m + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="comments">// This code is contributed by sanjoy_62.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>Theoretically we need </span><i><em class="GFGEditorTheme__textItalic">log N + 1</em></i><span> comparisons in worst case. If we observe, we are using two comparisons per iteration except during final successful match, if any. In practice, comparison would be costly operation, it won’t be just primitive type comparison. It is more economical to minimize comparisons as that of theoretical limit. See below figure on initialize of indices in the next implementation. </span><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/initialindices.png" width="inherit" height="inherit"><span>&nbsp;</span></p>
 <p dir="ltr"><span>The following implementation uses fewer number of comparisons.&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_469369" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java function for above algorithm</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// Invariant: A[l] &lt;= key and A[r] &gt; key</code>
           </div>
           <div class="line number4 index3 alt1"><code class="comments">// Boundary: |r - l| = 1</code>
           </div>
           <div class="line number5 index4 alt2"><code class="comments">// Input: A[l .... r-1]</code>
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">int</code> <code class="plain">BinarySearch(</code><code class="keyword">int</code> <code class="plain">A[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m;</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">while</code><code class="plain">( r - l k &gt; </code><code class="value">1</code> <code class="plain">)</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m = l + k(r - l)/</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( A[m]k &lt;= key )</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = km;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">elsek</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( A[l] == key )</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">l;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( A[r] == key )</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">r;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="comments">//this code is contributed by Akshay Tripathi(akshaytripathi630)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>In the while loop we are depending only on one comparison. The search space converges to place </span><i><em class="GFGEditorTheme__textItalic">l</em></i><span> and </span><i><em class="GFGEditorTheme__textItalic">r</em></i><span> point two different consecutive elements. We need one more comparison to trace search status. You can see sample test case </span><a href="http://ideone.com/76bad0" target="_blank" rel="noopener noreferrer nofollow"><span>http://ideone.com/76bad0</span></a><span>. (</span><i><em class="GFGEditorTheme__textItalic">C++11 code</em></i><span>)&nbsp;</span></p>
 <p dir="ltr"><b><strong>Problem Statement:</strong></b><span> Given an array of N distinct integers, find floor value of input ‘key’. Say, A = {-1, 2, 3, 5, 6, 8, 9, 10} and key = 7, we should return 6 as outcome. We can use the above optimized implementation to find floor value of key. We keep moving the left pointer to right most as long as the invariant holds. Eventually left pointer points an element less than or equal to key (by definition floor value). The following are possible corner cases, —&gt; If all elements in the array are smaller than key, left pointer moves till last element. —&gt; If all elements in the array are greater than key, it is an error condition. —&gt; If all elements in the array equal and &lt;= key, it is worst case input to our implementation.&nbsp;</span></p>
 <p dir="ltr"><span>Here is implementation,&nbsp;</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_478262" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Floor {</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function returns the largest value in A that is</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// less than or equal to key. Invariant: A[l] &lt;= key and</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A[r] &gt; key Boundary: |r - l| = 1 Input: A[l .... r-1]</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Precondition: A[l] &lt;= key &lt;= A[r]</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">floor(</code><code class="keyword">int</code><code class="plain">[] A, </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m;</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(r - l &gt; </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A[m] &lt;= key)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = m;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">A[l];</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initial call</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">floor(</code><code class="keyword">int</code><code class="plain">[] A, </code><code class="keyword">int</code> <code class="plain">size, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Add error checking if key &lt; A[0]</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &lt; A[</code><code class="value">0</code><code class="plain">])</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Observe boundaries</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">floor(A, </code><code class="value">0</code><code class="plain">, size, key);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(floor(arr, arr.length - </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">));</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>You can see some test cases </span><a href="http://ideone.com/z0Kx4a" target="_blank" rel="noopener noreferrer nofollow"><span>http://ideone.com/z0Kx4a</span></a><span>.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Problem Statement:</strong></b><span> Given a sorted array with possible duplicate elements. Find number of&nbsp;occurrences&nbsp;of input ‘key’ in </span><i><em class="GFGEditorTheme__textItalic">log N</em></i><span> time. The idea here is finding left and right most&nbsp;occurrences&nbsp;of key in the array using binary search. We can modify floor function to trace right most occurrence and left most occurrence.&nbsp;</span></p>
 <p dir="ltr"><span>Here is implementation,&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_248258" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">OccurrencesInSortedArray {</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the index of the leftmost occurrence of the</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// given key in the array</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getLeftPosition(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">left,</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">right, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(right - left &gt; </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = left + (right - left) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &gt;= key) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = mid;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = mid;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">right;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the index of the rightmost occurrence of the</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// given key in the array</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getRightPosition(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">left,</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">right, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(right - left &gt; </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = left + (right - left) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &lt;= key) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = mid;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = mid;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">left;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the count of occurrences of the given key in</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the array</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">countOccurrences(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">left</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= getLeftPosition(arr, -</code><code class="value">1</code><code class="plain">, arr.length - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">right</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= getRightPosition(arr, </code><code class="value">0</code><code class="plain">, arr.length, key);</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[left] == key &amp;&amp; key == arr[right]) {</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">right - left + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">countOccurrences(arr, key)); </code><code class="comments">// Output: 3</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>Sample code </span><a href="http://ideone.com/zn6R6a" target="_blank" rel="noopener noreferrer nofollow"><span>http://ideone.com/zn6R6a</span></a><span>.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Problem Statement:</strong></b><span>&nbsp;Given a sorted array of distinct elements, and the array is rotated at an unknown position. Find minimum element in the array. We can see &nbsp;pictorial representation of sample input array in the below figure. </span><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/localminimum.png" width="inherit" height="inherit"><span>&nbsp;</span></p>
 <p dir="ltr"><span>We converge the search space till </span><i><em class="GFGEditorTheme__textItalic">l</em></i><span> and </span><i><em class="GFGEditorTheme__textItalic">r</em></i><span>&nbsp;points single element. If the middle location falls in the first pulse, the condition A[m] &lt; A[r] doesn’t satisfy, we converge our search space to A[m+1 … r]. If the middle location falls in the second pulse, the condition A[m] &lt; A[r] satisfied, we converge our search space to A[1 … m]. At every iteration we check for search space size, if it is 1, we are done.&nbsp;</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <p dir="ltr"><span>Given below is implementation of algorithm.&nbsp;</span><i><em class="GFGEditorTheme__textItalic">Can you come up with different implementation?</em></i><span>&nbsp;</span></p>
 <div class="noIdeBtnDiv">
  <div class="responsive-tabs">
   <h2 class="tabtitle">Java</h2>
   <div class="tabcontent">
    <div class="code-block">
     <div class="code-gutter">
      <div class="editor-buttons-container">
       <div class="editor-buttons">
        <p></p>
       </div>
       <p></p>
      </div>
      <p></p>
     </div>
     <div class="code-container">
      <div id="highlighter_459605" class="syntaxhighlighter nogutter  ">
       <table border="0" cellpadding="0" cellspacing="0">
        <tbody>
         <tr>
          <td class="code">
           <div class="container">
            <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearchIndexOfMinimumRotatedArray(</code><code class="keyword">int</code> <code class="plain">A[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r)</code>
            </div>
            <div class="line number2 index1 alt1"><code class="plain">{</code>
            </div>
            <div class="line number3 index2 alt2">
              &nbsp; 
            </div>
            <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// extreme condition, size zero or size two&nbsp; </code>
            </div>
            <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m;</code>
            </div>
            <div class="line number6 index5 alt1">
              &nbsp; 
            </div>
            <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Precondition: A[l] &gt; A[r]</code>
            </div>
            <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A[l] &gt;= A[r]) {</code>
            </div>
            <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">l;</code>
            </div>
            <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
            </div>
            <div class="line number11 index10 alt2">
              &nbsp; 
            </div>
            <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r) {</code>
            </div>
            <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Termination condition (l will eventually falls on r, and r always</code>
            </div>
            <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// point minimum possible value)</code>
            </div>
            <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(l == r) {</code>
            </div>
            <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">l;</code>
            </div>
            <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
            </div>
            <div class="line number18 index17 alt1">
              &nbsp; 
            </div>
            <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
            </div>
            <div class="line number20 index19 alt1">
              &nbsp; 
            </div>
            <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A[m] &lt; A[r]) {</code>
            </div>
            <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// min can't be in the range</code>
            </div>
            <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// (m &lt; i &lt;= r), we can exclude A[m+1 ... r]</code>
            </div>
            <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m;</code>
            </div>
            <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
            </div>
            <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// min must be in the range (m &lt; i &lt;= r),</code>
            </div>
            <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we must search in A[m+1 ... r]</code>
            </div>
            <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = m + </code><code class="value">1</code><code class="plain">;</code>
            </div>
            <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
            </div>
            <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
            </div>
            <div class="line number31 index30 alt2">
              &nbsp; 
            </div>
            <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
            </div>
            <div class="line number33 index32 alt2"><code class="plain">}</code>
            </div>
            <div class="line number34 index33 alt1">
              &nbsp; 
            </div>
            <div class="line number35 index34 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearchIndexOfMinimumRotatedArray(</code><code class="keyword">int</code> <code class="plain">A[], </code><code class="keyword">int</code> <code class="plain">size) {</code>
            </div>
            <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearchIndexOfMinimumRotatedArray(A, </code><code class="value">0</code><code class="plain">, size - </code><code class="value">1</code><code class="plain">);</code>
            </div>
            <div class="line number37 index36 alt2"><code class="plain">}</code>
            </div>
           </div></td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="code-editor-container"></div>
     <p></p>
    </div>
    <div class="code-output-container">
     <div class="output-block">
      <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
      <p></p>
      <pre class="output-pre"></pre>
      <p></p>
     </div>
     <div class="ide-link-div">
      <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
      <p></p>
      <pre id="ide-url"></pre>
      <p></p>
     </div>
     <p></p>
    </div>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>See sample test cases </span><a href="http://ideone.com/KbwDrk" target="_blank" rel="noopener noreferrer nofollow"><span>http://ideone.com/KbwDrk</span></a><span>.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Exercises:</strong></b><span>&nbsp;</span></p>
 <p dir="ltr"><span>1. A function called </span><i><em class="GFGEditorTheme__textItalic">signum(x, y)</em></i><span>&nbsp;is defined as,</span></p>
 <pre><span>signum(x, y) = -1 if x &lt; y</span><br><span>             =  0 if x = y</span><br><span>             =  1 if x &gt; y</span><br><br></pre>
 <p dir="ltr"><span>Did you come across any instruction set in which a comparison behaves like </span><i><em class="GFGEditorTheme__textItalic">signum</em></i><span> function? Can it make the first implementation of binary search optimal?&nbsp;</span></p>
 <p dir="ltr"><span>2. Implement ceil function replica of floor function.&nbsp;</span></p>
 <p dir="ltr"><span>3. Discuss with your friends “Is binary search optimal (results in the least number of comparisons)? Why not ternary search or interpolation search on a sorted array? When do you prefer ternary or interpolation search over binary search?”&nbsp;</span></p>
 <p dir="ltr"><span>4. Draw a tree representation of binary search (believe me, it helps you a lot to understand much internals of binary search).</span></p>
 <p dir="ltr"><b><strong>Stay tuned, I will cover few more interesting problems using binary search in upcoming articles. I welcome your comments.</strong></b><span> – – – by&nbsp;</span><a href="http://www.linkedin.com/in/ramanawithu" target="_blank" rel="noopener noreferrer nofollow"><b><strong>Venki</strong></b></a><span>. </span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/meta-binary-search-one-sided-binary-search/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/meta-binary-search-one-sided-binary-search/?ref=lbp">Meta Binary Search | One-Sided Binary Search</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the largest three distinct elements in an array</div> --> 
  <h1>Find the largest three distinct elements in an array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array with all distinct elements, find the largest three elements. Expected time complexity is O(n) and extra space is O(1).&nbsp;</span></p>
 <p dir="ltr"><b><strong>Examples :</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <pre><span>Input: arr[] = {10, 4, 3, 50, 23, 90}</span><br><span>Output: 90, 50, 23</span><br><br></pre>
 <p dir="ltr"><b><strong>Method 1:</strong></b></p>
 <p dir="ltr"><b><strong>Algorithm:</strong></b></p>
 <pre><span>1) Initialize the largest three elements as minus infinite.</span><br><span>    first = second = third = -?</span><br><span>2) Iterate through all elements of array.</span><br><span>   a) Let current array element be x.</span><br><span>   b) If (x &gt; first)</span><br><span>      {</span><br><span>          // This order of assignment is important</span><br><span>          third = second</span><br><span>          second = first</span><br><span>          first = x   </span><br><span>       }</span><br><span>   c)  Else if (x &gt; second and x != first)</span><br><span>      {</span><br><span>          third = second</span><br><span>          second = x </span><br><span>      }</span><br><span>   d)  Else if (x &gt; third and x != second)</span><br><span>      {</span><br><span>          third = x  </span><br><span>      }</span><br><span>3) Print first, second and third.</span><br><br></pre>
 <p dir="ltr"><span>Below is the implementation of the above algorithm.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_507021" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to find largest three elements</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// in an array</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">PrintLargest {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to print three largest elements */</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">print3largest(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">arr_size)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i, first, second, third;</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* There should be atleast three elements */</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr_size &lt; </code><code class="value">3</code><code class="plain">) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">" Invalid Input "</code><code class="plain">);</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">third = first = second = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; arr_size; i++) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If current element is greater than</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">first*/</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; first) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">third = second;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">second = first;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">first = arr[i];</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[i] is in between first and</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">second then update second&nbsp; */</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[i] &gt; second) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">third = second;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">second = arr[i];</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[i] &gt; third)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">third = arr[i];</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Three largest elements are "</code> <code class="plain">+ first + </code><code class="string">" "</code> <code class="plain">+ second + </code><code class="string">" "</code> <code class="plain">+ third);</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function*/</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">12</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">34</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">print3largest(arr, n);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="comments">/*This code is contributed by Prakriti Gupta </code>
           </div>
           <div class="line number49 index48 alt2"><code class="comments">and edited by Ayush Singla(@ayusin51)*/</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Three largest elements are 34 13 12

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><b><strong>Method 2:</strong></b></p>
 <p dir="ltr"><span>An efficient way to solve this problem is to use any </span><b><strong>O(nLogn)</strong></b><span> sorting algorithm &amp; simply returning the last 3 largest elements.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_817904" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to find largest</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// three elements in an array</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">find3largest(</code><code class="keyword">int</code><code class="plain">[] arr)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr); </code><code class="comments">// It uses Tuned Quicksort with</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// avg. case Time complexity = O(nLogn)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">check = </code><code class="value">0</code><code class="plain">, count = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= n; i++) {</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(count &lt; </code><code class="value">4</code><code class="plain">) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check != arr[n - i]) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to handle duplicate values</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[n - i] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">check = arr[n - i];</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">GFG obj = </code><code class="keyword">new</code> <code class="plain">GFG();</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">12</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">1</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">54</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">0</code><code class="plain">, -</code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.find3largest(arr);</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="comments">// This code is contributed by Prashant Malik</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>54 45 23 

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n log n)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <p dir="ltr"><b><strong>Method 3:</strong></b><br><span>We can use </span><a href="https://www.geeksforgeeks.org/stdpartial_sort-in-cpp/"><span>Partial Sort</span></a><span> of C++ STL. partial_sort uses Heapselect, which provides better performance than Quickselect for small M. As a side effect, the end state of Heapselect leaves you with a heap, which means that you get the first half of the Heapsort algorithm “for free”. The complexity is “approximately” </span><b><strong>O(N log(M))</strong></b><span>, where M is distance(middle-first).</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_754467" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// java program to find </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// three largest elements </code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// in array.</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] V = { </code><code class="value">11</code><code class="plain">, </code><code class="value">65</code><code class="plain">, </code><code class="value">193</code><code class="plain">, </code><code class="value">36</code><code class="plain">, </code><code class="value">209</code><code class="plain">, </code><code class="value">664</code><code class="plain">, </code><code class="value">32</code> <code class="plain">};</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// sorting the array</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(V);</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// taking the length of array</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = V.length;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"first = "</code> <code class="plain">+ V[x-</code><code class="value">1</code><code class="plain">] );</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"second = "</code> <code class="plain">+ V[x-</code><code class="value">2</code><code class="plain">]);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"third = "</code> <code class="plain">+ V[x-</code><code class="value">3</code><code class="plain">] );</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="comments">// This code is Contributed Machhaliya Muhammad</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>first = 664
second = 209
third = 193

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n log m) where m is distance(middle-first).</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/generating-subarrays-using-recursion/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/generating-subarrays-using-recursion/?ref=lbp">Generating subarrays using recursion</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the Missing Number</div> --> 
  <h1>Find the Missing Number</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Accolite","Amazon","Cisco","Microsoft","Morgan Stanley","Ola Cabs","Payu","Qualcomm","Samsung","Visa"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array </span><b><strong>arr[]</strong></b><span> of size </span><b><strong>N-1 </strong></b><span>with integers in the range of </span><b><strong>[1, N]</strong></b><span>, the task is to find the missing number from the first </span><b><strong>N</strong></b><span> integers.</span></p>
 <p dir="ltr"><b><strong>Note:</strong></b><span> There are no duplicates in the list.</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {1, 2, 4, 6, 3, 7, 8}</span><br><b><strong>Output:</strong></b><span> 5</span><br><b><strong>Explanation:</strong></b><span> Here the size of the array is 7, so the range will be [1, 8]. The missing number between 1 to 8 is 5</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {1, 2, 3, 5}, N = 5</span><br><b><strong>Output:</strong></b><span> 4</span><br><b><strong>Explanation:</strong></b><span> Here the size of the array is 4, so the range will be [1, 5]. The missing number between 1 to 5 is 4</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://practice.geeksforgeeks.org/problems/missing-number-in-array1416/1/">Missing number in array</a>
    </div>
   </div>
   <div class="redirect"><a href="https://practice.geeksforgeeks.org/problems/missing-number-in-array1416/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 1 (Using </strong></b></u><a href="https://www.geeksforgeeks.org/hashing-set-1-introduction/"><u><b><strong class="GFGEditorTheme__textUnderline">Hashing</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">):</strong></b></u><b><strong> </strong></b><span>The idea behind the following approach is</span></p>
 <blockquote>
  <p dir="ltr"><span>The numbers will be in the range</span><b><strong> (1, N)</strong></b><span>, an array of size </span><b><strong>N </strong></b><span>can be maintained to keep record of the elements present in the given array</span></p>
 </blockquote>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <ul>
  <li value="1"><span>Create a temp array </span><b><strong>temp[]</strong></b><span> of size</span><b><strong> n + 1</strong></b><span> with all initial values as 0.</span></li>
  <li value="2"><span>Traverse the input array </span><b><strong>arr[],</strong></b><span> and do following for each </span><b><strong>arr[i]&nbsp;</strong></b>
   <ul>
    <li value="1"><span>if(temp[arr[i]] == 0) temp[arr[i]] = 1&nbsp;</span></li>
   </ul></li>
  <li value="3"><span>Traverse </span><b><strong>temp[]</strong></b><span> and output the array element having value as 0 (This is the missing element).</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_598997" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to implement the approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the missing number</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findMissing(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">N)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp[] = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[N + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt;= N; i++) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[i] = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; N; i++) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[arr[i] - </code><code class="value">1</code><code class="plain">] = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt;= N; i++) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp[i] == </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans = i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ans);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code> <code class="plain">};</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findMissing(arr, n);</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(N)</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 2 (Using summation of first N natural numbers)</strong></b></u><b><strong>:</strong></b><span> The idea behind the approach is to use the summation of the first N numbers.</span></p>
 <blockquote>
  <p dir="ltr"><span>Find the sum of the numbers in the range </span><b><strong>[1, N]</strong></b><span> using the formula </span><b><strong>N * (N+1)/2</strong></b><span>. Now find the sum of all the elements in the array and subtract it from the sum of the first N natural numbers. This will give the value of the missing element.</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps mentioned below to implement the idea:</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <ul>
  <li value="1"><span>Calculate the sum of the first N natural numbers as </span><b><strong>sumtotal= N*(N+1)/2</strong></b><span>.</span></li>
  <li value="2"><span>Traverse the array from start to end.</span>
   <ul>
    <li value="1"><span>Find the sum of all the array elements.</span></li>
   </ul></li>
  <li value="3"><span>Print the missing number as</span><b><strong> SumTotal – sum of array</strong></b></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_405551" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find missing Number</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the missing number</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMissingNo(</code><code class="keyword">int</code><code class="plain">[] nums, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i=</code><code class="value">0</code><code class="plain">;i&lt;n;i++){</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sum = sum + nums[i];</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">((n * (n+</code><code class="value">1</code><code class="plain">))/</code><code class="value">2</code> <code class="plain">- sum);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(getMissingNo(arr, N));</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Modification for Overflow:</strong></b></u><span> The approach remains the same but there can be an overflow if N is large.&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>In order to avoid integer overflow, pick one number from the range [1, N] and subtract a number from the given array (don’t subtract the same number twice). This way there won’t be any integer overflow.</span></p>
 </blockquote>
 <div id="practiceLinkDiv"></div>
 <p dir="ltr"><b><strong>Algorithm:</strong></b><span>&nbsp;</span></p>
 <ul>
  <li value="1"><span>Create a variable </span><b><strong>total = 1</strong></b><span> which will store the total sum of first n elements.</span></li>
  <li value="2"><span>Traverse the array from start to end.</span>
   <ul>
    <li value="1"><span>Update the value of total as total </span><b><strong> += i</strong></b><span> , now decrease value of total by current array element. </span></li>
   </ul></li>
  <li value="3"><span>Print the missing number , which will be present in the </span><b><strong>total </strong></b><span>variable.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Below is the implementation of the above approach:</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_229199" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to get the missing number</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMissingNo(</code><code class="keyword">int</code> <code class="plain">a[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">total = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">2</code><code class="plain">; i &lt; (n + </code><code class="value">1</code><code class="plain">); i++) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">total += i;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">total -= a[i - </code><code class="value">2</code><code class="plain">];</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">total;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(getMissingNo(arr, N));</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="comments">// This code is contributed by Aditya Kumar (adityakumar129)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N).&nbsp; Only one traversal of the array is needed.</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1).&nbsp;No extra space is needed</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 3 (Using binary operations)</strong></b></u><b><strong>:</strong></b><span> This method uses the technique of XOR to solve the problem.&nbsp;&nbsp;</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <blockquote>
  <p dir="ltr"><span>XOR has certain properties&nbsp;</span></p>
  <ul>
   <li value="1"><span>Assume a</span><sub><span>1</span></sub><span> ⊕ a</span><sub><span>2</span></sub><span> ⊕ a</span><sub><span>3</span></sub><span> ⊕ . . . ⊕ a</span><sub><span>n</span></sub><span> = a and a</span><sub><span>1</span></sub><span> ⊕ a</span><sub><span>2</span></sub><span> ⊕ a</span><sub><span>3</span></sub><span> ⊕ . . . ⊕ a</span><sub><span>n-1</span></sub><span> = b</span></li>
   <li value="2"><span>Then a ⊕ b = a</span><sub><span>n</span></sub></li>
  </ul>
 </blockquote>
 <p dir="ltr"><span>Follow the steps mentioned below to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Create two variables </span><b><strong>a = 0</strong></b><span> and </span><b><strong>b = 0</strong></b></li>
  <li value="2"><span>Run a loop from </span><b><strong>i = 1 to N</strong></b><span>:</span>
   <ul>
    <li value="1"><span>For every index, update </span><b><strong>a</strong></b><span> as </span><b><strong>a = a ^ i</strong></b></li>
   </ul></li>
  <li value="3"><span>Now traverse the array from </span><b><strong>i</strong></b><span> = start to end.</span>
   <ul>
    <li value="1"><span>For every index, update </span><b><strong>b</strong></b><span> as </span><b><strong>b = b ^ arr[i]</strong></b><i><em class="GFGEditorTheme__textItalic">.</em></i></li>
   </ul></li>
  <li value="4"><span>The missing number is </span><b><strong>a ^ b</strong></b><span>.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_63225" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find missing Number</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// using xor</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find missing number</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMissingNo(</code><code class="keyword">int</code> <code class="plain">a[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x1 = a[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x2 = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// For xor of all the elements in array</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x1 = x1 ^ a[i];</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// For xor of all the elements from 1 to n+1</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">2</code><code class="plain">; i &lt;= n + </code><code class="value">1</code><code class="plain">; i++)</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x2 = x2 ^ i;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x1 ^ x2);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">miss = getMissingNo(arr, N);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(miss);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)&nbsp;</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)&nbsp;</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 4 (Using</strong></b></u><u><span class="GFGEditorTheme__textUnderline"> </span></u><a href="https://www.geeksforgeeks.org/cycle-sort/"><u><b><strong class="GFGEditorTheme__textUnderline">Cyclic Sort</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">):</strong></b></u><span> The idea behind it is as follows:</span></p>
 <blockquote>
  <p dir="ltr"><span>All the given array numbers are sorted and in the range of 1 to n-1. If the range is 1 to N &nbsp;then the index of every array element will be the same as (value – 1).</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the below steps to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Use </span><b><strong>cyclic sort</strong></b><span> to sort the elements in linear time.</span></li>
  <li value="2"><span>Now traverse from </span><b><strong>i</strong></b><span> = 0 to the end of the array:</span>
   <ul>
    <li value="1"><span>If </span><b><strong>arr[i]</strong></b><span> is not the same as </span><b><strong>i+1</strong></b><span> then the missing element is (</span><b><strong>i+1</strong></b><span>).</span></li>
   </ul></li>
  <li value="3"><span>If all elements are present then </span><b><strong>N</strong></b><span> is the missing element in the range </span><b><strong>[1, N]</strong></b><span>.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_939159" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// java program to check missingNo</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">MissingNumber {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code> <code class="plain">};</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = getMissingNo(arr, N);</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ans);</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the missing number</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMissingNo(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; n) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as array is of 1 based indexing so the</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// correct position or index number of each</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element is element-1 i.e. 1 will be at 0th</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// index similarly 2 correct index will 1 so</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// on...</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">correctpos = arr[i] - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &lt; n &amp;&amp; arr[i] != arr[correctpos]) {</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if array element should be lesser than</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// size and array element should not be at</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// its correct position then only swap with</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// its correct position or index value</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, correctpos);</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if element is at its correct position</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// just increment i and check for remaining</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array elements</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// check for missing element by comparing elements</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with their index values</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">index = </code><code class="value">0</code><code class="plain">; index &lt; arr.length; index++) {</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[index] != index + </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">index + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr.length;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">swap(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">i, </code><code class="keyword">int</code> <code class="plain">correctpos)</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// swap elements with their correct indexes</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i];</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[correctpos];</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[correctpos] = temp;</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="comments">// this code is contributed by devendra solunke</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-2"></div>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N), requires (N-1) comparisons</span><br><b><strong>Auxiliary Complexity: </strong></b><span>O(1)&nbsp;</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 5 (Use elements as Index and mark the visited places as negative): </strong></b></u><span>Use the below idea to get the approach</span></p>
 <blockquote>
  <p dir="ltr"><span>Traverse the array. While traversing, use the absolute value of every element as an index and make the value at this index as negative to mark it visited. To find missing, traverse the array again and look for a positive value.</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Traverse the given array</span>
   <ul>
    <li value="1"><span>If the absolute value of current element is greater than </span><b><strong>size</strong></b><span> of the array, then continue.</span></li>
    <li value="2"><span>else multiply the (absolute value of (current element) – 1)th index with -1.</span></li>
   </ul></li>
  <li value="2"><span>Initialize a variable </span><b><strong>ans = size + 1.</strong></b></li>
  <li value="3"><span>Traverse the array and follow the steps:</span>
   <ul>
    <li value="1"><span>if the value is positive assign </span><b><strong>ans = index + 1</strong></b></li>
   </ul></li>
  <li value="4"><span>Print </span><b><strong>ans</strong></b><span> as the missing value.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_744823" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to implement the approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Function to find the missing number</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findMissing(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">size)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(arr[i]) - </code><code class="value">1</code> <code class="plain">== size) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ind = Math.abs(arr[i]) - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[ind] *= -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = size + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans = i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ans);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code> <code class="plain">};</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findMissing(arr, n);</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="comments">// This code is contributed by aarohirai2616.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>4


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)&nbsp;</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/collections-binarysearch-java-examples/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/collections-binarysearch-java-examples/?ref=lbp">Collections.binarySearch() in Java with Examples</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the first repeating element in an array of integers</div> --> 
  <h1>Find the first repeating element in an array of integers</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","Oracle"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Hash","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array of integers </span><b><strong>arr[]</strong></b><span>, The task is to find the index of first repeating element in it i.e. the element that occurs more than once and whose index of the first occurrence is the smallest.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input: </strong></b><span>arr[] = {10, 5, 3, 4, 3, 5, 6}</span><br><b><strong>Output:</strong></b><span> 5&nbsp;</span><br><b><strong>Explanation: </strong></b><span>5 is the first element that repeats</span></p>
  <p dir="ltr"><b><strong>Input: </strong></b><span>arr[] = {6, 10, 5, 4, 9, 120, 4, 6, 10}</span><br><b><strong>Output: </strong></b><span>6&nbsp;</span><br><b><strong>Explanation: </strong></b><span>6 is the first element that repeats</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/first-repeating-element4018/1/">First Repeating Element</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/first-repeating-element4018/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Naive Approach: </strong></b><span>Below is the idea to solve the problem</span></p>
 <blockquote>
  <p dir="ltr"><span>Run two nested loops, the outer loop picks an element one by one, and the inner loop checks whether the element is repeated or not. Once a repeating element is found, break the loops and print the element.</span></p>
 </blockquote>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_576853" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for the approach</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the index of first repeating element in an array</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">firstRepeatingElement(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Nested loop to check for repeating elements</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = i + </code><code class="value">1</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If a repeating element is found, return its index</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == arr[j]) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If no repeating element is found, return -1</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing an array and its size</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Finding the index of first repeating element</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = firstRepeatingElement(arr, n);</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking if any repeating element is found or not</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"No repeating element found!"</code><code class="plain">);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing the first repeating element and its index</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"First repeating element is "</code> <code class="plain">+ arr[index]);</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <pre>First repeating element is 5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(N</span><sup><span>2</span></sup><span>)</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <h2><span>Find the first repeating element in an array of integers using sorting:</span></h2>
 <p dir="ltr"><span>Below is the idea to solve the problem.</span></p>
 <blockquote>
  <p dir="ltr"><span>Store the elements of </span><b><strong>arr[] </strong></b><span>in a duplicate array </span><b><strong>temp[]</strong></b><span>, sort temp[] and traverse arr[] from </span><b><strong>0 </strong></b><span>to </span><b><strong>N – 1</strong></b><span>, Simultaneously check the count of this element in </span><b><strong>temp[] </strong></b><span>and if the current element </span><b><strong>arr[i] </strong></b><span>has more than one occurrence then return </span><b><strong>arr[i]</strong></b><span>.</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps below to Implement the idea:&nbsp;</span></p>
 <ul>
  <li value="1"><span>Copy the given array to an auxiliary array </span><b><strong>temp[] </strong></b><span>and sort temp array.&nbsp;</span></li>
  <li value="2"><span>Traverse the input array arr[] from </span><b><strong>0 </strong></b><span>to </span><b><strong>N – 1</strong></b><span>.&nbsp;</span>
   <ul>
    <li value="1"><span>For every element, </span><a href="https://www.geeksforgeeks.org/count-number-of-occurrences-in-a-sorted-array/"><span>count its occurrences in temp[] using binary search</span></a><span>.</span></li>
    <li value="2"><span>If the count of occurrence of current element is more than one, then return the current element.</span></li>
   </ul></li>
  <li value="3"><span>If no repeating element is found print “No Repeating Number Found”.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Time complexity:</strong></b><span> O(NlogN).</span><br><b><strong>Auxiliary Space: </strong></b><span>O(N)</span></p>
 <h2><span>Find the first repeating element in an array of integers using</span><b><strong> </strong></b><a href="http://www.geeksforgeeks.org/hashset-in-java/"><span>Hashset</span></a></h2>
 <p dir="ltr"><span>Below is the idea to solve the problem</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <blockquote>
  <p dir="ltr"><span>The idea is to traverse the given array arr[] from </span><b><strong>right to left</strong></b><span> and update the minimum index whenever, an already visited element has been found. To check if the element was already visited </span><a href="http://www.geeksforgeeks.org/hashset-in-java/"><span>Hashset </span></a><span>can be used.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps below to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Initialize an empty </span><a href="http://www.geeksforgeeks.org/hashset-in-java/"><span>Hashset&nbsp;</span></a><b><strong>myset </strong></b><span>and a variable </span><b><strong>min </strong></b><span>with </span><b><strong>-1</strong></b><span>. &nbsp;</span></li>
  <li value="2"><span>Run a for loop for each index of array </span><b><strong>arr[] </strong></b><span>from </span><b><strong>N – 1 </strong></b><span>to </span><b><strong>0</strong></b><span>.</span>
   <ul>
    <li value="1"><span>If the current element is present in </span><b><strong>myset </strong></b><span>then update min with </span><b><strong>i</strong></b><span>.</span></li>
    <li value="2"><span>Else insert arr[i] in myset.&nbsp;</span></li>
   </ul></li>
  <li value="3"><span>Return </span><b><strong>min</strong></b><span>.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_207490" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/* Java program to find first repeating element in arr[] */</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function prints the first repeating element in</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// arr[]</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printFirstRepeating(</code><code class="keyword">int</code> <code class="plain">arr[])</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize index of first repeating element</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creates an empty hashset</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HashSet&lt;Integer&gt; set = </code><code class="keyword">new</code> <code class="plain">HashSet&lt;&gt;();</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse the input array from right to left</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = arr.length - </code><code class="value">1</code><code class="plain">; i &gt;= </code><code class="value">0</code><code class="plain">; i--) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is already in hash set, update min</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(set.contains(arr[i]))</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min = i;</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="comments">// Else add element to hash set</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">set.add(arr[i]);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(min != -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"The first repeating element is "</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[min]);</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"There are no repeating elements"</code><code class="plain">);</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver method to test above method</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">throws</code> <code class="plain">java.lang.Exception</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">10</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printFirstRepeating(arr);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The first repeating element is 5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity</strong></b><span>: O(n).</span><br><b><strong>Auxiliary Space: </strong></b><span>O(n).</span></p>
 <p dir="ltr"><span>Thanks to Mohammad Shahid for suggesting this solution.</span></p>
 <h2><span>Find the first repeating element in an array of integers using</span><b><strong> </strong></b><a href="https://www.geeksforgeeks.org/what-is-hashing/"><b><strong>Hashing</strong></b></a><span>&nbsp;</span></h2>
 <blockquote>
  <p dir="ltr"><span>The idea is to use </span><b><strong>Hash array</strong></b><span> to store the occurrence of elements. Then traverse the array from </span><b><strong>left to right</strong></b><span> and return the first element with occurrence more than </span><b><strong>1.</strong></b></p>
 </blockquote>
 <p dir="ltr"><span>Follow the below steps to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Initialize variables </span><b><strong>k</strong></b><span> with </span><b><strong>0, max </strong></b><span>with </span><b><strong>-1 </strong></b><span>and </span><b><strong>min </strong></b><span>with max + 1 and iterate over all values of </span><b><strong>arr[] </strong></b><span>to store the largest value in </span><b><strong>max</strong></b><span>.</span></li>
  <li value="2"><span>Initialize a Hash arrays </span><b><strong>a[] </strong></b><span>and </span><b><strong>b[] </strong></b><span>of size max + 1.</span></li>
  <li value="3"><span>Run a for loop from </span><b><strong>0 </strong></b><span>to </span><b><strong>N – 1</strong></b>
   <ul>
    <li value="1"><span>If a[arr[i]] is </span><b><strong>0 </strong></b><span>put </span><b><strong>i+1 </strong></b><span>in place of a[arr[i]].</span></li>
    <li value="2"><span>Else assign </span><b><strong>1 </strong></b><span>to b[arrr[i]] and </span><b><strong>k</strong></b><span>.</span></li>
   </ul></li>
  <li value="4"><span>If </span><b><strong>k </strong></b><span>is </span><b><strong>0</strong></b><span> print “No repeating element found”.</span></li>
  <li value="5"><span>Else iterate from </span><b><strong>0 </strong></b><span>to </span><b><strong>max&nbsp;</strong></b>
   <ul>
    <li value="1"><span>If a[i] is not zero and b[i] is not zero and </span><b><strong>min </strong></b><span>is greater than a[i] then update min a[i].</span></li>
   </ul></li>
  <li value="6"><span>Print </span><b><strong>min</strong></b><span>.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of above approach&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_803373" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/* Java program to find first</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">repeating element in arr[] */</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function prints the</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first repeating element in arr[]</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printFirstRepeating(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This will set k=1, if any</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// repeating element found</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// max = maximum from (all elements &amp; n)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = n;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(max &lt; arr[i])</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = arr[i];</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Array a is for storing</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1st time occurrence of element</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// initialized by 0</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] a = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[max + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Store 1 in array b</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if element is duplicate</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// initialized by 0</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] b = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[max + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Duplicate element found</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a[arr[i]] != </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b[arr[i]] = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// storing 1st occurrence of arr[i]</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a[arr[i]] = i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(k == </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"No repeating element found"</code><code class="plain">);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min = max + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// trace array a &amp; find repeating element</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with min index</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; max + </code><code class="value">1</code><code class="plain">; i++)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a[i] != </code><code class="value">0</code> <code class="plain">&amp;&amp; min &gt; a[i] &amp;&amp; b[i] != </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min = a[i];</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[min - </code><code class="value">1</code><code class="plain">]);</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println();</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number62 index61 alt1">
             &nbsp; 
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printFirstRepeating(arr, N);</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number66 index65 alt1"><code class="plain">}</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="comments">// This code is contributed by divyesh072019</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
  <pre>5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N).</span><br><b><strong>Auxiliary Space:</strong></b><span> O(N).</span></p>
 <h4><b><strong>Another approach using single hash array</strong></b></h4>
 <p dir="ltr"><span>Follow the below steps to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Initialize a variable max to -1 to keep track of the maximum value in the array.</span></li>
  <li value="2"><span>Iterate over all values of arr[] to store the largest value in max.</span></li>
  <li value="3"><span>Declare an integer array hash of size max+1 and initialize all its elements to 0. This array will be used as a hash table to store the count of occurrences of each element in the input array.</span></li>
  <li value="4"><span>Traverse the input array again from index 0 to n-1, and increment the count of the corresponding element in the hash table.</span></li>
  <li value="5"><span>Traverse the input array again from index 0 to n-1, and for each element in the input array, check if the count of the corresponding element in the hash table is greater than 1. If it is, return the index of that element in the input array (i.e., i+1, since the function is expected to return a 1-based index). If no repeated element is found, the function returns -1.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of above approach&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_85404" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">firstRepeating(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Finding max</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(max &lt; arr[i]) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = arr[i];</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating array</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] hash = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[max + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Mapping/counting</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">hash[arr[i]]++;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for repeating element</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">repeating = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(hash[arr[i]] &gt; </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">repeating = arr[i];</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(repeating == Integer.MIN_VALUE) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"There are no repeating elements"</code><code class="plain">);</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The first repeating element is : "</code> <code class="plain">+ repeating);</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) {</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">firstRepeating(arr, N);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The first repeating element is : 5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity</strong></b><span>: O(N).</span><br><b><strong>Auxiliary Space</strong></b><span>: O(N).</span></p>
 <p dir="ltr"><span>The first for loop that finds the maximum element in the array has a time complexity of O(n). The second for loop that creates a hash array has a time complexity of O(n). The third for loop that checks for the first repeating element also has a time complexity of O(n). The array named ‘hash’ is created with max+1 elements so space O(max+1).</span></p>
 <p dir="ltr"><span>Since all three loops run sequentially, the total time complexity of the code is O(n).</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-the-missing-number/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-the-missing-number/?ref=lbp">Find the Missing Number</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the missing and repeating number</div> --> 
  <h1>Find the missing and repeating number</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","MAQ Software","Samsung"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an unsorted array of size n. Array elements are in the range of 1 to n. One number from set {1, 2, …n} is missing and one number occurs twice in the array. Find these two numbers.</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {3, 1, 3}</span><br><b><strong>Output:</strong></b><span> Missing = 2, Repeating = 3</span><br><b><strong>Explanation:</strong></b><span> In the array, 2 is missing and 3 occurs twice&nbsp;</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {4, 3, 6, 2, 1, 1}</span><br><b><strong>Output:</strong></b><span> Missing = 5, Repeating = 1</span></p>
 </blockquote>
 <div id="practiceLinkDiv"><a href="https://www.geeksforgeeks.org/problems/find-missing-and-repeating2512/1/">Recommended Practice Find Missing And RepeatingTry It!&nbsp;</a>
 </div>
 <p dir="ltr"><b><strong>Below are various methods to solve the problems:</strong></b><span>&nbsp;</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 1 (Use count array)</strong></b></u><br><b><strong>Approach:</strong></b><span>&nbsp;</span></p>
 <ul>
  <li value="1"><span>Create a temp array temp[] of size n with all initial values as 0.</span></li>
  <li value="2"><span>Traverse the input array arr[], and do the following for each arr[i]&nbsp;</span>
   <ul>
    <li value="1"><span>if(temp[arr[i]-1] == 0), set temp[arr[i]-1] = 1;</span></li>
    <li value="2"><span>if(temp[arr[i]-1] == 1) output “arr[i]” //repeating number</span></li>
   </ul></li>
  <li value="3"><span>Traverse temp[] and output ‘i+1’ corresponding to the element of array temp[] having value as 0. (This is the missing number)</span></li>
 </ul>
 <blockquote>
  <p dir="ltr"><span>Note that, we use ‘arr[i]-1’ as the corresponding element to the ‘arr[i]’ in temp[] array, as indexing in an array starts from 0 to n-1 and the input array arr[] has numbers from 1 to n.</span></p>
 </blockquote>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_569920" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printTwoElements(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] temp</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[n]; </code><code class="comments">// Creating temp array of size n</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with initial values as 0.</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">repeatingNumber = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">missingNumber = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[arr[i] - </code><code class="value">1</code><code class="plain">]++;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp[arr[i] - </code><code class="value">1</code><code class="plain">] &gt; </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">repeatingNumber = arr[i];</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp[i] == </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">missingNumber = i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The repeating number is "</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ repeatingNumber + </code><code class="string">"."</code><code class="plain">);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The missing number is "</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ missingNumber + </code><code class="string">"."</code><code class="plain">);</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">7</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code> <code class="plain">};</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printTwoElements(arr, n);</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="comments">// This code is contributed by vivek1208</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The repeating number is 5.
The missing number is 1.


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(n)</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 2 (Use elements as Index and mark the visited places)</strong></b></u><br><b><strong>Approach:</strong></b><span>&nbsp;</span><br><span>Traverse the array. While traversing, use the absolute value of every element as an index and make the value at this index negative to mark it visited. If something is already marked negative then this is the repeating element. To find the missing, traverse the array again and look for a positive value.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_802098" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to Find the repeating</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// and missing elements</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printTwoElements(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">size)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"The repeating element is "</code><code class="plain">);</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">abs_val = Math.abs(arr[i]);</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[abs_val - </code><code class="value">1</code><code class="plain">] &gt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[abs_val - </code><code class="value">1</code><code class="plain">] = -arr[abs_val - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(abs_val);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"and the missing element is "</code><code class="plain">);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i + </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">7</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code> <code class="plain">};</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printTwoElements(arr, n);</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="comments">// This code is contributed by Gitanjali</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The repeating element is 5
and the missing element is 1

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary Space</strong></b><span>: O(1) as it is using constant variables</span><br><span>Thanks to </span><b><strong>Manish Mishra</strong></b><span> for suggesting this method.&nbsp;</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 3 (Make two equations)</strong></b></u><br><b><strong>Approach:</strong></b></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <ul>
  <li value="1"><span>Let x be the missing and y be the repeating element.</span></li>
  <li value="2"><span>Get the sum of all numbers using formula </span><b><strong>S = n(n+1)/2 – x + y</strong></b></li>
  <li value="3"><span>Get product of all numbers using formula </span><b><strong>P = 1*2*3*…*n * y / x</strong></b></li>
  <li value="4"><span>The above two steps give us two equations, we can solve the equations and get the values of x and y.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><span>Thanks to </span><b><strong>disappearedng</strong></b><span> for suggesting this solution.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Note:</strong></b><span> This method can cause arithmetic overflow as we calculate the product and sum of all array elements.</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 4 (Use XOR)</strong></b></u></p>
 <p dir="ltr"><b><strong>Approach:</strong></b></p>
 <ul>
  <li value="1"><span>Let x and y be the desired output elements.</span></li>
  <li value="2"><span>Calculate the XOR of all the array elements.</span></li>
 </ul>
 <blockquote>
  <p dir="ltr"><b><strong>xor1 = arr[0]^arr[1]^arr[2]…..arr[n-1]</strong></b></p>
 </blockquote>
 <ul>
  <li value="1"><span>XOR the result with all numbers from 1 to n</span></li>
 </ul>
 <blockquote>
  <p dir="ltr"><b><strong>xor1 = xor1^1^2^…..^n</strong></b></p>
 </blockquote>
 <ul>
  <li value="1"><span>In the result </span><i><em class="GFGEditorTheme__textItalic">xor1</em></i><span>, all elements would nullify each other except x and y. All the bits that are set in </span><i><em class="GFGEditorTheme__textItalic">xor1</em></i><span> will be set in either x or y. So if we take any set bit (We have chosen the rightmost set bit in code) of </span><i><em class="GFGEditorTheme__textItalic">xor1 </em></i><span>and divide the elements of the array in two sets – one set of elements with the same bit set and another set with the same bit not set. By doing so, we will get x in one set and y in another set. Now if we do XOR of all the elements in the first set, we will get x, and by doing the same in the other set we will get y.&nbsp;</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_419017" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to Find the repeating</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// and missing elements</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">x, y;</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">getTwoElements(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Will hold xor of all elements</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">and numbers from 1 to n&nbsp; */</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">xor1;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Will have only single set bit of xor1 */</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">set_bit_no;</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">xor1 = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Get the xor of all array elements&nbsp; */</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">xor1 = xor1 ^ arr[i];</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* XOR the previous result with numbers from </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">1 to n*/</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">1</code><code class="plain">; i &lt;= n; i++)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">xor1 = xor1 ^ i;</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Get the rightmost set bit in set_bit_no */</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">set_bit_no = xor1 &amp; ~(xor1 - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Now divide elements into two sets by comparing</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">rightmost set bit of xor1 with the bit at the same </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">position in each element. Also, get XORs of two</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">sets. The two XORs are the output elements. The </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">following two for loops serve the purpose */</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((arr[i] &amp; set_bit_no) != </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* arr[i] belongs to first set */</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x = x ^ arr[i];</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* arr[i] belongs to second set*/</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y = y ^ arr[i];</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">1</code><code class="plain">; i &lt;= n; i++) {</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((i &amp; set_bit_no) != </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* i belongs to first set */</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x = x ^ i;</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* i belongs to second set*/</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y = y ^ i;</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2">
             &nbsp; 
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* *x and *y hold the desired output elements */</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code> <code class="plain">};</code>
           </div>
           <div class="line number66 index65 alt1">
             &nbsp; 
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">getTwoElements(arr, n);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" The missing element is&nbsp; "</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ x + </code><code class="string">"and the "</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"repeating number is "</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ y);</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number74 index73 alt1"><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2">
             &nbsp; 
           </div>
           <div class="line number76 index75 alt1"><code class="comments">// This code is contributed by Gitanjali.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre> The missing element is 7 and the repeating number is 5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary Space</strong></b><span>: O(1) as it is using constant space if the input array is excluded</span><br><span>This method doesn’t cause overflow, but it doesn’t tell which one occurs twice and which one is missing. We can add one more step that checks which one is missing and which one is repeating. This can be easily done in O(n) time.</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 5 (Use a Map)</strong></b></u><br><b><strong>Approach:</strong></b><span>&nbsp;</span><br><span>This method involves creating a Hashtable with the help of Map. In this, the elements are mapped to their natural index. In this process, if an element is mapped twice, then it is the repeating element. And if an element’s mapping is not there, then it is the missing element.</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <p dir="ltr"><span>Below is the implementation of the above approach:&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_833401" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find the</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// repeating and missing elements</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// using Maps</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test1 {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Map&lt;Integer, Boolean&gt; numberMap</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">HashMap&lt;&gt;();</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = arr.length;</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(Integer i : arr) {</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(numberMap.get(i) == </code><code class="keyword">null</code><code class="plain">) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">numberMap.put(i, </code><code class="keyword">true</code><code class="plain">);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Repeating = "</code> <code class="plain">+ i);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= max; i++) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(numberMap.get(i) == </code><code class="keyword">null</code><code class="plain">) {</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Missing = "</code> <code class="plain">+ i);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Repeating = 1
Missing = 5

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(N)</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Method 6 (Make two equations using sum and sum of squares)</strong></b></u><br><b><strong>Approach:</strong></b></p>
 <ul>
  <li value="1"><span>Let x be the missing and y be the repeating element.</span></li>
  <li value="2"><span>Let N is the size of the array.</span></li>
  <li value="3"><span>Get the sum of all numbers using the formula </span><b><strong>S = N(N+1)/2</strong></b></li>
  <li value="4"><span>Get the sum of square of all numbers using formula </span><b><strong>Sum_Sq = N(N+1)(2N+1)/6</strong></b></li>
  <li value="5"><span>Iterate through a loop from i=1….N</span></li>
  <li value="6"><b><strong>S -= A[i]</strong></b></li>
  <li value="7"><b><strong>Sum_Sq -= (A[i]*A[i])</strong></b></li>
  <li value="8"><span>It will give two equations&nbsp;</span><br><span>x-y = S – (1)&nbsp;</span><br><span>x^2 – y^2 = Sum_sq&nbsp;</span><br><span>x+ y = (Sum_sq/S) – (2)&nbsp;</span></li>
 </ul>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_189167" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.math.BigInteger;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">GFG </code>
           </div>
           <div class="line number4 index3 alt1"><code class="plain">{</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">Vector&lt;Integer&gt; repeatedNumber(</code><code class="keyword">int</code><code class="plain">[] a) </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger n=BigInteger.valueOf(a.length);</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger s=BigInteger.valueOf(</code><code class="value">0</code><code class="plain">);</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger ss=BigInteger.valueOf(</code><code class="value">0</code><code class="plain">);</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">x : a)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s=&nbsp; s.add(BigInteger.valueOf(x));</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ss= ss.add(BigInteger.valueOf(x).multiply(BigInteger.valueOf(x))); </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger as= n.multiply(n.add(BigInteger.valueOf(</code><code class="value">1</code><code class="plain">))).divide(BigInteger.valueOf(</code><code class="value">2</code><code class="plain">));</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger ass= as.multiply(BigInteger.valueOf(</code><code class="value">2</code><code class="plain">).multiply(n).add(BigInteger.valueOf(</code><code class="value">1</code><code class="plain">))).divide(BigInteger.valueOf(</code><code class="value">3</code><code class="plain">));</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger sub=as.subtract(s);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">BigInteger add=(ass.subtract(ss)).divide(sub);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//(ass-ss)/sub;</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">b = sub.add(add).divide(BigInteger.valueOf(</code><code class="value">2</code><code class="plain">)).intValue();</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//(sub+add)/2;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">A = BigInteger.valueOf(b).subtract(sub).intValue();</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; ans = </code><code class="keyword">new</code> <code class="plain">Vector&lt;&gt;();</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans.add(A);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans.add(b);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] v = { </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code> <code class="plain">};</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; res = repeatedNumber(v);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">x : res) </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(x + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="comments">// This code is contributed by Rajput-Ji</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>6  5  


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)&nbsp;</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-first-repeating-element-array-integers/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-first-repeating-element-array-integers/?ref=lbp">Find the first repeating element in an array of integers</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Search, Insert, and Delete in an Sorted Array | Array Operations</div> --> 
  <h1>Search, Insert, and Delete in an Sorted Array | Array Operations</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <h2><strong>How to Search in a Sorted Array?</strong></h2>
 <p>In a sorted array, the search operation can be performed by using <a href="https://www.geeksforgeeks.org/binary-search/">binary search</a>.</p>
 <p style="text-align:center;"><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Search-Operation-In-Sorted-Array.png" alt="Search Operation  in a sorted array"></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_110175" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to implement binary </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// search in a sorted array </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to implement </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// binary search </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key) </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &lt; low) </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*low + (high - low)/2;*/</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">; </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key == arr[mid]) </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid; </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &gt; arr[mid]) </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, (mid + </code><code class="value">1</code><code class="plain">), high, key); </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, low, (mid - </code><code class="value">1</code><code class="plain">), key); </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver Code*/</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">}; </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n, key; </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">n = arr.length - </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">key = </code><code class="value">10</code><code class="plain">; </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index: "</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ binarySearch(arr, </code><code class="value">0</code><code class="plain">, n, key)); </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number34 index33 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index: 5</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(log(n)) Using Binary Search<br><strong>Auxiliary Space:</strong> O(log(n)) due to recursive calls, otherwise iterative version uses Auxiliary Space of O(1).</p>
 <h2><strong>How to Insert in a Sorted Array?</strong></h2>
 <p>In a sorted array, a search operation is performed for the possible position of the given element by using<a href="https://www.geeksforgeeks.org/binary-search/"> Binary search,</a> and then an insert operation is performed followed by shifting the elements. And in an unsorted array, the insert operation is faster as compared to the sorted array because we don’t have to care about the position at which the element is placed.</p>
 <p style="text-align:center;"><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Insert-Operation-in-Sorted-Array.png" alt="Insert Operation in sorted array"></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_486134" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to insert an </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// element in a sorted array </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Inserts a key in arr[] of given </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// capacity.&nbsp; n is current size of arr[]. </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function returns n+1 if insertion </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is successful, else n. </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">insertSorted(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">key, </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">capacity) </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Cannot insert more elements if n is already </code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// more than or equal to capacity </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n &gt;= capacity) </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n; </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = n - </code><code class="value">1</code><code class="plain">; (i &gt;= </code><code class="value">0</code> <code class="plain">&amp;&amp; arr[i] &gt; key); i--) </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i + </code><code class="value">1</code><code class="plain">] = arr[i]; </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i + </code><code class="value">1</code><code class="plain">] = key; </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(n + </code><code class="value">1</code><code class="plain">); </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver code */</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[</code><code class="value">20</code><code class="plain">]; </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">0</code><code class="plain">] = </code><code class="value">12</code><code class="plain">; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">1</code><code class="plain">] = </code><code class="value">16</code><code class="plain">; </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">2</code><code class="plain">] = </code><code class="value">20</code><code class="plain">; </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">3</code><code class="plain">] = </code><code class="value">40</code><code class="plain">; </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">4</code><code class="plain">] = </code><code class="value">50</code><code class="plain">; </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[</code><code class="value">5</code><code class="plain">] = </code><code class="value">70</code><code class="plain">; </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">capacity = arr.length; </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">6</code><code class="plain">; </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">26</code><code class="plain">; </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"\nBefore Insertion: "</code><code class="plain">); </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">); </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">n = insertSorted(arr, n, key, capacity); </code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"\nAfter Insertion: "</code><code class="plain">); </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) </code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">); </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Before Insertion: 12 16 20 40 50 70 
After Insertion: 12 16 20 26 40 50 70 </pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N) [In the worst case all elements may have to be moved]&nbsp;<br><strong>Auxiliary Space:</strong> O(1)</p>
 <h2><strong>How to Delete in a Sorted Array?</strong></h2>
 <p>In the delete operation, the element to be deleted is searched using binary search, and then the delete operation is performed followed by shifting the elements.</p>
 <div style="width: 810px" class="wp-caption alignnone">
  <img src="https://media.geeksforgeeks.org/wp-content/uploads/20220722211151/DeletedOperationinSortedArray.png" alt="Deleting 3 from the array" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20220722211151/DeletedOperationinSortedArray-660x360.png  660w, https://media.geeksforgeeks.org/wp-content/uploads/20220722211151/DeletedOperationinSortedArray-768x419.png  768w, https://media.geeksforgeeks.org/wp-content/uploads/20220722211151/DeletedOperationinSortedArray.png, " sizes="100vw" width="1000">
  <p class="wp-caption-text">Performing delete operation</p>
 </div>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_187806" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to delete an </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// element from a sorted array </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Binary search </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key) </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &lt; low) </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">; </code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key == arr[mid]) </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid; </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &gt; arr[mid]) </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, (mid + </code><code class="value">1</code><code class="plain">), high, key); </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, low, (mid - </code><code class="value">1</code><code class="plain">), key); </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to delete an element */</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">deleteElement(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">key) </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find position of element to be deleted </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, key); </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos == -</code><code class="value">1</code><code class="plain">) { </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found"</code><code class="plain">); </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n; </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Deleting element </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = pos; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[i + </code><code class="value">1</code><code class="plain">]; </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n - </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver Code */</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">50</code> <code class="plain">}; </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">30</code><code class="plain">; </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Array before deletion:\n"</code><code class="plain">); </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) </code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">); </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call </code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">n = deleteElement(arr, n, key); </code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"\n\nArray after deletion:\n"</code><code class="plain">); </code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) </code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">); </code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number60 index59 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Array before deletion
10 20 30 40 50 

Array after deletion
10 20 40 50 </pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N). In the worst case all elements may have to be moved<br><strong>Auxiliary Space:</strong> O(log N). An implicit stack will be used<br>&nbsp;</p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/search-insert-and-delete-in-an-unsorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/search-insert-and-delete-in-an-unsorted-array/?ref=lbp">Search, Insert, and Delete in an Unsorted Array | Array Operations</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Count 1&#8217;s in a sorted binary array</div> --> 
  <h1>Count 1’s in a sorted binary array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given a binary array </span><b><strong>arr[] </strong></b><span>of size </span><b><strong>N,</strong></b><span> which is sorted in </span><b><strong>non-increasing order</strong></b><span>, count the number of </span><b><strong>1’s</strong></b><span> in it.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Examples:&nbsp;</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {1, 1, 0, 0, 0, 0, 0}</span><br><b><strong>Output:</strong></b><span> 2</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {1, 1, 1, 1, 1, 1, 1}</span><br><b><strong>Output:</strong></b><span> 7</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {0, 0, 0, 0, 0, 0, 0}</span><br><b><strong>Output:</strong></b><span> 0</span></p>
 </blockquote>
 <p dir="ltr"><b><strong>Naive approach:</strong></b></p>
 <p dir="ltr"><span>A simple solution is to linearly traverse the array until we find the 1’s in the array and keep count of 1s. If the array element becomes 0 then return the count of 1’s.</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N).</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <h2><span>Count 1’s in a sorted binary array using Binary search recursively:&nbsp;</span></h2>
 <blockquote>
  <p dir="ltr"><span>We can use </span><a href="https://www.geeksforgeeks.org/binary-search/"><span>Binary Search </span></a><span>to find count in O(Logn) time. The idea is to look for the last occurrence of 1 using Binary Search. Once we find the index’s last occurrence, we return index + 1 as count.</span></p>
 </blockquote>
 <p dir="ltr"><b><strong>Follow the steps below to implement the above idea:</strong></b></p>
 <ul>
  <li value="1"><span>Do while low &lt;= high:</span>
   <ul>
    <li value="1"><span>Calculate mid using low + (high – low) / 2.</span></li>
    <li value="2"><span>Check if the element at mid index is the last 1</span></li>
    <li value="3"><span>If the element is not last 1, move the low to right side recursively and return the result received from it.</span></li>
    <li value="4"><span>Otherwise, move the low to left recursively and return the result received from it.</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>The following is the implementation of the above idea.&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_770308" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to count 1's in a sorted array</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">CountOnes {</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Returns counts of 1's in arr[low..high].&nbsp; The</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">array is assumed to be sorted in non-increasing</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">order */</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">countOnes(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &gt;= low) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// get the middle index</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + (high - low) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// check if the element at middle index is last</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((mid == high || arr[mid + </code><code class="value">1</code><code class="plain">] == </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; (arr[mid] == </code><code class="value">1</code><code class="plain">))</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is not last 1, recur for right</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// side</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">countOnes(arr, (mid + </code><code class="value">1</code><code class="plain">), high);</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// else recur for left side</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">countOnes(arr, low, (mid - </code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver code */</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">CountOnes ob = </code><code class="keyword">new</code> <code class="plain">CountOnes();</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Count of 1's in given array is "</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ ob.countOnes(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="comments">/* This code is contributed by Rajat Mishra */</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Count of 1's in given array is 4
</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity:</strong></b><span> O(Log(N))</span><br><b><strong>Auxiliary Space:</strong></b><span> O(log(N))</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <h2><span>Count 1’s in a sorted binary array using binary search iteratively:</span></h2>
 <p dir="ltr"><span>Follow the steps below for the implementation:</span></p>
 <ul>
  <li value="1"><span>Do while low &lt;= high</span>
   <ul>
    <li value="1"><span>Calculate the middle index say </span><b><strong>mid</strong></b></li>
    <li value="2"><span>Check if arr[mid] is less than 1 then move the high to left side (i.e, high = mid – 1)</span></li>
    <li value="3"><span>If the element is not last 1 then move the low to the right side (i.e, low = mid + 1)</span></li>
    <li value="4"><span>Check if the element at the middle index is last 1 then return mid + 1</span></li>
    <li value="5"><span>Otherwise move to low to right (i.e, low = mid + 1)</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_415101" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">countOnes(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">low = </code><code class="value">0</code><code class="plain">, high = n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) { </code><code class="comments">// get the middle index</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// else recur for left side</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &lt; </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is not last 1, recur for right</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// side</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[mid] &gt; </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// check if the element at middle index is last</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid == n - </code><code class="value">1</code> <code class="plain">|| arr[mid + </code><code class="value">1</code><code class="plain">] != </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Count of 1's in given array is "</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ countOnes(arr, n));</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="comments">// This code is contributed by patel2127.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Count of 1's in given array is 4
</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: </strong></b><span>O(Log(N))</span><br><b><strong>Auxiliary Space: </strong></b><span>O(log(N))</span></p>
 <h2><span>Count 1’s in a sorted binary array using inbuilt functions:</span></h2>
 <p dir="ltr"><span>Below is the implementation using inbuilt functions:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_57327" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">size = arr.length;</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Counting the number of 1's in the array</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">long</code> <code class="plain">total = Arrays.stream(arr)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">.filter(i -&gt; i == </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">.count();</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Count of 1's in given array is "</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ total);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="comments">// This code is contributed by prajwal kandekar</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Count of 1's in given array is 4
</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(n)</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <p dir="ltr"><span></span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-a-repeating-and-a-missing-number/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-a-repeating-and-a-missing-number/?ref=lbp">Find the missing and repeating number</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Two elements whose sum is closest to zero</div> --> 
  <h1>Two elements whose sum is closest to zero</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Accolite","Amazon","Fab.com","Microsoft","Snapdeal"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p><strong>Question:</strong> An Array of integers is given, both +ve and -ve. You need to find the two elements such that their sum is closest to zero.<br>For the below array, program should print -80 and 85.</p>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/two-numbers-with-sum-closest-to-zero1737/1/" title="Permalink to Sum of two elements with sum nearest to zero" permalink="">Sum of two elements with sum nearest to zero</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/two-numbers-with-sum-closest-to-zero1737/1/" title="Permalink to Sum of two elements with sum nearest to zero" permalink="">Try It!</a>
   </div>
  </div>
 </div>
 <p><strong>METHOD 1 (Simple)&nbsp;</strong><br>For each element, find the sum of it with every other element in the array and compare sums. Finally, return the minimum sum.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p><strong>Implementation</strong>:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_261494" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to find Two elements</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// whose sum is closest to zero</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number6 index5 alt1"><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">minAbsSumPair(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">arr_size)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">inv_count = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l, r, min_sum, sum, min_l, min_r;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Array should have at least two elements*/</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(arr_size &lt; </code><code class="value">2</code><code class="plain">)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Invalid Input"</code><code class="plain">);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Initialization of values */</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_l = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_r = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_sum = arr[</code><code class="value">0</code><code class="plain">] + arr[</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(l = </code><code class="value">0</code><code class="plain">; l &lt; arr_size - </code><code class="value">1</code><code class="plain">; l++)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(r = l+</code><code class="value">1</code><code class="plain">; r &lt; arr_size; r++)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sum = arr[l] + arr[r];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(Math.abs(min_sum) &gt; Math.abs(sum))</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_sum = sum;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_l = l;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_r = r;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" The two elements whose "</code><code class="plain">+</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum is minimum are "</code><code class="plain">+</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[min_l]+ </code><code class="string">" and "</code><code class="plain">+arr[min_r]);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">60</code><code class="plain">, -</code><code class="value">10</code><code class="plain">, </code><code class="value">70</code><code class="plain">, -</code><code class="value">80</code><code class="plain">, </code><code class="value">85</code><code class="plain">};</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minAbsSumPair(arr, </code><code class="value">6</code><code class="plain">);</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number50 index49 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:</strong>&nbsp;</p>
 <pre>The two elements whose sum is minimum are -80 and 85</pre>
 <p><strong>Time complexity: </strong>O(n<sup>2</sup>)</p>
 <p><strong>Auxiliary Space:</strong> O(1)</p>
 <p><strong>METHOD 2 (Use Sorting):</strong></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p><strong>Algorithm&nbsp;:</strong></p>
 <ol>
  <li>Sort all the elements of the input array.&nbsp;</li>
  <li>Use two index variables l and r to traverse from left and right ends respectively. Initialize l as 0 and r as n-1.&nbsp;</li>
  <li>sum = a[l] + a[r]&nbsp;</li>
  <li>If sum is -ve, then l++&nbsp;</li>
  <li>If sum is +ve, then r–&nbsp;</li>
  <li>Keep track of abs min sum.&nbsp;</li>
  <li>Repeat steps 3, 4, 5 and 6 while l &lt; r</li>
 </ol>
 <p><strong>Implementation:</strong></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_306934" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number4 index3 alt1"><code class="plain">{</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">minAbsSumPair(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Variables to keep track of current sum and minimum sum</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum, min_sum = </code><code class="value">999999</code><code class="plain">;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// left and right index variables</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = n-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// variable to keep track of the left and right pair for min_sum</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min_l = l, min_r = n-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Array should have at least two elements*/</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(n &lt; </code><code class="value">2</code><code class="plain">)</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Invalid Input"</code><code class="plain">);</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Sort the elements */</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sort(arr, l, r);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code><code class="plain">(l &lt; r)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sum = arr[l] + arr[r];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*If abs(sum) is less then update the result items*/</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(Math.abs(sum) &lt; Math.abs(min_sum))</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_sum = sum;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_l = l;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_r = r;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(sum &lt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" The two elements whose "</code><code class="plain">+</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum is minimum are "</code><code class="plain">+</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[min_l]+ </code><code class="string">" and "</code><code class="plain">+arr[min_r]);</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) </code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">60</code><code class="plain">, -</code><code class="value">10</code><code class="plain">, </code><code class="value">70</code><code class="plain">, -</code><code class="value">80</code><code class="plain">, </code><code class="value">85</code><code class="plain">};</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minAbsSumPair(arr, n);</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Functions for QuickSort */</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* This function takes last element as pivot,</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">places the pivot element at its correct</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">position in sorted array, and places all</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">smaller (smaller than pivot) to left of</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">pivot and all greater elements to right</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">of pivot */</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">partition(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pivot = arr[high]; </code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = (low-</code><code class="value">1</code><code class="plain">); </code><code class="comments">// index of smaller element</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j=low; j&lt;high; j++)</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If current element is smaller than or</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// equal to pivot</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt;= pivot)</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number76 index75 alt1">
             &nbsp; 
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// swap arr[i] and arr[j]</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i];</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[j];</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[j] = temp;</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number83 index82 alt2">
             &nbsp; 
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// swap arr[i+1] and arr[high] (or pivot)</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i+</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i+</code><code class="value">1</code><code class="plain">] = arr[high];</code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[high] = temp;</code>
           </div>
           <div class="line number88 index87 alt1">
             &nbsp; 
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i+</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number91 index90 alt2">
             &nbsp; 
           </div>
           <div class="line number92 index91 alt1">
             &nbsp; 
           </div>
           <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* The main function that implements QuickSort()</code>
           </div>
           <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">arr[] --&gt; Array to be sorted,</code>
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">low&nbsp; --&gt; Starting index,</code>
           </div>
           <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">high&nbsp; --&gt; Ending index */</code>
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">sort(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(low &lt; high)</code>
           </div>
           <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* pi is partitioning index, arr[pi] is </code>
           </div>
           <div class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">now at right place */</code>
           </div>
           <div class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pi = partition(arr, low, high);</code>
           </div>
           <div class="line number104 index103 alt1">
             &nbsp; 
           </div>
           <div class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Recursively sort elements before</code>
           </div>
           <div class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// partition and after partition</code>
           </div>
           <div class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sort(arr, low, pi-</code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sort(arr, pi+</code><code class="value">1</code><code class="plain">, high);</code>
           </div>
           <div class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number111 index110 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:</strong>&nbsp;</p>
 <pre>The two elements whose sum is minimum are -80 and 85</pre>
 <p><strong>Time Complexity: </strong>complexity to sort + complexity of finding the optimum pair = O(nlogn) + O(n) = O(nlogn)</p>
 <p><strong>Auxiliary Space:</strong> O(1)</p>
 <p><strong>STL implementation of Method-2</strong>:</p>
 <p><strong>Algorithm&nbsp;</strong><br>1) Sort all the elements of the input array using their absolute values.&nbsp;<br>2) Check absolute sum of arr[i-1] and arr[i] if their absolute sum is less than min update min with their absolute value.&nbsp;<br>3) Use two variables to store the index of the elements.</p>
 <p><strong>Implementation:</strong></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_299870" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation using STL</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG{</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findMinSum(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(!(Math.abs(arr[i - </code><code class="value">1</code><code class="plain">]) &lt;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Math.abs(arr[i])))</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i - </code><code class="value">1</code><code class="plain">] = arr[i];</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = temp;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">0</code><code class="plain">, y = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Absolute value shows how close </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it is to zero</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(arr[i - </code><code class="value">1</code><code class="plain">] + arr[i]) &lt;= min)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If found an even close value</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// update min and store the index</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min = Math.abs(arr[i - </code><code class="value">1</code><code class="plain">] + arr[i]);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x = i - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y = i;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The two elements whose "</code> <code class="plain">+</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum is minimum are "</code> <code class="plain">+ </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[x] + </code><code class="string">" and "</code> <code class="plain">+ arr[y]);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="comments">// Driver code</code>
           </div>
           <div class="line number42 index41 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="plain">{</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">60</code><code class="plain">, -</code><code class="value">10</code><code class="plain">, </code><code class="value">70</code><code class="plain">, -</code><code class="value">80</code><code class="plain">, </code><code class="value">85</code> <code class="plain">};</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findMinSum(arr, n);</code>
           </div>
           <div class="line number48 index47 alt1"><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="comments">// This code is contributed by rag2127</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:</strong>&nbsp;</p>
 <pre>The two elements whose sum is minimum are -80 and 85</pre>
 <p><strong>Time Complexity:</strong> O(nlogn)<strong>&nbsp;</strong><br><strong>Auxiliary Space : </strong>O(1)</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/count-1s-sorted-binary-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/count-1s-sorted-binary-array/?ref=lbp">Count 1's in a sorted binary array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find a pair with the given difference</div> --> 
  <h1>Find a pair with the given difference</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","Visa"]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Searching","Sorting"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an unsorted array and a number n, find if there exists a pair of elements in the array whose difference is n.&nbsp;</span><br><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {5, 20, 3, 2, 50, 80}, n = 78</span><br><b><strong>Output:</strong></b><span> Pair Found: (2, 80)</span></p>
  <div id="GFG_AD_gfg_mobile_336x280"></div>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {90, 70, 20, 80, 50}, n = 45</span><br><b><strong>Output:</strong></b><span> No Such Pair</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/find-pair-given-difference1559/1/">Find Pair Given Difference</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/find-pair-given-difference1559/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Method 1: </strong></b><span>The simplest method is to run two loops, the outer loop picks the first element (smaller element) and the inner loop looks for the element picked by outer loop plus n. Time complexity of this method is O(n</span><sup><span>2</span></sup><span>).</span></p>
 <p dir="ltr"><b><strong>Algorithm:</strong></b></p>
 <ol>
  <li value="1"><span>&nbsp; &nbsp;Start iterating through each element of the array using an outer loop.</span></li>
  <li value="2"><span>&nbsp; &nbsp;For each element, start iterating again through each of the elements of the array except the one picked in outer loop using an inner loop.</span></li>
  <li value="3"><span>&nbsp; &nbsp;If the difference between the current element and any of the elements of it is equal to the given difference, print both elements.</span></li>
  <li value="4"><span>&nbsp; &nbsp;Continue the process until all possible pairs of elements are compared.</span></li>
  <li value="5"><span>&nbsp; &nbsp;If no pair found, print </span><b><strong>“No such pair”</strong></b><span>.</span></li>
 </ol>
 <p dir="ltr"><span>Below is the implementation of the approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_562871" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">FindPairWithDifference {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find if there exists a pair</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of elements in the array whose difference is n</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findPair(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">diff) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Nested loop to compare all possible</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pairs of elements</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == j)</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the difference between the</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// two elements is n, print them</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((arr[j] - arr[i]) == diff) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Pair Found: ("</code> <code class="plain">+ arr[i] + </code><code class="string">", "</code> <code class="plain">+ arr[j] + </code><code class="string">")"</code><code class="plain">);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"No such pair"</code><code class="plain">);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Input array and diff</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">100</code> <code class="plain">};</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = -</code><code class="value">60</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findPair(arr, n, diff);</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <pre>Pair Found: (100, 40)






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(n*n) as two nested for loops are executing both from 1 to n where n is size of input array.</span><br><b><strong>Space Complexity: </strong></b><span>O(1) as no extra space has been taken.</span></p>
 <p dir="ltr"><b><strong>Method 2: </strong></b><span>We can use sorting and Binary Search to improve time complexity to O(nLogn). The first step is to sort the array in ascending order. Once the array is sorted, traverse the array from left to right, and for each element arr[i], binary search for arr[i] + n in arr[i+1..n-1]. If the element is found, return the pair.&nbsp;Both first and second steps take O(nLogn). So overall complexity is O(nLogn).&nbsp;</span><br><b><strong>Method 3:</strong></b><span> The second step of the Method -2 can be improved to O(n). The first step remains the same. The idea for the second step is to take two index variables i and j, and initialize them as 0 and 1 respectively. Now run a linear loop. If arr[j] – arr[i] is smaller than n, we need to look for greater arr[j], so increment j. If arr[j] – arr[i] is greater than n, we need to look for greater arr[i], so increment i. Thanks to Aashish Barnwal for suggesting this approach.&nbsp;</span><br><b><strong>The following code is only for the second step of the algorithm, it assumes that the array is already sorted.&nbsp;&nbsp;</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_502937" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find a pair with the given difference</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">PairDifference</code>
           </div>
           <div class="line number5 index4 alt2"><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The function assumes that the array is sorted</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">findPair(</code><code class="keyword">int</code> <code class="plain">arr[],</code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">size = arr.length;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize positions of two elements</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">, j = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search for a pair</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; size &amp;&amp; j &lt; size)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i != j &amp;&amp; (arr[j] - arr[i] == n || arr[i] - arr[j] == n))</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Pair Found: "</code><code class="plain">+</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"( "</code><code class="plain">+arr[i]+</code><code class="string">", "</code><code class="plain">+ arr[j]+</code><code class="string">" )"</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[j] - arr[i] &lt; n)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"No such pair"</code><code class="plain">);</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test above function</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">100</code><code class="plain">};</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = -</code><code class="value">60</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findPair(arr,n);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2"><code class="comments">/*This code is contributed by Devesh Agrawal*/</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Pair Found: (100, 40)






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n*log(n)) [Sorting is still required as first step], Where n is number of element in given array</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <p dir="ltr"><span>The above code can be simplified and can be made more understandable by reducing bunch of If-Else checks . Thanks to </span><a href="https://www.linkedin.com/in/nakshatrac/" target="_blank" rel="noopener noreferrer nofollow"><b><strong>Nakshatra Chhillar</strong></b></a><span> for suggesting this simplification. We will understand simplifications through following code:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_321650" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find a pair with the given difference</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">findPair(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">size, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Step-1 Sort the array</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr);</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize positions of two elements</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// take absolute value of difference</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// this does not affect the pair as A-B=diff is same as</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// B-A= -diff</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">n = Math.abs(n);</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search for a pair</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// These loop running conditions are sufficient</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r &amp;&amp; r &lt; size) {</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = arr[r] - arr[l];</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(diff == n</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; l != r) </code><code class="comments">// we need distinct elements in pair</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// so l!=r</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Pair Found: ("</code> <code class="plain">+ arr[l] + </code><code class="string">", "</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[r] + </code><code class="string">")"</code><code class="plain">);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(diff &gt; n) </code><code class="comments">// try to reduce the diff</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="comments">// Note if l==r then r will be advanced thus no</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pair will be missed</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r++;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"No such pair"</code><code class="plain">);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="comments">// Driver program to test above function</code>
           </div>
           <div class="line number44 index43 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) </code>
           </div>
           <div class="line number45 index44 alt2"><code class="plain">{</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">100</code> <code class="plain">};</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">size = arr.length;</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = -</code><code class="value">60</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findPair(arr, size, n);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println();</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">n = </code><code class="value">20</code><code class="plain">;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findPair(arr, size, n);</code>
           </div>
           <div class="line number53 index52 alt2"><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1"><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="comments">// This code is contributed by Pushpesh Raj</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <pre>Pair Found: (40, 100)
No such pair






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n*log(n)) [Sorting is still required as first step], Where n is number of element in given array</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <p dir="ltr"><b><strong>Method 4 :</strong></b><span>Hashing can also be used to solve this problem. Create an empty hash table HT. Traverse the array, use array elements as hash keys and enter them in HT. Traverse the array again look for value n + arr[i] in HT.&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_469671" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for the above approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG</code>
           </div>
           <div class="line number6 index5 alt1"><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// The function assumes that the array is sorted</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">findPair(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">size, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HashMap&lt;Integer,</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer&gt; mpp = </code><code class="keyword">new</code> <code class="plain">HashMap&lt;Integer,</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer&gt;();</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse the array</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Update frequency</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of arr[i]</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mpp.put(arr[i],</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mpp.getOrDefault(arr[i], </code><code class="value">0</code><code class="plain">) + </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if any element whose frequency</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is greater than 1 exist or not for n == 0</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">0</code> <code class="plain">&amp;&amp; mpp.get(arr[i]) &gt; </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if difference is zero and</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we are unable to find any duplicate or</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element whose frequency is greater than 1</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// then no such pair found.</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; size; i++) {</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mpp.containsKey(n + arr[i])) {</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Pair Found: ("</code> <code class="plain">+ arr[i] + </code><code class="string">", "</code> <code class="plain">+</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (n + arr[i]) + </code><code class="string">")"</code><code class="plain">);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"No Pair found"</code><code class="plain">);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="comments">// Driver Code</code>
           </div>
           <div class="line number50 index49 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">{</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">100</code> <code class="plain">};</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">size = arr.length;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = -</code><code class="value">60</code><code class="plain">;</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findPair(arr, size, n);</code>
           </div>
           <div class="line number56 index55 alt1"><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2"><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1">
             &nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="comments">// This code is contributed by code_hunt.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Pair Found: (100, 40)






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n), Where n is number of element in given array</span><br><b><strong>Auxiliary Space:</strong></b><span> O(n)</span><br><span>&nbsp;</span></p>
 <p dir="ltr"><span>Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.</span><br><span>&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/two-elements-whose-sum-is-closest-to-zero/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/two-elements-whose-sum-is-closest-to-zero/?ref=lbp">Two elements whose sum is closest to zero</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Print K largest(or smallest) elements in an array</div> --> 
  <h1>Print K largest(or smallest) elements in an array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","Microsoft","Samsung","Walmart"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Heap","Searching","Sorting"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array </span><b><strong>arr[]</strong></b><span> of size </span><b><strong>N</strong></b><span>, the task is to printing </span><b><strong>K largest elements</strong></b><span> in an array. </span><br><b><strong>Note: </strong></b><span>Elements in output array can be in any order</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> &nbsp;[1, 23, 12, 9, 30, 2, 50], K = 3</span><br><b><strong>Output: </strong></b><span>50, 30, 23</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> &nbsp;[11, 5, 12, 9, 44, 17, 2], K = 2</span><br><b><strong>Output: </strong></b><span>44, 17</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/k-largest-elements4206/1/">k largest elements</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/k-largest-elements4206/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K largest elements in an array using </strong></b></u><a href="https://www.geeksforgeeks.org/introduction-to-sorting-algorithm/" rel="noopener"><u><b><strong class="GFGEditorTheme__textUnderline">Sorting</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><b><strong>Sort</strong></b><span> the input array in </span><b><strong>descending order</strong></b><span> so that the first </span><b><strong>K</strong></b><span> elements in the array are the </span><b><strong>K</strong></b><span> largest elements</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the below steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Sort the elements in descending order</span></li>
  <li value="2"><span>Print the first </span><b><strong>K</strong></b><span> numbers of the sorted array</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_554493" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for k largest elements in an array</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.ArrayList;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Collections;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">kLargest(Integer[] arr, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Sort the given array arr in reverse order</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method doesn't work with primitive data</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// types. So, instead of int, Integer type</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array will be used</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr, Collections.reverseOrder());</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the first kth largest elements</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k; i++)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This code is contributed by Niraj Dubey</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="plain">ArrayList&lt;Integer&gt; kLargest(</code><code class="keyword">int</code><code class="plain">[] arr,</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Convert using stream</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer[] obj_array</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= Arrays.stream(arr).boxed().toArray(</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer[] ::</code><code class="keyword">new</code><code class="plain">);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(obj_array, Collections.reverseOrder());</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ArrayList&lt;Integer&gt; list = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;(k);</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k; i++)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">list.add(obj_array[i]);</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">list;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer arr[]</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">Integer[] { </code><code class="value">1</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">50</code> <code class="plain">};</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kLargest(arr, k);</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This code is contributed by Niraj Dubey</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// What if primitive datatype array is passed and</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// wanted to return in ArrayList&lt;Integer&gt;</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] prim_array = { </code><code class="value">1</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">50</code> <code class="plain">};</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kLargest(prim_array, k);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1"><code class="comments">// This code is contributed by Kamal Rawal</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>50 30 23 






</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity:</strong></b><span> O(N * log(N))</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K largest elements in an array using </strong></b></u><a href="https://www.geeksforgeeks.org/binary-search/" rel="noopener"><u><b><strong class="GFGEditorTheme__textUnderline">Binary Search</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>The idea is to find the Kth largest element of the array and then print all the elements which are greater than or equal to Kth largest Element. The Kth largest element can be found using binary search by defining a search range based on the minimum and maximum values in the input array. In each iteration of binary search, count the larger than the midpoint and update the search range accordingly. This process continues until the range collapses to a single element, which is the kth largest element. </span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the given steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Initialize </span><b><strong>low</strong></b><span> and </span><b><strong>high</strong></b><span> to </span><b><strong>minimum</strong></b><span> and </span><b><strong>maximum</strong></b><span> element of the array denoting the range within which the answer lies.</span></li>
  <li value="2"><span>Apply Binary Search on this range.&nbsp;</span>
   <ul>
    <li value="1"><span>If the selected element by calculating </span><b><strong>mid</strong></b><span> has less than </span><b><strong>K </strong></b><span>elements lesser to it then increase the number that is </span><b><strong>low = mid + 1</strong></b><span>.</span></li>
    <li value="2"><span>Otherwise, Decrement the high pointer, i.e </span><b><strong>high = mid</strong></b><span>.</span></li>
    <li value="3"><span>The Binary Search will terminate when only one element remains in the answer space that would be the Kth largest element.</span></li>
   </ul></li>
  <li value="3"><span>Print all the elements which are greater than or equal to Kth largest element.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_255276" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findKthLargest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n,</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">low = Integer.MAX_VALUE,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the minimum and maximum elements in the</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i : arr) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = Math.min(low, i);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = Math.max(high, i);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Perform binary search on the range of elements</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// between low and high</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + (high - low) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Count the number of elements greater than mid</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in the array</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i : arr) {</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &gt; mid) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there are at least K elements greater than</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// mid, search the right half</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(count &gt;= k) {</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Otherwise, search the left half</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return the Kth largest element</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">high;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printKLargest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n,</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the Kth largest element</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">kthLargest = findKthLargest(arr, n, k);</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the K largest elements in decreasing order</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i : arr) {</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &gt;= kthLargest) {</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">" "</code> <code class="plain">+ i);</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number61 index60 alt2">
             &nbsp; 
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">12</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">787</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">23</code> <code class="plain">};</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"K largest elements:"</code><code class="plain">);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printKLargest(arr, n, k);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number71 index70 alt2"><code class="plain">}</code>
           </div>
           <div class="line number72 index71 alt1"><code class="comments">// This code is contributed by Rohit Singh</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <pre>K largest elements: 787 23 






</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: O(n * log (mx-mn))</strong></b><span>, where mn be minimum and mx be maximum element of array.</span><br><b><strong>Auxiliary Space: O(1)</strong></b></p>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K largest elements in an array using </strong></b></u><a href="https://www.geeksforgeeks.org/quick-sort/"><u><b><strong class="GFGEditorTheme__textUnderline">Quick Sort partitioning algorithm</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>This is an optimization over method 1, if QuickSort is used as a sorting algorithm in first step. In QuickSort, pick a </span><b><strong>pivot</strong></b><span> element, then move the </span><b><strong>pivot</strong></b><span> element to its correct position and partition the surrounding array. The idea is, not to do complete quicksort, but stop at the point where </span><b><strong>pivot</strong></b><span> itself is </span><b><strong>k’th</strong></b><span> largest element. Also, not to recur for both </span><b><strong>left</strong></b><span> and </span><b><strong>right</strong></b><span> sides of pivot, but recur for one of them according to the position of pivot.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the given steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Run </span><a href="https://www.geeksforgeeks.org/quick-sort/" rel="noopener"><span>quick sort </span></a><span>algorithm on the input array</span></li>
  <li value="2"><span>In this algorithm pick a </span><b><strong>pivot</strong></b><span> element and move it to it’s correct position</span></li>
  <li value="3"><span>Now, if index of pivot is equal to </span><b><strong>K</strong></b><span> then return , else if the index of pivot is less than </span><b><strong>K</strong></b><span>, then recur for the right subarray, else recur for the </span><b><strong>left</strong></b><span> subarray.&nbsp;</span></li>
  <li value="4"><span>Repeat this process until the element at index </span><b><strong>K</strong></b><span> is not found.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_635428" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">KthLargestElements {</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to swap two integers</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">swap(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b) {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[a];</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[a] = arr[b];</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[b] = temp;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Partition the array around the last element and get the position of the pivot element in the sorted array</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">partition(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = arr[r];</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = l;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = l; j &lt;= r - </code><code class="value">1</code><code class="plain">; j++) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt;= x) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, j);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, r);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function stops at the K'th largest element in arr[l..r] using QuickSort-based method</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">kthLargest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">k, </code><code class="keyword">int</code> <code class="plain">N) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Partition the array around the last element and get the position of the pivot element in the sorted array</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = partition(arr, l, r);</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the position is the same as k</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos - l == k - </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the position is less, recurse for the right subarray</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(pos - l &lt; k - </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kthLargest(arr, pos + </code><code class="value">1</code><code class="plain">, r, k - pos + l - </code><code class="value">1</code><code class="plain">, N);</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else, recurse for the left subarray</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kthLargest(arr, l, pos - </code><code class="value">1</code><code class="plain">, k, N);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">11</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">88</code><code class="plain">, </code><code class="value">96</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">45</code> <code class="plain">};</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// For Largest</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kthLargest(arr, </code><code class="value">0</code><code class="plain">, N - </code><code class="value">1</code><code class="plain">, k, N);</code>
           </div>
           <div class="line number49 index48 alt2">
             &nbsp; 
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print K Largest numbers</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(k + </code><code class="string">" largest elements are: "</code><code class="plain">);</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = N - </code><code class="value">1</code><code class="plain">; i &gt;= N - k; i--)</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[i] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println();</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>3 largest elements are : 88  50  96  






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: O(N</strong></b><b><sup><strong>2</strong></sup></b><b><strong>) in worst case(O(N) on average).</strong></b><br><b><strong>Auxiliary Space: O(N)</strong></b></p>
 <p dir="ltr"><b><strong>Note:</strong></b><span> We can improve on the standard quicksort algorithm by using the random() function. Instead of using the pivot element as the last element, we can randomly choose the pivot element randomly.</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">K largest elements in an array using </span></u><a href="https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/" rel="noopener"><u><span class="GFGEditorTheme__textUnderline">Priority Queue(Min-Heap)</span></u></a><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>The intuition behind this approach is to maintain a </span><b><strong>minheap</strong></b><span> (priority queue) of size </span><b><strong>K </strong></b><span>while iterating through the array. Doing this ensures that the min heap always contains the </span><b><strong>K</strong></b><span> largest elements encountered so far. If the size of the min heap exceeds </span><b><strong>K</strong></b><span>, remove the smallest element this step ensures that the heap maintains the </span><b><strong>K</strong></b><span> largest elements encountered so far. In the end, the min heap contains the </span><b><strong>K </strong></b><span>largest elements of the array.</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the below steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Initialize a min heap (priority queue) </span><b><strong>pq</strong></b><span>.</span></li>
  <li value="2"><span>For each element in the array:</span>
   <ul>
    <li value="1"><span>Push the element onto the max heap.</span></li>
    <li value="2"><span>If the size of the max heap exceeds </span><b><strong>K</strong></b><span>, pop (remove) the smallest element from the min heap. This step ensures that the min heap maintains the </span><b><strong>K</strong></b><span> largest elements encountered so far.</span></li>
   </ul></li>
  <li value="3"><span>After processing all elements, the min heap will contain the</span><b><strong> K</strong></b><span> largest elements of the array.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_662403" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for k largest elements in an array</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find k largest array element</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">kLargest(</code><code class="keyword">int</code> <code class="plain">a[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Implementation using</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a Priority Queue</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; pq</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;Integer&gt;();</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; ++i) {</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Insert elements into</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the priority queue</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(a[i]);</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If size of the priority</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// queue exceeds k</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pq.size() &gt; k) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.poll();</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the k largest element</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!pq.isEmpty()) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(pq.peek() + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.poll();</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println();</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a[]</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= { </code><code class="value">11</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">45</code><code class="plain">, </code><code class="value">88</code><code class="plain">, </code><code class="value">96</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">45</code> <code class="plain">};</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = a.length;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(k + </code><code class="string">" largest elements are : "</code><code class="plain">);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function Call</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kLargest(a, n, k);</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="plain">};</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>3 largest elements are : 50 88 96 







</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> </span><b><strong>O(N * log(K))</strong></b><br><b><strong>Auxiliary Space:</strong></b><span> </span><b><strong>O(K)</strong></b></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/iterative-heap-sort/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/iterative-heap-sort/?ref=lbp">Iterative HeapSort</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Kth smallest element in a row-wise and column-wise sorted 2D array</div> --> 
  <h1>Kth smallest element in a row-wise and column-wise sorted 2D array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Accolite","Amazon"]');
                                                categoryTagsArray = JSON.parse('["Heap","Matrix","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an n x n matrix, where every row and column is sorted in non-decreasing order. Find the kth smallest element in the given 2D array.</span></p>
 <p dir="ltr"><b><strong>Example,&nbsp;</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <pre><b><strong>Input:</strong></b><span>k = 3 and array =</span><br><span>        10, 20, 30, 40</span><br><span>        15, 25, 35, 45</span><br><span>        24, 29, 37, 48</span><br><span>        32, 33, 39, 50 </span><br><b><strong>Output:</strong></b><span> 20</span><br><b><strong>Explanation: </strong></b><span>The 3rd smallest element is 20 </span><br><b><strong>Input:</strong></b><span>k = 7 and array =</span><br><span>        10, 20, 30, 40</span><br><span>        15, 25, 35, 45</span><br><span>        24, 29, 37, 48</span><br><span>        32, 33, 39, 50 </span><br><b><strong>Output:</strong></b><span> 30</span><br><b><strong>Explanation: </strong></b><span>The 7th smallest element is 30</span><br></pre>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/kth-element-in-matrix/1/">Kth element in Matrix</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/kth-element-in-matrix/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">BRUTE METHOD:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><i><b><strong class="GFGEditorTheme__textItalic">Intuition:</strong></b></i></p>
  <ol>
   <li value="1"><span>We create &nbsp;a PriorityQueue&lt;Integer&gt; to store all the elements of the matrix.</span></li>
   <li value="2"><span>Then we traverse through the the priority queue and if k elements are popped out, then we return the element.</span></li>
   <li value="3"><span>As by default min heap is implemented by PriorityQueue.</span></li>
  </ol>
 </blockquote>
 <p dir="ltr"><b><strong>Implementation:</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_550884" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for kth largest element in a 2d</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// array sorted row-wise and column-wise</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[][] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// code here.</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; pq = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;();</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(arr[i][j]);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">c = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!pq.isEmpty()) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = pq.poll();</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c++;</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(c == k)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">temp;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mat[][] = { { </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">},</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">15</code><code class="plain">, </code><code class="value">25</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">45</code> <code class="plain">},</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">25</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">37</code><code class="plain">, </code><code class="value">48</code> <code class="plain">},</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">32</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">50</code> <code class="plain">} };</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res = kthSmallest(mat, </code><code class="value">4</code><code class="plain">, </code><code class="value">7</code><code class="plain">);</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"7th smallest element is "</code> <code class="plain">+ res);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2"><code class="comments">// This code is contributed by Raunak Singh</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>7th smallest element is 30








</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(N^2* log(N^2)); since insertion in priority queue takes log N time and we have inserted N^2 elements.</span></p>
 <p dir="ltr"><b><strong>Space Complexity: &nbsp;</strong></b><span>O(N^2)</span></p>
 <p dir="ltr"><b><strong>Approach:</strong></b><span> So the idea is to find the kth minimum element. Each row and each column is sorted. So it can be thought as </span><a href="https://www.geeksforgeeks.org/merge-k-sorted-linked-lists-set-2-using-min-heap/"><span>C sorted lists and the lists have to be merged into a single list</span></a><span>, the kth element of the list has to be found out. So the approach is similar, the only difference is when the kth element is found the loop ends.</span><br><b><strong>Algorithm:</strong></b></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <ol>
  <li value="1"><span>The idea is to use min heap. Create a Min-Heap to store the elements</span></li>
  <li value="2"><span>Traverse the first row from start to end and build a min heap of elements from first row. A heap entry also stores row number and column number.</span></li>
  <li value="3"><span>Now Run a loop k times to extract min element from heap in each iteration</span></li>
  <li value="4"><span>Get minimum element (or root) from Min-Heap.</span></li>
  <li value="5"><span>Find row number and column number of the minimum element.</span></li>
  <li value="6"><span>Replace root with the next element from same column and min-heapify the root.</span></li>
  <li value="7"><span>Print the last extracted element, which is the kth minimum element</span></li>
 </ol>
 <p dir="ltr"><b><strong>Implementation:</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_91063" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for kth largest element in a 2d </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// array sorted row-wise and column-wise </code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="comments">// A structure to store entry of heap.</code>
           </div>
           <div class="line number8 index7 alt1"><code class="comments">// The entry contains value from 2D array,</code>
           </div>
           <div class="line number9 index8 alt2"><code class="comments">// row and column numbers of the value </code>
           </div>
           <div class="line number10 index9 alt1"><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">HeapNode</code>
           </div>
           <div class="line number11 index10 alt2"><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Value to be stored </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">val;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Row number of value in 2D array </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Column number of value in 2D array </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">c;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HeapNode(</code><code class="keyword">int</code> <code class="plain">val, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">c)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.val = val;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.c = c;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.r = r;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="comments">// A utility function to minheapify the node</code>
           </div>
           <div class="line number31 index30 alt2"><code class="comments">// harr[i] of a heap stored in harr[] </code>
           </div>
           <div class="line number32 index31 alt1"><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">minHeapify(HeapNode harr[], </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i, </code><code class="keyword">int</code> <code class="plain">heap_size)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">2</code> <code class="plain">* i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = </code><code class="value">2</code> <code class="plain">* i + </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min = i;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(l &lt; heap_size&amp;&amp; r&lt;heap_size &amp;&amp; harr[l].val &lt; harr[i].val &amp;&amp; harr[r].val &lt; harr[i].val){</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HeapNode temp=harr[r];</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[r]=harr[i];</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[i]=harr[l];</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[l]=temp;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(harr ,l,heap_size);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(harr ,r,heap_size);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(l &lt; heap_size &amp;&amp; harr[l].val &lt; harr[i].val){</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HeapNode temp=harr[i];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[i]=harr[l];</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[l]=temp;</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(harr ,l,heap_size);</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2"><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="comments">// This function returns kth smallest</code>
           </div>
           <div class="line number56 index55 alt1"><code class="comments">// element in a 2D array mat[][] </code>
           </div>
           <div class="line number57 index56 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[][] mat,</code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">{</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// k must be greater than 0 and </code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// smaller than n*n </code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(k &lt; </code><code class="value">0</code> <code class="plain">&amp;&amp; k &gt;= n * n)</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Integer.MAX_VALUE;</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Create a min heap of elements </code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// from first row of 2D array </code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HeapNode harr[] = </code><code class="keyword">new</code> <code class="plain">HeapNode[n];</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[i] = </code><code class="keyword">new</code> <code class="plain">HeapNode(mat[</code><code class="value">0</code><code class="plain">][i], </code><code class="value">0</code><code class="plain">, i);</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HeapNode hr = </code><code class="keyword">new</code> <code class="plain">HeapNode(</code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">0</code><code class="plain">);</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= k; i++)</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Get current heap root </code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">hr = harr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Get next value from column of root's</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// value. If the value stored at root was</code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// last value in its column, then assign</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// INFINITE as next value </code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">nextVal = hr.r &lt; n - </code><code class="value">1</code> <code class="plain">? </code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mat[hr.r + </code><code class="value">1</code><code class="plain">][hr.c] :</code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer.MAX_VALUE;</code>
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Update heap root with next value </code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">harr[</code><code class="value">0</code><code class="plain">] = </code><code class="keyword">new</code> <code class="plain">HeapNode(nextVal, </code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">hr.r + </code><code class="value">1</code><code class="plain">, hr.c);</code>
           </div>
           <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Heapify root </code>
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(harr, </code><code class="value">0</code><code class="plain">, n);</code>
           </div>
           <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return the value at last extracted root </code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">hr.val;</code>
           </div>
           <div class="line number100 index99 alt1"><code class="plain">}</code>
           </div>
           <div class="line number101 index100 alt2">
             &nbsp; 
           </div>
           <div class="line number102 index101 alt1"><code class="comments">// Driver code</code>
           </div>
           <div class="line number103 index102 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number104 index103 alt1"><code class="plain">{</code>
           </div>
           <div class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mat[][] = { { </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">},</code>
           </div>
           <div class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">15</code><code class="plain">, </code><code class="value">25</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">45</code> <code class="plain">},</code>
           </div>
           <div class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">25</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">37</code><code class="plain">, </code><code class="value">48</code> <code class="plain">},</code>
           </div>
           <div class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">32</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">50</code> <code class="plain">} };</code>
           </div>
           <div class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res = kthSmallest(mat, </code><code class="value">4</code><code class="plain">, </code><code class="value">7</code><code class="plain">);</code>
           </div>
           <div class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"7th smallest element is "</code><code class="plain">+ res);</code>
           </div>
           <div class="line number113 index112 alt2"><code class="plain">}</code>
           </div>
           <div class="line number114 index113 alt1"><code class="plain">}</code>
           </div>
           <div class="line number115 index114 alt2">
             &nbsp; 
           </div>
           <div class="line number116 index115 alt1"><code class="comments">// This code is contributed by Rishabh Chauhan</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>7th smallest element is 30








</pre>
 </div>
 <p dir="ltr"><span>The codes above are contributed by RISHABH CHAUHAN.</span><br><b><strong>Complexity Analysis:</strong></b></p>
 <ul>
  <li value="1"><b><strong>Time Complexity:</strong></b><span> The above solution involves following steps.&nbsp;</span>
   <ol>
    <li value="1"><span>Building a min-heap which takes O(n) time</span></li>
    <li value="2"><span>Heapify k times which takes O(k Logn) time.</span></li>
   </ol></li>
  <li value="2"><b><strong>Auxiliary Space:</strong></b><span> O(R), where R is the length of a row, as the Min-Heap stores one row at a time.</span></li>
 </ul>
 <p dir="ltr"><span>The above code can be optimized to build a heap of size k when k is smaller than n. In that case, the kth smallest element must be in first k rows and k columns.&nbsp;</span><br><span>We will soon be publishing more efficient algorithms for finding the kth smallest element.&nbsp;</span><br><span>This article is compiled by Ravi Gupta. </span><br><span>&nbsp;</span></p>
 <p dir="ltr"><b><strong>Using inbuilt priority_queue :</strong></b></p>
 <p dir="ltr"><span>By using a comparator, we can carry out custom comparison in priority_queue. We will use priority_queue&lt;pair&lt;int,int&gt;&gt; for this.</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <p dir="ltr"><b><strong>&nbsp;Implementation :&nbsp;</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_392702" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// kth largest element in a 2d array sorted row-wise and</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// column-wise</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">pair {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">first, second;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pair(</code><code class="keyword">int</code> <code class="plain">f, </code><code class="keyword">int</code> <code class="plain">s)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">first = f;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">second = s;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code> <code class="plain">mat[][], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// USING LAMBDA FUNCTION</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// [=] IN LAMBDA FUNCTION IS FOR CAPTURING VARIABLES</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// WHICH ARE OUT OF SCOPE i.e. mat[r] NOW, IT'LL</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// COMPARE ELEMENTS OF HEAP BY ELEMENTS AT</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// mat[first][second] Capturing the value of mat by</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// reference to prevent copying</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// DECLARING priority_queue AND PUSHING FIRST ROW IN</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// IT</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;pair&gt; pq</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;((pair a, pair b) -&gt; {</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mat[a.first][a.second]</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">- mat[b.first][b.second];</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">});</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(</code><code class="keyword">new</code> <code class="plain">pair(i, </code><code class="value">0</code><code class="plain">));</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// RUNNING LOOP FOR (k-1) TIMES</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; k; i++) {</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pair p = pq.peek();</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.remove();</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// AFTER POPPING, WE'LL PUSH NEXT ELEMENT OF THE</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ROW IN THE HEAP</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(p.second + </code><code class="value">1</code> <code class="plain">&lt; n)</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(</code><code class="keyword">new</code> <code class="plain">pair(p.first, p.second + </code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ON THE k'th ITERATION, pq.top() will be our</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// answer.</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mat[pq.peek().first][pq.peek().second];</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// driver program to test above function</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mat[][] = {</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">},</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">15</code><code class="plain">, </code><code class="value">25</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">45</code> <code class="plain">},</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">25</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">37</code><code class="plain">, </code><code class="value">48</code> <code class="plain">},</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">32</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">50</code> <code class="plain">},</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"7th smallest element is "</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(mat, </code><code class="value">4</code><code class="plain">, </code><code class="value">7</code><code class="plain">));</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="plain">}</code>
           </div>
           <div class="line number64 index63 alt1">
             &nbsp; 
           </div>
           <div class="line number65 index64 alt2"><code class="comments">// This code is contributed by Karandeep1234</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>7th smallest element is 30








</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(n log n)</span><br><b><strong>Auxiliary Space: </strong></b><span>O(n)</span></p>
 <h3><b><strong>Using Binary Search over the Range:</strong></b></h3>
 <p dir="ltr"><span>This approach uses binary search to iterate over possible solutions. We know that&nbsp;</span></p>
 <ol>
  <li value="1"><span>answer &gt;= mat[0][0]</span></li>
  <li value="2"><span>answer &lt;= mat[N-1][N-1]</span></li>
 </ol>
 <p dir="ltr"><span>So we do a binary search on this range and in each &nbsp;iteration determine the no of elements greater than or equal to our current middle element. The elements greater than or equal to current element can be found in O( n logn ) time using binary search.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_451778" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// This returns count of elements in </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// matrix less than of equal to num</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getElementsGreaterThanOrEqual(</code><code class="keyword">int</code> <code class="plain">num, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">mat[][]) </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if num is less than the first element </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// then no more element in matrix</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// further are less than or equal to num</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mat[i][</code><code class="value">0</code><code class="plain">] &gt; num) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if num is greater than last element, </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it is greater than all elements</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in that row</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mat[i][n - </code><code class="value">1</code><code class="plain">] &lt;= num) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans += n;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This contain the col index of last element</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in matrix less than of equal</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to num</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">greaterThan = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">jump = n / </code><code class="value">2</code><code class="plain">; jump &gt;= </code><code class="value">1</code><code class="plain">; jump /= </code><code class="value">2</code><code class="plain">) {</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(greaterThan + jump &lt; n &amp;&amp;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mat[i][greaterThan + jump] &lt;= num) {</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">greaterThan += jump;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans += greaterThan + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// returns kth smallest index in the matrix</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code> <code class="plain">mat[][], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We know the answer lies between the first and the last element</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// So do a binary search on answer based on the number of elements</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// our current element is greater than the elements in the matrix</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = mat[</code><code class="value">0</code><code class="plain">][</code><code class="value">0</code><code class="plain">], r = mat[n - </code><code class="value">1</code><code class="plain">][n - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r) {</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">greaterThanOrEqualMid = getElementsGreaterThanOrEqual(mid, n, mat);</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(greaterThanOrEqualMid &gt;= k)</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">l;</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mat[][] = {</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">},</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">15</code><code class="plain">, </code><code class="value">25</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">45</code> <code class="plain">},</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">25</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">37</code><code class="plain">, </code><code class="value">48</code> <code class="plain">},</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">32</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">50</code> <code class="plain">},</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"7th smallest element is "</code> <code class="plain">+ kthSmallest(mat, </code><code class="value">4</code><code class="plain">, </code><code class="value">7</code><code class="plain">));</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2">
             &nbsp; 
           </div>
           <div class="line number76 index75 alt1"><code class="plain">}</code>
           </div>
           <div class="line number77 index76 alt2">
             &nbsp; 
           </div>
           <div class="line number78 index77 alt1"><code class="comments">// This code is contributed by gfgking.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>7th smallest element is 30








</pre>
 </div>
 <p dir="ltr"><b><strong>Complexity Analysis</strong></b></p>
 <ul>
  <li value="1"><b><strong>Time Complexity</strong></b><span> : O( y * n*logn)</span></li>
 </ul>
 <pre><span>Where y =  log( abs(Mat[0][0] - Mat[n-1][n-1]) )</span><br></pre>
 <ol>
  <li value="1"><span>We call the getElementsGreaterThanOrEqual function &nbsp;log ( abs(Mat[0][0] – Mat[n-1][n-1]) &nbsp;) times</span></li>
  <li value="2"><span>Time complexity of getElementsGreaterThanOrEqual is O(n logn) since there we do binary search n times.</span></li>
 </ol>
 <ul>
  <li value="1"><b><strong>Auxiliary Space</strong></b><span>: O(1)</span></li>
 </ul>
 <p dir="ltr"><b><strong>USING ARRAY:</strong></b></p>
 <p dir="ltr"><b><strong>We will make a new array and will copy all the contents of matrix in this array. After that we will sort that array and find kth smallest element. This will be so easier.</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_78090" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mat[][] = { { </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">},</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">15</code><code class="plain">, </code><code class="value">25</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">45</code> <code class="plain">},</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">25</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">37</code><code class="plain">, </code><code class="value">48</code> <code class="plain">},</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">32</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">50</code> <code class="plain">} };</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res = kthSmallest(mat, </code><code class="value">4</code><code class="plain">, </code><code class="value">7</code><code class="plain">);</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"7th smallest element is "</code><code class="plain">+ res);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[][]mat,</code><code class="keyword">int</code> <code class="plain">n,</code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] a=</code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[n*n];</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">v=</code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i=</code><code class="value">0</code><code class="plain">;i&lt;n;i++){</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">j=</code><code class="value">0</code><code class="plain">;j&lt;n;j++){</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a[v]=mat[i][j];</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">v++;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(a);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result=a[k-</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">result;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
  <pre>7th smallest element is 30








</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N2log(N2))&nbsp;, We have array of N2 elements,for sorting them time will be N2log(N2).</span><br><b><strong>Auxiliary Space:</strong></b><span> O(N</span><sup><span>2</span></sup><span>)</span></p>
 <p dir="ltr"><b><strong>Using Priority queue approach</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_567007" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[][] matrix, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// n = size of matrix</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i, j, n = matrix.length;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using built-in priority queue which acts as max</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Heap i.e. largest element will be on top</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Kth smallest element can also be seen as largest</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element in a priority queue of size k By this</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// logic we pop elements from priority queue when</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// its size becomes greater than k thus top of</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// priority queue is kth smallest element in matrix</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; maxH = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;(</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Collections.reverseOrder());</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(k == </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">matrix[</code><code class="value">0</code><code class="plain">][</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(j = </code><code class="value">0</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxH.add(matrix[i][j]);</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(maxH.size() &gt; k)</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxH.poll();</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">maxH.peek();</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[][] matrix = { { </code><code class="value">1</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">9</code> <code class="plain">},</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">10</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">13</code> <code class="plain">},</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code><code class="value">12</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">15</code> <code class="plain">} };</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">8</code><code class="plain">;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"8th smallest element is "</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(matrix, k));</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="comments">// This code is contributed by tapeshdua420.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>8th smallest element is 13








</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log(k)*n</span><sup><span>2</span></sup><span>)&nbsp;&nbsp;</span><br><b><strong>Auxiliary Space: </strong></b><span>O(n)</span></p>
 <p dir="ltr"><span> </span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-a-pair-with-the-given-difference/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-a-pair-with-the-given-difference/?ref=lbp">Find a pair with the given difference</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find common elements in three sorted arrays</div> --> 
  <h1>Find common elements in three sorted arrays</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["MAQ Software"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given three Sorted arrays in non-decreasing order, print all common elements in these arrays.</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input</strong></b><span>:&nbsp;</span><br><span>ar1[] = {1, 5, 10, 20, 40, 80}&nbsp;</span><br><span>ar2[] = {6, 7, 20, 80, 100}&nbsp;</span><br><span>ar3[] = {3, 4, 15, 20, 30, 70, 80, 120}&nbsp;</span><br><b><strong>Output</strong></b><span>: 20, 80</span></p>
  <p dir="ltr"><b><strong>Input</strong></b><span>:&nbsp;</span><br><span>ar1[] = {1, 5, 5}&nbsp;</span><br><span>ar2[] = {3, 4, 5, 5, 10}&nbsp;</span><br><span>ar3[] = {5, 5, 10, 20}&nbsp;</span><br><b><strong>Output</strong></b><span>: 5, 5</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/common-elements1132/1/">Common elements</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/common-elements1132/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><b><strong>Common elements in three sorted arrays using two pointer:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span> A simple solution is to first find the </span><a href="https://www.geeksforgeeks.org/union-and-intersection-of-two-sorted-arrays-2/"><span>intersection of two arrays </span></a><span>and store the intersection in a temporary array, then find the intersection of the third array and temporary array.&nbsp;</span></p>
 </blockquote>
 <ul>
  <li value="1"><span>Initialize both pointers i and j to 0, and an empty list common.</span></li>
  <li value="2"><span>While both pointers i and j are within the bounds of the two arrays:</span>
   <ul>
    <li value="1"><span> If arr1[i] is less than arr2[j], increment i by 1.</span></li>
    <li value="2"><span>If arr2[j] is less than arr1[i], increment j by 1.</span></li>
    <li value="3"><span>If arr1[i] is equal to arr2[j]:</span></li>
    <li value="4"><span>Add arr1[i] to the common list.</span></li>
    <li value="5"><span>Increment both i and j by 1.</span></li>
   </ul></li>
  <li value="3"><span>Return the common list containing the common elements of the two arrays.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_274884" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the intersection of two arrays</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findIntersection(</code><code class="keyword">int</code><code class="plain">[] arr1, </code><code class="keyword">int</code><code class="plain">[] arr2,</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] temp, </code><code class="keyword">int</code> <code class="plain">m, </code><code class="keyword">int</code> <code class="plain">n,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] k)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">, j = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Loop to find the intersection of arr1[] and</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// arr2[]</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; m &amp;&amp; j &lt; n) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ith element can't be a common element</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr1[i] &lt; arr2[j]) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// jth element can't be a common element</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr2[j] &lt; arr1[i]) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if arr1[i] == arr2[j]</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[k[</code><code class="value">0</code><code class="plain">]] = arr1[i];</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k[</code><code class="value">0</code><code class="plain">]++;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr1 = { </code><code class="value">1</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">80</code> <code class="plain">};</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr2 = { </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">80</code><code class="plain">, </code><code class="value">100</code> <code class="plain">};</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr3 = { </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">70</code><code class="plain">, </code><code class="value">80</code><code class="plain">, </code><code class="value">120</code> <code class="plain">};</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n1 = arr1.length;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n2 = arr2.length;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n3 = arr3.length;</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// temp array to store the common elements of arr1</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and arr2 arrays</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] temp = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[</code><code class="value">200000</code><code class="plain">];</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ans array to store the common elements of temp</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and arr3 arrays</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] ans = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[</code><code class="value">200000</code><code class="plain">];</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] k = {</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">0</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}; </code><code class="comments">// Mutable integer to simulate pass-by-reference</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function call to find the temp array</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findIntersection(arr1, arr2, temp, n1, n2, k);</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">tempSize = k[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k[</code><code class="value">0</code><code class="plain">] = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function call to find the ans array</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findIntersection(arr3, temp, ans, n3, tempSize, k);</code>
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Common elements present in arrays are :"</code><code class="plain">);</code>
           </div>
           <div class="line number66 index65 alt1">
             &nbsp; 
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing the common elements</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k[</code><code class="value">0</code><code class="plain">]; i++) {</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(ans[i] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println();</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number73 index72 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <pre>Common elements present in arrays are : 
20 80 









</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity:</strong></b><span> O(n1 + n2 + n3), where n1, n2 and n3 are sizes of ar1[], ar2[] and ar3[] respectively.</span><br><b><strong>Auxiliary Space: </strong></b><span>O(max(n1,n2,n3))</span></p>
 <h2><b><strong>Common elements in three sorted arrays using three pointer:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span>It is known that the arrays are sorted in a non-decreasing order. When a common integer has been found, we want to move forward in each array in search of another common integer. Otherwise, the smaller integer among the three must not be common.</span></p>
  <p dir="ltr"><span>The reason for this is that at least one of the other integers is a larger integer, and as we move forward in the array, we only encounter larger integers. In this case, we want to proceed with only the array that contains the smaller integer.</span></p>
 </blockquote>
 <ul>
  <li value="1"><span>Create and initialize three variables </span><b><strong>i, j,</strong></b><span> and </span><b><strong>k </strong></b><span>with </span><b><strong>0</strong></b><span>, it will point to the indices of the arrays.</span></li>
  <li value="2"><span>Repeat the following steps until we reach the end of any one of the arrays:</span>
   <ul>
    <li value="1"><span>Check whether the integers appointed by </span><b><strong>i, j,</strong></b><span> and </span><b><strong>k</strong></b><span> are equal or not.</span></li>
    <li value="2"><span>If they are equal, print any of the integers and increase </span><b><strong>i, j, </strong></b><span>and </span><b><strong>k</strong></b><span> by </span><b><strong>1</strong></b><span>.</span></li>
    <li value="3"><span>Otherwise, increase the index that points to the smaller integer by </span><b><strong>1</strong></b><span>.</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <p dir="ltr"><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190704124815/FindCommonElementsinThreeSortedArrays.png" alt="common elements in three sorted arrays" width="inherit" height="inherit"></p>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_10295" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find common elements in three arrays</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">FindCommon {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function prints common elements in ar1</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">findCommon(</code><code class="keyword">int</code> <code class="plain">ar1[], </code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">ar3[])</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize starting indexes for ar1[], ar2[] and</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ar3[]</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">, j = </code><code class="value">0</code><code class="plain">, k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Iterate through three arrays while all arrays</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// have elements</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; ar1.length &amp;&amp; j &lt; ar2.length</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; k &lt; ar3.length) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x = y and y = z, print any of them and</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// move ahead in all arrays</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar1[i] == ar2[j] &amp;&amp; ar2[j] == ar3[k]) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(ar1[i] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k++;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// x &lt; y</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(ar1[i] &lt; ar2[j])</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// y &lt; z</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(ar2[j] &lt; ar3[k])</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We reach here when x &gt; y and z &lt; y, i.e., z</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is smallest</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k++;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code to test above</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">FindCommon ob = </code><code class="keyword">new</code> <code class="plain">FindCommon();</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">80</code> <code class="plain">};</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = { </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">80</code><code class="plain">, </code><code class="value">100</code> <code class="plain">};</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar3[] = { </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">70</code><code class="plain">, </code><code class="value">80</code><code class="plain">, </code><code class="value">120</code> <code class="plain">};</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Common elements are "</code><code class="plain">);</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ob.findCommon(ar1, ar2, ar3);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="comments">/*This code is contributed by Rajat Mishra */</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Common Elements are 20 80 








</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity</strong></b><span>: O(n1 + n2 + n3), In the worst case, the largest-sized array may have all small elements and the middle-sized array has all middle elements.</span><br><b><strong>Auxiliary Space: &nbsp;</strong></b><span>O(1)</span></p>
 <p dir="ltr"><span>This article is compiled by </span><b><strong>Rahul Gupta</strong></b><span> </span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/kth-smallest-element-in-a-row-wise-and-column-wise-sorted-2d-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/kth-smallest-element-in-a-row-wise-and-column-wise-sorted-2d-array/?ref=lbp">Kth smallest element in a row-wise and column-wise sorted 2D array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Ceiling in a sorted array</div> --> 
  <h1>Ceiling in a sorted array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given a sorted array and a value x, the ceiling of x is the smallest element in an array greater than or equal to x, and the floor is the greatest element smaller than or equal to x. Assume that the array is sorted in non-decreasing order. Write efficient functions to find the floor and ceiling of x.&nbsp;<br><strong>Examples :</strong>&nbsp;</p>
 <pre>For example, let the input array be {1, 2, 8, 10, 10, 12, 19}
For x = 0:    floor doesn't exist in array,  ceil  = 1
For x = 1:    floor  = 1,  ceil  = 1
For x = 5:    floor  = 2,  ceil  = 8
For x = 20:   floor  = 19,  ceil doesn't exist in array</pre>
 <p>In the below methods, we have implemented only ceiling search functions. Floor search can be implemented in the same way.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p><strong>Method 1 (Linear Search)</strong>&nbsp;<br>Algorithm to search ceiling of x:&nbsp;</p>
 <ol>
  <li>If x is smaller than or equal to the first element in the array then return 0(index of the first element).</li>
  <li>Else linearly search for an index i such that x lies between arr[i] and arr[i+1].&nbsp;</li>
  <li>If we do not find an index i in step 2, then return -1.&nbsp;</li>
 </ol>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_213928" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number2 index1 alt1"><code class="plain">{</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to get index of ceiling </code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">of x in arr[low..high] */</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">ceilSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is smaller than or equal to first </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element,then return the first element */</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(x &lt;= arr[low])</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;&nbsp; </code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Otherwise, linearly search for ceil value */</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(i = low; i &lt; high; i++)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(arr[i] == x)</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* if x lies between arr[i] and arr[i+1] </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">including arr[i+1], then return arr[i+1] */</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(arr[i] &lt; x &amp;&amp; arr[i+</code><code class="value">1</code><code class="plain">] &gt;= x)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i+</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If we reach here then x is greater than the </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">last element of the array,&nbsp; return -1 in this case */</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to check above functions */</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">19</code><code class="plain">};</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = ceilSearch(arr, </code><code class="value">0</code><code class="plain">, n-</code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(index == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Ceiling of "</code><code class="plain">+x+</code><code class="string">" doesn't exist in array"</code><code class="plain">);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"ceiling of "</code><code class="plain">+x+</code><code class="string">" is "</code><code class="plain">+arr[index]);</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp; </code>
           </div>
           <div class="line number44 index43 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>ceiling of 3 is 8</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(n),&nbsp;<br><strong>Auxiliary Space: </strong>O(1)</p>
 <p><strong>Method 2 (Binary Search)</strong>&nbsp;</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p>Instead of using linear search, binary search is used here to find out the index. Binary search reduces the time complexity to O(Logn).&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_741224" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">CeilSearch {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to get index of ceiling of x in arr[low..high]</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">ceilSearch(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code><code class="keyword">int</code> <code class="plain">x) {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid;</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is smaller than or equal to the first element,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then return the first element */</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &lt;= arr[low])</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is greater than the last element,</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then return -1 */</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &gt; arr[high])</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* get the index of middle element of arr[low..high]*/</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">; </code><code class="comments">/* low + (high - low)/2 */</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is same as middle element,</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then return mid */</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == x)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is greater than arr[mid],</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then either arr[mid + 1] is ceiling of x</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">or ceiling lies in arr[mid+1...high] */</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[mid] &lt; x) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid + </code><code class="value">1</code> <code class="plain">&lt;= high &amp;&amp; x &lt;= arr[mid + </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ceilSearch(arr, mid + </code><code class="value">1</code><code class="plain">, high, x);</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is smaller than arr[mid],</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then either arr[mid] is ceiling of x</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">or ceiling lies in arr[low...mid-1] */</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid - </code><code class="value">1</code> <code class="plain">&gt;= low &amp;&amp; x &gt; arr[mid - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ceilSearch(arr, low, mid - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">19</code><code class="plain">};</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">20</code><code class="plain">;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = ceilSearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Ceiling of "</code> <code class="plain">+ x + </code><code class="string">" doesn't exist in array"</code><code class="plain">);</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"ceiling of "</code> <code class="plain">+ x + </code><code class="string">" is "</code> <code class="plain">+ arr[index]);</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Ceiling of 20 doesn't exist in array </pre>
 </div>
 <p><strong>Time Complexity:</strong> O(log(n)),&nbsp;<br><strong>Auxiliary Space:</strong> O(1)</p>
 <p><strong>Another Implementation of Method 2 :</strong></p>
 <p>As like previous method here also binary search is being used but the code logic is different instead of lots of if else check i will simply return and lets understand through below steps :</p>
 <p>Step 1 : { low-&gt;1, 2, 8, 10&lt;-mid, 10, 12, 19&lt;-high};</p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <pre>if( x &lt; mid) yes set high = mid -1;</pre>
 <p>Step 2 : { low -&gt;1, 2 &lt;-mid, 8 &lt;-high, 10, 10, 12, 19};</p>
 <pre>if( x &lt; mid) no set low = mid + 1;</pre>
 <p>Step 3 : {1, 2, 8&lt;-high,low,mid, &nbsp;10, 10, 12, 19};</p>
 <pre>if( x == mid ) yes return mid  
if(x &lt; mid ) no low = mid + 1</pre>
 <p>Step 4 &nbsp;: {1, 2, 8&lt;-high,mid, 10&lt;-low, 10, 12, 19};</p>
 <pre>check while(low =&lt;  high)</pre>
 <p>condition break and return low which is my ceiling of &nbsp;target.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_297111" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to get index of</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">ceiling of x in arr[low..high]*/</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">ceilSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high,</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// base condition if length of arr == 0 then return</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// -1</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x == </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* this while loop function will run until condition</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">not break once condition break loop will return</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">start and ans is low which will be next smallest</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">greater than target which is ceiling*/</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= low + (high - low) / </code><code class="value">2</code><code class="plain">; </code><code class="comments">// calculate mid</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x == arr[mid]) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &lt; arr[mid]) {</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* step 1 : { low = 1, 2, 8, 10= mid, 10, 12, 19= high};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if( x &lt; mid) yes set high = mid -1;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">step 2 : { low = 1, 2 = mid, 8 = high, 10, 10, 12, 19};</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if( x &lt; mid) no set low = mid + 1;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">step 3 : {1, 2, 8 = high,low,low,&nbsp; 10, 10, 12, 19};</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if( x == mid ) yes return mid</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if(x &lt; mid ) no low = mid + 1</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">step 4&nbsp; : {1, 2, 8 = high,mid, 10 = low, 10, 12, 19};</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">check while(low &lt; = high)</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">condition break and return low which will</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">next greater of target */</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to check above functions */</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">19</code> <code class="plain">};</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">8</code><code class="plain">;</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = ceilSearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Ceiling of "</code> <code class="plain">+ x</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" doesn't exist in array"</code><code class="plain">);</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"ceiling of "</code> <code class="plain">+ x + </code><code class="string">" is "</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[index]);</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Ceiling of 8 is 8</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(log(n)), where <strong>n </strong>is the length of the given array,&nbsp;<br><strong>Auxiliary Space:</strong> O(1)</p>
 <p><strong>Method</strong> &nbsp;Using C++ STL &nbsp;<a href="https://www.geeksforgeeks.org/lower_bound-in-cpp/"><strong>lower_bound</strong></a></p>
 <p>The lower_bound() method in C++ is used to return an iterator pointing to the first element in the range [first, last) which has a value not less than val. This means that the function returns an iterator pointing to the next smallest number just greater than or equal to that number. If there are multiple values that are equal to val, lower_bound() returns the iterator of the first such value.</p>
 <p>Simpler and Shorter code :&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_947638" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">19</code> <code class="plain">};</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">8</code><code class="plain">;</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Use binary search to find the index of the</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ceiling element</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">idx = Arrays.binarySearch(arr, x);</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(idx &lt; </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">idx = Math.abs(idx) - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking if idx is valid</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(idx == n) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Ceiling Element does not exist"</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Ceiling Element of "</code> <code class="plain">+ x</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is "</code> <code class="plain">+ arr[idx]);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="comments">// This code is contributed by phasing17</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
  <pre>Ceil Element of 8 is 8</pre>
 </div>
 <p><strong>Time Complexity</strong>: O(log(n)), where n is the length of the given array,&nbsp;<br><strong>Auxiliary Space</strong>: O(1)</p>
 <p>https://www.youtube.com/watch?v=Nzm9emAkSCM</p>
 <p style="text-align:justify"><strong>Related Articles:</strong>&nbsp;</p>
 <p style="text-align:justify"><a href="https://www.geeksforgeeks.org/floor-in-a-sorted-array/">Floor in a Sorted Array</a>&nbsp;<br><a href="https://www.geeksforgeeks.org/find-floor-ceil-unsorted-array/">Find floor and ceil in an unsorted array</a></p>
 <p style="text-align:justify">Please write comments if you find any of the above codes/algorithms incorrect, find better ways to solve the same problem, or want to share code for floor implementation.</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-common-elements-three-sorted-arrays/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-common-elements-three-sorted-arrays/?ref=lbp">Find common elements in three sorted arrays</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Floor in a Sorted Array</div> --> 
  <h1>Floor in a Sorted Array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon"]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given a sorted array and a value <strong>x</strong>, the floor of x is the largest element in the array smaller than or equal to x. Write efficient functions to find the floor of x</p>
 <p><strong>Examples:</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input:</strong> arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 5<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> 2 is the largest element in&nbsp;<br>arr[] smaller than 5</p>
  <p><strong>Input:</strong> arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 20<br><strong>Output:</strong> 19<br><strong>Explanation:</strong> 19 is the largest element in<br>arr[] smaller than 20</p>
  <p><strong>Input :</strong> arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 0<br><strong>Output :</strong> -1<br><strong>Explanation:</strong> Since floor doesn’t exist, output is -1.</p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/floor-in-a-sorted-array-1587115620/1/">Floor in a Sorted Array</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/floor-in-a-sorted-array-1587115620/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p><strong><u>Naive Approach:</u></strong> To solve the problem follow the below idea:</p>
 <blockquote>
  <p>The idea is simple, traverse through the array and find the first element greater than x. The element just before the found element is the floor of x</p>
 </blockquote>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p>Follow the given steps to solve the problem:</p>
 <ul>
  <li>Traverse through the array from start to end.</li>
  <li>If the current element is greater than x print the previous number and break out of the loop</li>
  <li>If there is no number greater than x then print the last element</li>
  <li>If the first number is greater than x then print that the floor of x doesn’t exist</li>
 </ul>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_107243" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find floor of</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// a given number in a sorted array</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* An inefficient function to get index of floor</code>
           </div>
           <div class="line number10 index9 alt1"><code class="comments">of x in arr[0..n-1] */</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">floorSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If last element is smaller than x</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &gt;= arr[n - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If first element is greater than x</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &lt; arr[</code><code class="value">0</code><code class="plain">])</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Linearly search for the first element</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// greater than x</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; x)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(i - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">14</code> <code class="plain">};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">7</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = floorSearch(arr, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Floor of "</code> <code class="plain">+ x</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" doesn't exist in array "</code><code class="plain">);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Floor of "</code> <code class="plain">+ x + </code><code class="string">" is "</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[index]);</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1"><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="comments">// This code is contributed</code>
           </div>
           <div class="line number47 index46 alt2"><code class="comments">// by Akanksha Rai(Abby_akku)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Floor of 7 is 6</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N).&nbsp;To traverse an array only one loop is needed.<br><strong>Auxiliary Space:</strong> O(1).&nbsp;No extra space is required</p>
 <h2><u>Floor in a Sorted Array using binary search:</u></h2>
 <p>To solve the problem follow the below idea:</p>
 <blockquote>
  <p>There is a catch in the problem, the given array is sorted. The idea is to use <a href="https://www.geeksforgeeks.org/binary-search/">Binary Search</a> to find the floor of a number <i>x</i> in a sorted array by comparing it to the middle element and dividing the search space into half</p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 </blockquote>
 <p>Follow the given steps to solve the problem:</p>
 <ul>
  <li>The algorithm can be implemented recursively or through iteration, but the basic idea remains the same.</li>
  <li>There are some base cases to handle&nbsp; 
   <ul>
    <li>If there is no number greater than x then print the last element</li>
    <li>If the first number is greater than x then print -1</li>
   </ul></li>
  <li>create three variables <i>low = 0</i>, mid and <i>high = n-1</i> and another variable to store the answer</li>
  <li>Run a loop or recurse until and unless low is less than or equal to high.</li>
  <li>check if the middle (<i> </i>(low + high) /2) element is less than x, if yes then update the low, i.e low = mid + 1, and update the answer with the middle element. In this step we are reducing the search space to half.</li>
  <li>Else update the high , i.e high = mid – 1</li>
  <li>Print the answer</li>
 </ul>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_205020" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find floor of</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// a given number in a sorted array</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to get index of floor of x in</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">arr[low..high] */</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">floorSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If low and high cross each other</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(low &gt; high)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If last element is smaller than x</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &gt;= arr[high])</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">high;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the middle point</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If middle point is floor.</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == x)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x lies between mid-1 and mid</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; arr[mid - </code><code class="value">1</code><code class="plain">] &lt;= x &amp;&amp; x &lt; arr[mid])</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is smaller than mid, floor</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// must be in left half.</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x &lt; arr[mid])</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">floorSearch(arr, low, mid - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If mid-1 is not floor and x is</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// greater than arr[mid],</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">floorSearch(arr, mid + </code><code class="value">1</code><code class="plain">, high, x);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">14</code> <code class="plain">};</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">7</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = floorSearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Floor of "</code> <code class="plain">+ x</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" doesn't exist in array "</code><code class="plain">);</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Floor of "</code> <code class="plain">+ x + </code><code class="string">" is "</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[index]);</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="comments">// This code is contributed by Prerna Saini</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Floor of 7 is 6</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(log N).&nbsp;To run a binary search.<br><strong>Auxiliary Space:</strong> O(1).&nbsp;As no extra space is required.</p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/ceiling-in-a-sorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/ceiling-in-a-sorted-array/?ref=lbp">Ceiling in a sorted array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the maximum element in an array which is first increasing and then decreasing</div> --> 
  <h1>Find the maximum element in an array which is first increasing and then decreasing</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Adobe","Amazon","Goldman Sachs","Microsoft","Paytm","Walmart"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array of integers which is initially increasing and then decreasing, find the maximum value in the array.&nbsp;</span><br><b><strong>Examples :</strong></b><span>&nbsp;</span></p>
 <pre><span>Input: arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1}</span><br><span>Output: 500</span><br><span>Input: arr[] = {1, 3, 50, 10, 9, 7, 6}</span><br><span>Output: 50</span><br><span>Corner case (No decreasing part)</span><br><span>Input: arr[] = {10, 20, 30, 40, 50}</span><br><span>Output: 50</span><br><span>Corner case (No increasing part)</span><br><span>Input: arr[] = {120, 100, 80, 20, 0}</span><br><span>Output: 120</span><br><br></pre>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/maximum-value-in-a-bitonic-array3001/1/">Bitonic Point</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/maximum-value-in-a-bitonic-array3001/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Method 1 (Linear Search)</strong></b><span>: We can traverse the array and keep track of maximum and element. And finally return the maximum element.&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><b><strong>Implementation:</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_52084" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// java program to find maximum</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// element</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number5 index4 alt2"><code class="plain">{&nbsp;&nbsp; </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to find the </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// maximum element</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMaximum(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = arr[low];</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = low; i &lt;= high; i++)</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; max)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = arr[i];</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">max;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">60</code><code class="plain">, </code><code class="value">70</code><code class="plain">, </code><code class="value">23</code><code class="plain">, </code><code class="value">20</code><code class="plain">};</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The maximum element is "</code><code class="plain">+ </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findMaximum(arr, </code><code class="value">0</code><code class="plain">, n-</code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The maximum element is 70





</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity :</strong></b><span> O(n)</span></p>
 <p dir="ltr"><b><strong>Auxiliary Space</strong></b><span>: O(1)</span></p>
 <p dir="ltr"><b><strong>Method 2 (Binary Search – Recursive Solution)</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><span>The iterative approach of Binary search to find the maximum element in an array which is first increasing and then decreasing.</span><br><span>The standard binary search approach can be modified in the following ways :-</span></p>
 <ol>
  <li value="1"><span>If the mid element is greater than both of its adjacent elements, then mid is the maximum.</span></li>
  <li value="2"><span>If the mid element is smaller than its next element then we should try to search on the right half of the array. So, make, </span><b><strong>low = mid + 1. </strong></b><span>Example array : {2, 4, 6, 8, 10, 3, 1}</span></li>
  <li value="3"><span>If the mid element is greater than the next element, similarly we should try to search on the left half. So, make, </span><b><strong>high = mid – 1. </strong></b><span>Example array:</span><b><strong> </strong></b><span>{3, 50, 10, 9, 7, 6}&nbsp;</span></li>
 </ol>
 <p dir="ltr"><b><strong>Implementation:</strong></b><span>&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_833015" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// java program to find maximum</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// element</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number5 index4 alt2"><code class="plain">{&nbsp;&nbsp; </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to find the </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// maximum element</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMaximum(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Base Case: Only one element is </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">present in arr[low..high]*/</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(low == high)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[low];</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are two elements and </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">first is greater than the first </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element is maximum */</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((high == low + </code><code class="value">1</code><code class="plain">) &amp;&amp; arr[low] &gt;= arr[high])</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[low];</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are two elements and </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">second is greater than the second </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element is maximum */</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((high == low + </code><code class="value">1</code><code class="plain">) &amp;&amp; arr[low] &lt; arr[high])</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[high];</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*low + (high - low)/2;*/</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high)/</code><code class="value">2</code><code class="plain">;&nbsp;&nbsp; </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If we reach a point where arr[mid] </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">is greater than both of its adjacent </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements arr[mid-1] and arr[mid+1], </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then arr[mid] is the maximum element*/</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">( arr[mid] &gt; arr[mid + </code><code class="value">1</code><code class="plain">] &amp;&amp; arr[mid] &gt; arr[mid - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[mid];</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[mid] is greater than the next </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element and smaller than the previous </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element then maximum lies on left side </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">of mid */</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &gt; arr[mid + </code><code class="value">1</code><code class="plain">] &amp;&amp; arr[mid] &lt; arr[mid - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findMaximum(arr, low, mid-</code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findMaximum(arr, mid + </code><code class="value">1</code><code class="plain">, high);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">6</code><code class="plain">};</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The maximum element is "</code><code class="plain">+ </code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findMaximum(arr, </code><code class="value">0</code><code class="plain">, n-</code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The maximum element is 50





</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity :</strong></b><span> O(logn)</span></p>
 <p dir="ltr"><b><strong>Auxiliary Space :</strong></b><span> O(logn)</span><br><span>This method works only for distinct numbers. For example, it will not work for an array like {0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 3, 3, 2, 2, 1, 1}.&nbsp;</span><br><span></span><br><span>&nbsp;</span></p>
 <p dir="ltr"><b><strong>Method 3</strong></b><span> </span><b><strong>(Binary Search – Iterative Solution)&nbsp;</strong></b></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <p dir="ltr"><span>The iterative approach of Binary search to find the maximum element in an array which is first increasing and then decreasing.</span><br><span>The standard binary search approach can be modified in the following ways :-</span></p>
 <ol>
  <li value="1"><span>&nbsp;If the mid element is greater than both of its adjacent elements, then mid is the maximum.</span></li>
  <li value="2"><span>&nbsp;If the mid element is smaller than its next element then we should try to search on the right half of the array. So, make, </span><b><strong>low = mid + 1 </strong></b><span>.Example array : {2, 4, 6, 8, 10, 3, 1}</span></li>
  <li value="3"><span>&nbsp;If the mid element is greater than the next element, similarly we should try to search on the left half. So, make, </span><b><strong>high = mid – 1.</strong></b><span> Example array : {3, 50, 10, 9, 7, 6}&nbsp;</span></li>
 </ol>
 <p dir="ltr"><b><strong>Implementation:</strong></b><span>&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_401442" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">GFG{</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">maxInBitonic(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r) {</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = l + (r - l) / </code><code class="value">2</code><code class="plain">; </code><code class="comments">// m = (l + r) / 2</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="preprocessor">/****Base Cases Starts*****/</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(l==r)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[l];</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are two elements and first is greater</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then the first element is maximum */</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((r == l + </code><code class="value">1</code><code class="plain">) &amp;&amp; arr[l] &gt;= arr[r])</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[l];</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are two elements and second is greater</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then the second element is maximum */</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((r == l + </code><code class="value">1</code><code class="plain">) &amp;&amp; arr[l] &lt; arr[r])</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[r];</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If we reach a point where arr[mid] is greater</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">than both of its adjacent elements arr[mid-1] and</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">arr[mid+1], then arr[mid] is the maximum</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element*/</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[m] &gt; arr[m + </code><code class="value">1</code><code class="plain">] &amp;&amp; arr[m] &gt; arr[m - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[m];</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/****Base Case ends *****/</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// move to left with l and r=m-1</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[m] &gt; arr[m + </code><code class="value">1</code><code class="plain">] &amp;&amp; arr[m] &lt; arr[m - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = m - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = m + </code><code class="value">1</code><code class="plain">; </code><code class="comments">// move to right with l=m+1 and r</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if we reach here, then element was</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// not present</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="comments">// Driver function</code>
           </div>
           <div class="line number50 index49 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">{</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"The maximum element is "</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ maxInBitonic(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number56 index55 alt1"><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2"><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1">
             &nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="comments">// This code is contributed by todaysgaurav </code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The maximum element is 50





</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log n)</span></p>
 <p dir="ltr"><b><strong>Auxiliary Space: </strong></b><span>O(1)</span></p>
 <p dir="ltr"><b><strong>Method 4 (Using Stack) :</strong></b></p>
 <pre><span>1.Create an empty stack to hold the indices of the array elements.</span><br><span>2.Traverse the array from left to right until we find the maximum element. Push the index of each element onto the </span><br><span> stack as long as the element is less than or equal to the previous element.</span><br><span>3.Once we find an element that is greater than the previous element, we know that the maximum element has been</span><br><span> reached. We can then pop all the indices from the 4.stack until we find an index whose corresponding element </span><br><span> is greater than the current element.</span><br><span>4.The maximum element is the element corresponding to the last index remaining on the stack.</span><br><br></pre>
 <p dir="ltr"><b><strong>Implementation of above approach :</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_46833" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Stack;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMax(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Stack&lt;Integer&gt; s = </code><code class="keyword">new</code> <code class="plain">Stack&lt;&gt;();</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// traverse the array from left to right</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// push the index onto the stack if the element</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is less than or equal to the previous element</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(s.empty() || arr[i] &lt;= arr[s.peek()]) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.push(i);</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pop all the indices from the stack until</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we find an index whose corresponding</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element is greater than the current</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!s.empty()</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; arr[i] &gt; arr[s.peek()]) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = s.peek();</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.pop();</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// update the maximum element</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[index] &gt; max) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = arr[index];</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// push the current index onto the stack</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.push(i);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the maximum element is the element corresponding</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to the last index remaining on the stack</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!s.empty()) {</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = s.peek();</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.pop();</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[index] &gt; max) {</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = arr[index];</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">max;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The maximum element is "</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ findMax(arr, n));</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The maximum element is 50





</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity : O(n)</strong></b><br><b><strong>Auxiliary Space : O(n)&nbsp;</strong></b></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/floor-in-a-sorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/floor-in-a-sorted-array/?ref=lbp">Floor in a Sorted Array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Given Array of size n and a number k, find all elements that appear more than n/k times</div> --> 
  <h1>Given Array of size n and a number k, find all elements that appear more than n/k times</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given an array of size n and an integer k, find all elements in the array that appear more than n/k times.&nbsp;</p>
 <p><strong>Examples:</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input: </strong>arr[] = {3, 1, 2, 2, 1, 2, 3, 3}, k = 4<br><strong>Output:</strong> {2, 3}<br><strong>Explanation:</strong> Here n/k is 8/4 = 2, therefore 2 appears 3 times in the array that is greater than 2 and 3 appears 3 times in the array that is greater than 2</p>
  <p><strong>Input: </strong>arr[] = {9, 8, 7, 9, 2, 9, 7}, k = 3<br><strong>Output:</strong> {9}<br><strong>Explanation:</strong> Here n/k is 7/3 = 2, therefore 9 appears 3 times in the array that is greater than 2.</p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Problem 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/count-element-occurences/1">Please solve it on PRACTICE first, before moving on to the solution&nbsp;</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/count-element-occurences/1">Solve Problem</a>
   </div>
  </div>
 </div>
 <h2><strong>Find all elements that appear more than n/k times using </strong><a href="https://www.geeksforgeeks.org/introduction-to-hashing-data-structure-and-algorithm-tutorials/"><strong>Hashing</strong></a><strong>:</strong></h2>
 <blockquote>
  <p>The idea is to pick all elements one by one. For every picked element, count its occurrences by traversing the array, if count becomes more than n/k, then print the element.</p>
 </blockquote>
 <p>Follow the steps below to solve the problem:</p>
 <ul>
  <li>First, make a frequency map of all the elements in the array</li>
  <li>Then traverse the map and check the frequency of every element</li>
  <li>If the frequency is greater than n/k then print the element.</li>
 </ul>
 <p>Below is the implementation of the above approach:</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_652566" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java Code to find elements whose</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// frequency is more than n/k</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">morethanNdK(</code><code class="keyword">int</code> <code class="plain">a[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = n / k;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Hash map initialization</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HashMap&lt;Integer, Integer&gt; y = </code><code class="keyword">new</code> <code class="plain">HashMap&lt;&gt;();</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// count the frequency of each element.</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is element doesn't exist in hash table</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(!y.containsKey(a[i]))</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y.put(a[i], </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if element does exist in the hash table</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = y.get(a[i]);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">y.put(a[i], count + </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// iterate over each element in the hash table</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and check their frequency, if it is more than</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// n/k, print it.</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(Map.Entry m : y.entrySet()) {</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer temp = (Integer)m.getValue();</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp &gt; x)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(m.getKey());</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a[] = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[] { </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">4</code><code class="plain">,</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">12</code><code class="plain">;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">morethanNdK(a, n, k);</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>2
1</pre>
 </div>
 <div>
   &nbsp; 
 </div>
 <p><strong>Time Complexity:</strong> O(N), Traversing the array of size N.<br><strong>Auxiliary Space:</strong> O(N), Space occupied by the hashmap</p>
 <h2><strong>Find all elements that appear more than n/k times using </strong><a href="https://www.geeksforgeeks.org/boyer-moore-majority-voting-algorithm/"><strong>Moore’s Voting Algorithm</strong></a><strong>:</strong></h2>
 <blockquote>
  <p>The idea is to apply <strong>Moore’s Voting algorithm, </strong>as there can be at max <strong>k – 1</strong> elements present in the array which appears more than <strong>n/k</strong> times so their will be <strong>k – 1</strong> candidates. When we encounter an element which is one of our candidates then increment the count else decrement the count.</p>
 </blockquote>
 <p><strong>Illustration:</strong></p>
 <blockquote>
  <p>Consider k = 4, n = 9&nbsp;<br>Given array: 3 1 2 2 2 1 4 3 3&nbsp;</p>
  <p><strong>i = 0</strong><br>temp[] has one element {3} with count 1</p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <p><strong>i = 1</strong><br>temp[] has two elements {3, 1} with counts 1 and 1 respectively</p>
  <p><strong>i = 2</strong><br>temp[] has three elements, {3, 1, 2} with counts as 1, 1 and 1 respectively.</p>
  <p><strong>i = 3</strong><br>temp[] has three elements, {3, 1, 2} with counts as 1, 1 and 2 respectively.</p>
  <p><strong>i = 4</strong><br>temp[] has three elements, {3, 1, 2} with counts as 1, 1 and 3 respectively.</p>
  <p><strong>i = 5</strong><br>temp[] has three elements, {3, 1, 2 with counts as 1, 2 and 3 respectively.</p>
  <p><strong>i = 6</strong><br>temp[] has two elements, {1, 2} with counts as 1 and 2 respectively.</p>
  <p><strong>i = 7</strong><br>temp[] has three elements, {3, 1, 2} with counts as 1, 1 and 2 respectively.</p>
  <p><strong>i = 8&nbsp;</strong><br>temp[] has three elements, {3, 1, 2} with counts as 2, 1 and 2 respectively.</p>
 </blockquote>
 <p>Follow the steps below to solve the problem:</p>
 <ul>
  <li>Create a temporary array of size (<strong>k – 1</strong>) to store elements and their counts (The output elements are going to be among these k-1 elements).</li>
  <li>Traverse through the input array and update temp[] (add/remove an element or increase/decrease count) for every traversed element. The array temp[] stores potential (k-1) candidates at every step.</li>
  <li>Iterate through final (k-1) potential candidates (stored in temp[]). or every element, check if it actually has counted of more than n/k.</li>
 </ul>
 <p>&nbsp;Below is the implementation of the above approach.&nbsp;</p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_244269" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Java program to print elements with count more than n/k</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A structure to store an element and its current count</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">eleCount {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">e; </code><code class="comments">// Element</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">c; </code><code class="comments">// Count</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Prints elements with more</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// than n/k occurrences in arr[]</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of size n. If there are no</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// such elements, then it prints</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// nothing.</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">moreThanNdK(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// k must be greater than</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1 to get some output</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(k &lt; </code><code class="value">2</code><code class="plain">)</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Step 1: Create a temporary</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">array (contains element</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">and count) of size k-1.</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Initialize count of all</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements as 0 */</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">eleCount[] temp = </code><code class="keyword">new</code> <code class="plain">eleCount[k - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k - </code><code class="value">1</code><code class="plain">; i++)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[i] = </code><code class="keyword">new</code> <code class="plain">eleCount();</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[i].c = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Step 2: Process all</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements of input array */</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j;</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[i] is already present in</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">the element count array,</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then increment its count</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">*/</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(j = </code><code class="value">0</code><code class="plain">; j &lt; k - </code><code class="value">1</code><code class="plain">; j++) {</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp[j].e == arr[i]) {</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[j].c += </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[i] is not present in temp[] */</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(j == k - </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l;</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there is position available</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">in temp[], then place arr[i] in</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">the first available position and</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">set count as 1*/</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(l = </code><code class="value">0</code><code class="plain">; l &lt; k - </code><code class="value">1</code><code class="plain">; l++) {</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp[l].c == </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[l].e = arr[i];</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[l].c = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If all the position in the</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">temp[] are filled, then decrease</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">count of every element by 1 */</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(l == k - </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(l = </code><code class="value">0</code><code class="plain">; l &lt; k - </code><code class="value">1</code><code class="plain">; l++)</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp[l].c -= </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number76 index75 alt1">
             &nbsp; 
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*Step 3: Check actual counts of</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">* potential candidates in temp[]*/</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number80 index79 alt1">
             &nbsp; 
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calculate actual count of elements</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ac = </code><code class="value">0</code><code class="plain">; </code><code class="comments">// actual count</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">; j &lt; n; j++)</code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] == temp[i].e)</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ac++;</code>
           </div>
           <div class="line number86 index85 alt1">
             &nbsp; 
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If actual count is more than n/k,</code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// then print it</code>
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ac &gt; n / k)</code>
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Number:"</code> <code class="plain">+ temp[i].e</code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" Count:"</code> <code class="plain">+ ac + </code><code class="string">"\n"</code><code class="plain">);</code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number94 index93 alt1">
             &nbsp; 
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver code */</code>
           </div>
           <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr1[] = { </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">4</code> <code class="plain">};</code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">size = arr1.length;</code>
           </div>
           <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">moreThanNdK(arr1, size, k);</code>
           </div>
           <div class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number103 index102 alt2"><code class="plain">}</code>
           </div>
           <div class="line number104 index103 alt1">
             &nbsp; 
           </div>
           <div class="line number105 index104 alt2"><code class="comments">// This code contributed by Princi Singh .</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Number:4 Count:3</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N * K), Checking for each element of the array(size N) in the candidate array of size K<br><strong>Auxiliary Space:</strong> O(K), Space required to store the candidates.</p>
 <h2><strong><u>Find all elements that appear more than n/k times using Built-in Python functions:</u></strong></h2>
 <p>This approach is same the first approach but here in python there is a <strong>counter() </strong>that calculates the frequency array.</p>
 <ul>
  <li>Count the frequencies of every element using <a href="https://www.geeksforgeeks.org/python-counter-objects-elements/"><strong>Counter()</strong></a> function.</li>
  <li>Traverse the frequency array and print all the elements which occur at more than n/k times.</li>
 </ul>
 <p>Below is the implementation of the above approach:&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_496757" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printElements(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calculating n/k</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = n / k;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Counting frequency of every element using a HashMap</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HashMap&lt;Integer, Integer&gt; mp = </code><code class="keyword">new</code> <code class="plain">HashMap&lt;&gt;();</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i : arr) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mp.containsKey(i)) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mp.put(i, mp.get(i) + </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mp.put(i, </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse the map and print all the elements with occurrence more than n/k times</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">key : mp.keySet()) {</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mp.get(key) &gt; x) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(key);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">1</code><code class="plain">};</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printElements(arr, n, k);</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="comments">// This code is contributed by Shivam Tiwari</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>1
2</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(N), Traversing over the array to store the frequency<br><strong>Auxiliary Space: </strong>O(N), Space used to store the frequency</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-the-maximum-element-in-an-array-which-is-first-increasing-and-then-decreasing/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-the-maximum-element-in-an-array-which-is-first-increasing-and-then-decreasing/?ref=lbp">Find the maximum element in an array which is first increasing and then decreasing</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find all  triplets with zero sum</div> --> 
  <h1>Find all triplets with zero sum</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Facebook","Google"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Hash","Searching","Sorting","two-pointer-algorithm"]');
                                            </script> 
<div class="text"> 
 <p>Given an array of distinct elements. The task is to find triplets in the array whose sum is zero.</p>
 <p><strong>Examples :</strong>&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input:</strong> arr[] = {0, -1, 2, -3, 1}<br><strong>Output:</strong> (0 -1 1), (2 -3 1)<br><strong>Explanation:</strong> The triplets with zero sum are 0 + -1 + 1 = 0 and 2 + -3 + 1 = 0 &nbsp;</p>
  <p><strong>Input:</strong> arr[] = {1, -2, 1, 0, 5}<br><strong>Output:</strong> 1 -2 &nbsp;1<br><strong>Explanation:</strong> The triplets with zero sum is 1 + -2 + 1 = 0 &nbsp;&nbsp;</p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/find-triplets-with-zero-sum/1/">Find triplets with zero sum</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/find-triplets-with-zero-sum/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p><strong>Naive approach: </strong>Below is the idea to solve the problem</p>
 <blockquote>
  <p>Run three loops and check one by one whether the sum of the three elements is zero or not. If the sum of three elements is zero then <strong>print elements</strong> otherwise print <strong>not found</strong>.</p>
 </blockquote>
 <p>Follow the below steps to Implement the Idea:<strong>&nbsp;</strong></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <ul>
  <li>Run three nested loops with loop counter <strong>i, j, k</strong></li>
  <li>The first loops will run from <strong>0</strong> to <strong>n-3 </strong>and second loop from <strong>i+1</strong> to <strong>n-2 </strong>and the third loop from <strong>j+1</strong> to b. The loop counter represents the three elements of the triplet.</li>
  <li>Check if the sum of elements at i’th, j’th, k’th is equal to zero or not. If yes print the sum else continue.</li>
 </ul>
 <div>
   &nbsp; 
 </div>
 <p>Below is the implementation of the above approach:&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_288859" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A simple Java program to find three elements</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// whose sum is equal to zero</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">num {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Prints all triplets in arr[] with 0 sum</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findTriplets(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">found = </code><code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">2</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = i + </code><code class="value">1</code><code class="plain">; j &lt; n - </code><code class="value">1</code><code class="plain">; j++) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">k = j + </code><code class="value">1</code><code class="plain">; k &lt; n; k++) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] + arr[j] + arr[k] == </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(arr[i] + </code><code class="string">" "</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[j] + </code><code class="string">" "</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[k]);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">found = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If no triplet with 0 sum found in array</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(found == </code><code class="keyword">false</code><code class="plain">)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" not exist "</code><code class="plain">);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">0</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, -</code><code class="value">3</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findTriplets(arr, n);</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="comments">// This code is contributed by Aditya Kumar (adityakumar129)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>0 -1 1
2 -3 1</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(n<sup>3</sup>), As three nested loops are required, so the time complexity is O(n<sup>3</sup>).<br><strong>Auxiliary Space:</strong> O(1), Since no extra space is required, so the space complexity is constant.</p>
 <h2>&nbsp;<u>Find all &nbsp;triplets with zero sum using </u><a href="https://www.geeksforgeeks.org/what-is-hashing-a-complete-tutorial/"><u>Hashing</u></a></h2>
 <div>
   &nbsp; 
 </div>
 <p><strong>&nbsp;</strong>Below is the idea to solve the problem</p>
 <blockquote>
  <p>This involves traversing through the array. For every element arr[i], find a pair with sum “-arr[i]”. This problem reduces to pair sum and can be solved in O(n) time using hashing.</p>
 </blockquote>
 <p>Follow the steps below to implement the idea:</p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <ul>
  <li>Create a <strong>HashSet</strong> to store a unique element.</li>
  <li>Run a nested loop with two loops, the outer loop from 0 to n-2 and the inner loop from i+1 to n-1</li>
  <li>Check if the sum of ith and jth element multiplied with -1 is present in the <strong>HashSet </strong>or not</li>
  <li>If the element is present in the <strong>HashSet</strong>, print the triplet else insert the jth element in the <strong>HashSet</strong>.</li>
 </ul>
 <p>Below is the implementation of the above approach:&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_839819" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find triplets in a given</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// array whose sum is zero</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to print triplets with 0 sum</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findTriplets(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">found = </code><code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find all pairs with sum equals to</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// "-arr[i]"</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">HashSet&lt;Integer&gt; s = </code><code class="keyword">new</code> <code class="plain">HashSet&lt;Integer&gt;();</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = i + </code><code class="value">1</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = -(arr[i] + arr[j]);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(s.contains(x)) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"%d %d %d\n"</code><code class="plain">, x,</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i], arr[j]);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">found = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.add(arr[j]);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(found == </code><code class="keyword">false</code><code class="plain">) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">" No Triplet Found\n"</code><code class="plain">);</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">0</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, -</code><code class="value">3</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findTriplets(arr, n);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="comments">// This code contributed by Rajput-Ji</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>-1 0 1
-3 2 1</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(n<sup>2</sup>), Since two nested loops are required, so the time complexity is O(n<sup>2</sup>).<br><strong>Auxiliary Space:</strong> O(n), Since a <strong>HashSet&nbsp;</strong>is required, so the space complexity is linear.</p>
 <h2><strong><u>Find all triplets with zero sum using </u></strong><a href="http://www.geeksforgeeks.org/sorting-algorithms/"><strong><u>Sorting</u></strong></a><strong><u>:</u></strong></h2>
 <blockquote>
  <p>The idea is based on the above discussed approach using <a href="http://www.geeksforgeeks.org/java-util-hashmap-in-java/"><strong>Hashmap</strong></a> of <a href="https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-a-given-value/">this</a> post. For every element check that there is a pair whose sum is equal to the negative value of that element.</p>
 </blockquote>
 <p>Follow the steps below to implement the idea:</p>
 <ul>
  <li>Sort the array in ascending order.</li>
  <li>Traverse the array from start to end.</li>
  <li>For every index i, create two variables l = i + 1 and r = n – 1</li>
  <li>Run a loop until <strong>l </strong>is less than <strong>r </strong>if the sum of<strong> array[i]</strong>, <strong>array[l]</strong> and<strong> array[r]</strong> is equal to zero then print the triplet and break the loop</li>
  <li>If the sum is less than zero then increment the value of l, by increasing the value of l the sum will increase as the array is sorted, so <i>array[l+1] &gt; array [l]</i></li>
  <li>If the sum is greater than zero then decrement the value of r, by decreasing the value of r the sum will decrease as the array is sorted, so <i>array[r-1] &lt; array [r]</i>.</li>
 </ul>
 <p>Below is the implementation of the above approach:&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_760791" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java&nbsp; program to find triplets in a given</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// array whose sum is zero</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to print triplets with 0 sum</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findTriplets(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">found = </code><code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// sort array elements</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr);</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// initialize left and right</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = i + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = arr[i];</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt; r) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x + arr[l] + arr[r] == </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// print elements if it's sum is zero</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(x + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[l] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(arr[r] + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">found = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If sum of three elements is less</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// than zero then increment in left</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(x + arr[l] + arr[r] &lt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if sum is greater than zero then</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// decrement in right side</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(found == </code><code class="keyword">false</code><code class="plain">)</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" No Triplet Found"</code><code class="plain">);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driven source</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">0</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, -</code><code class="value">3</code><code class="plain">, </code><code class="value">1</code> <code class="plain">};</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findTriplets(arr, n);</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This code is contributed by Tushil..</code>
           </div>
           <div class="line number57 index56 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>-3 1 2
-1 0 1</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(n<sup>2</sup>), Only two nested loops are required, so the time complexity is O(n<sup>2</sup>).<br><strong>Auxiliary Space:</strong> O(1), no extra space is required, so the space complexity is constant.</p>
 <div>
   &nbsp; 
 </div>
 <p></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/?ref=lbp">Given Array of size n and a number k, find all elements that appear more than n/k times</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the element before which all the elements are smaller than it, and after which all are greater</div> --> 
  <h1>Find the element before which all the elements are smaller than it, and after which all are greater</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","Zoho"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given an array, find an element before which all elements are smaller than it, and after which all are greater than it. Return the index of the element if there is such an element, otherwise, return -1.</p>
 <p><strong>Examples:</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input:</strong> arr[] = {5, 1, 4, 3, 6, 8, 10, 7, 9};&nbsp;<br><strong>Output:</strong> 4&nbsp;<br><strong>Explanation:</strong> All elements on left of arr[4] are smaller than it&nbsp;<br>and all elements on right are greater.</p>
  <p><strong>Input:</strong> arr[] = {5, 1, 4, 4};&nbsp;<br><strong>Output:</strong> -1&nbsp;<br><strong>Explanation :</strong> No such index exits.</p>
 </blockquote>
 <p>Expected time complexity: O(n).</p>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/unsorted-array4925/1/">Element with left side smaller and right side greater</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/unsorted-array4925/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p>A <strong>simple solution </strong>is to consider every element one by one. For every element, compare it with all elements on the left and all elements on right. The time complexity of this solution is O(n<sup>2</sup>).&nbsp;</p>
 <p><strong>Code-</strong></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_610029" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find the element which is greater than</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// all left elements and smaller than all right elements.</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to check</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">check(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">ind)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = ind - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = ind + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &gt;= </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; arr[ind]) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i--;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(j &lt; n) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt; arr[ind]) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to return the index of the element which is</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// greater than all left elements and smaller than all</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// right elements.</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findElement(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse array from 1st to n-1 th index because</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Extrem elements can't be aur answer</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check(arr, n, i)) {</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there was no element matching criteria</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">9</code> <code class="plain">};</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of the element is "</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ findElement(arr, n));</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of the element is 4</pre>
 </div>
 <p><strong>Time Complexity:</strong> O(n<sup>2</sup>),&nbsp;Time complexity of the given program is O(n^2) as there are two nested while loops in the check function, which are iterating over at most n-2 elements each, and they are being called for each element in the array except the first and last elements.<br><strong>Auxiliary Space:</strong> O(1), Space complexity of the program is O(1) as no extra space is being used, except for the input array and some integer variables used for indexing and loop control.&nbsp;</p>
 <p>An <strong>Efficient Solution</strong> can solve this problem in <strong>O(n)</strong> time using <strong>O(n)</strong> extra space. Below is the detailed solution.</p>
 <ol>
  <li>Create two arrays leftMax[] and rightMin[].</li>
  <li>Traverse input array from left to right and fill leftMax[] such that leftMax[i] contains a maximum element from 0 to i-1 in the input array.</li>
  <li>Traverse input array from right to left and fill rightMin[] such that rightMin[i] contains a minimum element from to n-1 to i+1 in the input array.</li>
  <li>Traverse input array. For every element arr[i], check if arr[i] is greater than leftMax[i] and smaller than rightMin[i]. If yes, return i.</li>
 </ol>
 <p><strong>Further Optimization</strong> to the above approach is to use only one extra array and traverse input array only twice. The first traversal is the same as above and fills leftMax[]. Next traversal traverses from the right and keeps track of the minimum. The second traversal also finds the required element.</p>
 <p>Below image is a dry run of the above approach:</p>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190620130756/Find-the-element-before-which-all-the-elements-are-smaller-than-it-and-after-which-all-are-greater.png" alt="Find the element before which all the elements are smaller than it, and after which all are greater"></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <p>Below is the implementation of the above approach.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_275596" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find the element which is greater than</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// all left elements and smaller than all right elements.</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findElement(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// leftMax[i] stores maximum of arr[0..i-1] </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] leftMax = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[n];</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">leftMax[</code><code class="value">0</code><code class="plain">] = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Fill leftMax[1..n-1] </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">leftMax[i] = Math.max(leftMax[i - </code><code class="value">1</code><code class="plain">], arr[i - </code><code class="value">1</code><code class="plain">]);</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize minimum from right </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">rightMin = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse array from right </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = n - </code><code class="value">1</code><code class="plain">; i &gt;= </code><code class="value">0</code><code class="plain">; i--) </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if we found a required element</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(leftMax[i] &lt; arr[i] &amp;&amp; rightMin &gt; arr[i])</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Update right minimum</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">rightMin = Math.min(rightMin, arr[i]); </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there was no element matching criteria </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">9</code><code class="plain">};</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of the element is "</code> <code class="plain">+ </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findElement(arr, n));</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This code is contributed</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// by rachana soma</code>
           </div>
           <div class="line number48 index47 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:</strong>&nbsp;</p>
 <pre>Index of the element is 4</pre>
 <p><strong>Time Complexity:</strong> O(n),&nbsp;The program uses two loops to traverse the input array, one from left to right and another from right to left. The time complexity of the first loop is O(n) and that of the second loop is also O(n), so the overall time complexity of the program is O(n).<br><strong>Auxiliary Space:</strong> O(n), The program uses an extra array of size n to store the maximum of all left elements, so the space complexity of the program is O(n).&nbsp;<br>Thanks to Gaurav Ahirwar for suggesting the above solution.</p>
 <p><strong>Space Optimized Approach:</strong>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_707691" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find the element </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// which is greater than all left</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// elements and smaller than all</code>
           </div>
           <div class="line number4 index3 alt1"><code class="comments">// right elements.</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findElement(</code><code class="keyword">int</code> <code class="plain">[]a, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Base case</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">1</code> <code class="plain">|| n == </code><code class="value">2</code><code class="plain">)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1.element is the possible candidate for</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the solution of the problem. </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 2.idx is the index of the possible</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// candidate. </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 3.maxx is the value which is maximum on the</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// left side of the array. </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 4.bit tell whether the loop is</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// terminated from the if condition or from </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the else condition when loop do not</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// satisfied the condition.</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 5.check is the variable which tell whether the</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element is updated or not</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">element = a[</code><code class="value">0</code><code class="plain">], maxx = a[</code><code class="value">0</code><code class="plain">],</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">bit = -</code><code class="value">1</code><code class="plain">, check = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">idx = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The extreme two of the array can</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// not be the solution. Therefore </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// iterate the loop from i = 1 to &lt; n-1</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; (n - </code><code class="value">1</code><code class="plain">);)</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Here we find the possible candidate</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// where Element with left side smaller</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and right side greater. When the if</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// condition fail we check and update in</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// else condition.</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a[i] &lt; maxx &amp;&amp; i &lt; (n - </code><code class="value">1</code><code class="plain">))</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">bit = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Here we update the possible element</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if the element is greater than the</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// maxx (maximum element so far). In </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// while loop we sur-pass the value which</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is greater than the element</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a[i] &gt;= maxx)</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">element = a[i];</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">idx = i;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">check = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxx = a[i];</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check == </code><code class="value">1</code><code class="plain">) </code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">bit = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(a[i] &gt;= element &amp;&amp; i &lt; (n - </code><code class="value">1</code><code class="plain">))</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a[i] &gt; maxx)</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxx = a[i];</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">check = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking for the last value and whether</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the loop is terminated from else or </code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if block.</code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(element &lt;= a[n - </code><code class="value">1</code><code class="plain">] &amp;&amp; bit == </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">idx;</code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number93 index92 alt2"><code class="plain">}</code>
           </div>
           <div class="line number94 index93 alt1">
             &nbsp; 
           </div>
           <div class="line number95 index94 alt2"><code class="comments">// Driver code</code>
           </div>
           <div class="line number96 index95 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String []args)</code>
           </div>
           <div class="line number97 index96 alt2"><code class="plain">{</code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">[]arr = { </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">9</code> <code class="plain">};</code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of the element is "</code> <code class="plain">+ </code>
           </div>
           <div class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findElement(arr, n));</code>
           </div>
           <div class="line number103 index102 alt2"><code class="plain">}</code>
           </div>
           <div class="line number104 index103 alt1"><code class="plain">}</code>
           </div>
           <div class="line number105 index104 alt2">
             &nbsp; 
           </div>
           <div class="line number106 index105 alt1"><code class="comments">// This code is contributed by avanitrachhadiya2155</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of the element is 4</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(n),&nbsp;The time complexity of this program is O(n) where n is the size of the input array. This is because the program iterates through the array only once to find the element that satisfies the given condition.&nbsp;<br><strong>Auxiliary Space: </strong>O(1), The space complexity of this program is O(1) because it uses only a constant amount of extra space to store some variables like element, maxx, bit, check, and idx, which are not dependent on the input size. Therefore, the space used by the program does not increase with the size of the input array.</p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/?ref=lbp">Find all triplets with zero sum</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the largest pair sum in an unsorted array</div> --> 
  <h1>Find the largest pair sum in an unsorted array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an unsorted of distinct integers, find the largest pair sum in it. For example, the largest pair sum in {12, 34, 10, 6, 40} is 74.</span><br><span>Difficulty Level: Rookie&nbsp;</span><br><span>&nbsp;</span></p>
 <p dir="ltr"><b><strong>Brute Force Approach:</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><span>Brute force approach to solve this problem would be to use two nested loops to iterate over all possible pairs of integers in the array, compute their sum and keep track of the maximum sum encountered so far. The time complexity of this approach would be O(n^2).</span></p>
 <p dir="ltr"><span>Below is implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_371653" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number4 index3 alt1"><code class="plain">{</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">/* Function to return largest pair sum. Assumes that</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">there are at-least two elements in arr[] */</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findLargestSumPair(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">maxSum = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = i + </code><code class="value">1</code><code class="plain">; j &lt; n; j++) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = arr[i] + arr[j];</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(sum &gt; maxSum) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxSum = sum;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">maxSum;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">12</code><code class="plain">, </code><code class="value">34</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">40</code><code class="plain">};</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Max Pair Sum is "</code> <code class="plain">+ findLargestSumPair(arr, n));</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Max Pair Sum is 74

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N^2)</span></p>
 <p dir="ltr"><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <p dir="ltr"><span>This problem mainly boils down to finding the largest and second-largest element in an array. We can find the largest and second-largest in O(n) time by traversing the array once.&nbsp;</span><br><span>&nbsp;</span></p>
 <pre><span>1) Initialize the </span><br><span>   first = Integer.MIN_VALUE</span><br><span>   second =  Integer.MIN_VALUE</span><br><span>2) Loop through the elements</span><br><span>   a) If the current element is greater than the first max element, then update second max to the first </span><br><span>         max and update the first max to the current element. </span><br><span>3) Return (first + second)</span><br><br></pre>
 <p dir="ltr"><span>Below is the implementation of the above algorithm:&nbsp;</span><br><span>&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_827516" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">LargestPairSum {</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// TODO Auto-generated method stub</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">12</code><code class="plain">, </code><code class="value">34</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">40</code><code class="plain">};</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(largestPairSum(arr, arr.length));</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">largestPairSum(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max = n == </code><code class="value">1</code> <code class="plain">? arr[</code><code class="value">0</code><code class="plain">] + arr[</code><code class="value">1</code><code class="plain">] : arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = arr[j] + arr[i];</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(sum &gt; max) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max = sum;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt; arr[i]) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j = i;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">max;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="preprocessor">/**</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;</code><code class="preprocessor">* This code is contributed by Tanveer Baba</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;</code><code class="preprocessor">*/</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Max Pair Sum is 74

</pre>
 </div>
 <p dir="ltr"><span>The time complexity of the above solution is O(n).</span><br><span>The space complexity of the above solution is O(1).</span></p>
 <p dir="ltr"><span> </span><br><span>&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-the-element-before-which-all-the-elements-are-smaller-than-it-and-after-which-all-are-greater-than-it/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-the-element-before-which-all-the-elements-are-smaller-than-it-and-after-which-all-are-greater-than-it/?ref=lbp">Find the element before which all the elements are smaller than it, and after which all are greater</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">K’th Smallest/Largest Element in Unsorted Array</div> --> 
  <h1>K’th Smallest/Largest Element in Unsorted Array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["ABCO","Accolite","Amazon","Cisco","Microsoft","Rockstand","SAP Labs","Snapdeal","VMWare"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Heap","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array </span><b><strong>arr[] </strong></b><span>of size </span><b><strong>N</strong></b><span> and a number </span><b><strong>K,</strong></b><span> where </span><b><strong>K</strong></b><span> is smaller than the size of the array. Find the </span><b><strong>K’th</strong></b><span> smallest element in the given array. Given that all array elements are distinct.</span></p>
 <p dir="ltr"><b><strong>Examples:&nbsp;</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input</strong></b><span>: arr[] = {7, 10, 4, 3, 20, 15}, K = 3&nbsp;</span><br><b><strong>Output</strong></b><span>: 7</span></p>
  <p dir="ltr"><b><strong>Input</strong></b><span>: arr[] = {7, 10, 4, 3, 20, 15}, K = 4&nbsp;</span><br><b><strong>Output</strong></b><span>: 10&nbsp;</span></p>
 </blockquote>
 <div id="practiceLinkDiv"></div>
 <div>
   &nbsp; 
 </div>
 <h2><u><span class="GFGEditorTheme__textUnderline">K’th smallest element in an unsorted array using </span></u><a href="https://www.geeksforgeeks.org/introduction-to-sorting-algorithm/" rel="noopener"><u><span class="GFGEditorTheme__textUnderline">Sorting</span></u></a><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>Sort the given array and return the element at index </span><b><strong>K-1</strong></b><span> in the sorted array.&nbsp;</span></p>
 </blockquote>
 <ul>
  <li value="1"><span>Sort the input array in the increasing order</span></li>
  <li value="2"><span>Return the element at the K-1 index (0 – Based indexing) in the sorted array</span></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_533566" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for Kth smallest element</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// in an array</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Collections;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to return K'th smallest</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element in a given array</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(Integer[] arr, </code><code class="keyword">int</code> <code class="plain">K)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Sort the given array</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr);</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return K'th element in</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the sorted array</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[K - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// driver's code</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer arr[] = </code><code class="keyword">new</code> <code class="plain">Integer[] { </code><code class="value">12</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">19</code> <code class="plain">};</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">K = </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"K'th smallest element is "</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(arr, K));</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="comments">// This code is contributed by Chhavi</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <pre>K'th smallest element is 5



</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(N log N)</span><br><b><strong>Auxiliary Space: </strong></b><span>O(1)&nbsp;</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">K’th smallest element in an unsorted array using </span></u><a href="https://www.geeksforgeeks.org/binary-search/" rel="noopener"><u><span class="GFGEditorTheme__textUnderline">Binary Search on Answer</span></u></a><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>To find the kth smallest element using </span><b><strong>binary search on the answer</strong></b><span>, we start by defining a search range based on the minimum and maximum values in the input array. In each iteration of binary search, we count the elements smaller than or equal to the midpoint and update the search range accordingly. This process continues until the range collapses to a single element, which is the kth smallest element. </span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the given steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Intialize </span><b><strong>low</strong></b><span> and </span><b><strong>high</strong></b><span> to </span><b><strong>minimum</strong></b><span> and </span><b><strong>maximum</strong></b><span> element of the array denoting the range within which the answer lies.</span></li>
  <li value="2"><span>Apply Binary Search on this range.&nbsp;</span>
   <ul>
    <li value="1"><span>If the selected element by calculating </span><b><strong>mid</strong></b><span> has less than K elements lesser to it then increase the number that is </span><b><strong>low = mid + 1</strong></b><span>.</span></li>
    <li value="2"><span>Otherwise, </span><b><strong>Decrement</strong></b><span> the high pointer, i.e </span><b><strong>high = mid.</strong></b></li>
    <li value="3"><span>The Binary Search will end when only one element remains in the answer space that would be the answer.</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_626149" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for kth smallest element in an array</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Collections;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">count(</code><code class="keyword">int</code><code class="plain">[] nums, </code><code class="keyword">int</code> <code class="plain">mid)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to calculate number of elements less</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// than equal to mid</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">cnt = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; nums.length; i++)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(nums[i] &lt;= mid)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">cnt++;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">cnt;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[] nums, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">low = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">high = Integer.MIN_VALUE;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calculate minimum and maximum the array.</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; nums.length; i++) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = Math.min(low, nums[i]);</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = Math.max(high, nums[i]);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Our answer range lies between minimum and maximum</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element of the array on which Binary Search is</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Applied</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt; high) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + (high - low) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*if the count of number of elements in the</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">array less than equal to mid is less than k</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then increase the number. Otherwise decrement</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">the number and try to find a better answer.</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">*/</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(count(nums, mid) &lt; k)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver's code</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">19</code><code class="plain">, </code><code class="value">3</code> <code class="plain">};</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Kth smallest element is "</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(arr, k));</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="comments">// This code is contributed by CodeWithMini</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>K'th smallest element is 3



</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: O(n * log (mx-mn))</strong></b><span>, where mn be minimum and mx be maximum element of array.</span><br><b><strong>Auxiliary Space: O(1)</strong></b></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K’th smallest element in an unsorted array using </strong></b></u><a href="https://www.geeksforgeeks.org/priority-queue-set-1-introduction/" rel="noopener"><u><b><strong class="GFGEditorTheme__textUnderline">Priority Queue(Max-Heap)</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>The intuition behind this approach is to maintain a </span><b><strong>max heap</strong></b><span> (priority queue) of size </span><b><strong>K</strong></b><span> while iterating through the array. Doing this ensures that the </span><b><strong>max</strong></b><span> </span><b><strong>heap</strong></b><span> always contains the </span><b><strong>K</strong></b><span> smallest elements encountered so far. If the size of the max heap exceeds </span><b><strong>K</strong></b><span>, remove the largest element this step ensures that the heap maintains the </span><b><strong>K</strong></b><span> smallest elements encountered so far. In the end, the max heap’s top element will be the </span><b><strong>Kth </strong></b><span>smallest element.</span></p>
 </blockquote>
 <ul>
  <li value="1"><span>Initialize a max heap (priority queue) </span><b><strong>pq</strong></b><span>.</span></li>
  <li value="2"><span>For each element in the array:</span>
   <ul>
    <li value="1"><span>Push the element onto the max heap.</span></li>
    <li value="2"><span>If the size of the max heap exceeds K, pop (remove) the largest element from the max heap. This step ensures that the max heap maintains the K smallest elements encountered so far.</span></li>
   </ul></li>
  <li value="3"><span>After processing all elements, the max heap will contain the K smallest elements, with the largest of these K elements at the top.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_759737" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.PriorityQueue;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">KthSmallestElement {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the kth smallest array element</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">N, </code><code class="keyword">int</code> <code class="plain">K) {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Create a max heap (priority queue)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; pq = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;((a, b) -&gt; b - a);</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Iterate through the array elements</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; N; i++) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Push the current element onto the max heap</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.offer(arr[i]);</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the size of the max heap exceeds K, remove the largest element</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pq.size() &gt; K)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.poll();</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return the Kth smallest element (top of the max heap)</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">pq.peek();</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver's code:</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">48</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">33</code><code class="plain">, </code><code class="value">53</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">K = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Kth Smallest Element is: "</code> <code class="plain">+ kthSmallest(arr, N, K));</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Kth Smallest Element is: 5



</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: O(N * log(K))</strong></b><span>, The approach efficiently maintains a container of the K smallest elements while iterating through the array, ensuring a time complexity of O(N * log(K)), where N is the number of elements in the array.</span></p>
 <p dir="ltr"><b><strong>Auxiliary Space: O(K)</strong></b></p>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K’th smallest element in an unsorted array using </strong></b></u><a href="https://www.geeksforgeeks.org/quickselect-algorithm/" rel="noopener"><u><b><strong class="GFGEditorTheme__textUnderline">QuickSelect</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>This is an optimization over method 1, if </span><a href="https://www.geeksforgeeks.org/quick-sort/"><span>QuickSort </span></a><span>is used as a sorting algorithm in first step. In QuickSort, pick a </span><b><strong>pivot</strong></b><span> element, then move the </span><b><strong>pivot</strong></b><span> element to its correct position and partition the surrounding array. The idea is, not to do complete quicksort, but stop at the point where </span><b><strong>pivot</strong></b><span> itself is k’th smallest element. Also, not to recur for both </span><b><strong>left</strong></b><span> and </span><b><strong>right</strong></b><span> sides of </span><b><strong>pivot</strong></b><span>, but recur for one of them according to the position of pivot.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the given steps to solve the problem:</span></p>
 <ul>
  <li value="1"><span>Run quick sort algorithm on the input array</span>
   <ul>
    <li value="1"><span>In this algorithm pick a </span><b><strong>pivot</strong></b><span> element and move it to it’s correct position</span></li>
    <li value="2"><span>Now, if index of </span><b><strong>pivot</strong></b><span> is equal to </span><b><strong>K</strong></b><span> then return the value, else if the index of </span><b><strong>pivot</strong></b><span> is greater than K, then recur for the </span><b><strong>left</strong></b><span> subarray, else recur for the </span><b><strong>right</strong></b><span> subarray&nbsp;</span></li>
    <li value="3"><span>Repeat this process until the element at index </span><b><strong>K</strong></b><span> is not found</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_814035" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code for kth smallest element in an array</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.Collections;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Standard partition process of QuickSort.</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// It considers the last element as pivot</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and moves all smaller element to left of</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it and greater elements to right</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">partition(Integer[] arr, </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = arr[r], i = l;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = l; j &lt;= r - </code><code class="value">1</code><code class="plain">; j++) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt;= x) {</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Swapping arr[i] and arr[j]</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i];</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[j];</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[j] = temp;</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Swapping arr[i] and arr[r]</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i];</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[r];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[r] = temp;</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function returns k'th smallest element</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in arr[l..r] using QuickSort based method.</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ASSUMPTION: ALL ELEMENTS IN ARR[] ARE DISTINCT</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(Integer[] arr, </code><code class="keyword">int</code> <code class="plain">l,</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">K)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If k is smaller than number of elements</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in array</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(K &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; K &lt;= r - l + </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Partition the array around last</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element and get position of pivot</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element in sorted array</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = partition(arr, l, r);</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If position is same as k</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos - l == K - </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[pos];</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If position is more, recur for</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// left subarray</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos - l &gt; K - </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">kthSmallest(arr, l, pos - </code><code class="value">1</code><code class="plain">, K);</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else recur for right subarray</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">kthSmallest(arr, pos + </code><code class="value">1</code><code class="plain">, r,</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">K - pos + l - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number62 index61 alt1">
             &nbsp; 
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If k is more than number of elements</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in array</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Integer.MAX_VALUE;</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver's code</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer arr[]</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">Integer[] { </code><code class="value">12</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">19</code><code class="plain">, </code><code class="value">26</code> <code class="plain">};</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">K = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"K'th smallest element is "</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(arr, </code><code class="value">0</code><code class="plain">, arr.length - </code><code class="value">1</code><code class="plain">, K));</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number80 index79 alt1"><code class="plain">}</code>
           </div>
           <div class="line number81 index80 alt2">
             &nbsp; 
           </div>
           <div class="line number82 index81 alt1"><code class="comments">// This code is contributed by Chhavi</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>K'th smallest element is 5



</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(N</span><sup><span>2</span></sup><span>) in worst case and O(N) on average. However if we randomly choose pivots, the probability of worst case could become very less.</span><br><b><strong>Auxiliary Space: </strong></b><span>O(N)</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">K’th smallest element in an unsorted array using </strong></b></u><a href="https://www.geeksforgeeks.org/counting-sort/" rel="noopener"><u><span class="GFGEditorTheme__textUnderline">Counting Sort</span></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>Counting sort is a linear time sorting algorithm that counts the occurrences of each element in an array and uses this information to determine the sorted order. The intuition behind using counting sort to find the kth smallest element is to take advantage of its counting phase, which essentially calculates the cumulative frequencies of elements. By tracking these cumulative frequencies and finding the point where the count reaches or exceeds </span><b><strong>K </strong></b><span>can determine the kth smallest element efficiently. </span></p>
 </blockquote>
 <ul>
  <li value="1"><span>Find the maximum element in the input array to determine the range of elements.</span></li>
  <li value="2"><span>Create an array </span><b><strong>freq</strong></b><span> of size</span><b><strong> max_element + 1</strong></b><span> to store the frequency of each element in the input array. Initialize all elements of </span><b><strong>freq</strong></b><span> to</span><b><strong> 0</strong></b><span>.</span></li>
  <li value="3"><span>Iterate through the input array and update the frequencies of elements in the </span><b><strong>freq</strong></b><span> array.</span></li>
  <li value="4"><span>Initialize a </span><b><strong>count</strong></b><span> variable to keep track of the cumulative frequency of elements.</span></li>
  <li value="5"><span>Iterate through the </span><b><strong>freq</strong></b><span> array from</span><b><strong> 0</strong></b><span> to </span><b><strong>max_element</strong></b><span>:</span></li>
  <li value="6"><span>If the frequency of the current element is non-zero, add it to the </span><b><strong>count</strong></b><span>.</span></li>
  <li value="7"><span>Check if </span><b><strong>count</strong></b><span> is greater than or equal to </span><b><strong>k</strong></b><span>. If it is, return the current element as the kth smallest element.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the Implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_337982" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function returns the kth smallest element in an</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// First, find the maximum element in the array</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max_element = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; max_element) {</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">max_element = arr[i];</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Create an array to store the frequency of each</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element in the input array</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] freq = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[max_element + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.fill(freq, </code><code class="value">0</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">freq[arr[i]]++;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Keep track of the cumulative frequency of</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// elements in the input array</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt;= max_element; i++) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(freq[i] != </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count += freq[i];</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(count &gt;= k) {</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we have seen k or more elements,</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// return the current element</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">12</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">19</code> <code class="plain">};</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The "</code> <code class="plain">+ k</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"th smallest element is "</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(arr, n, k));</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="comments">// This code is contributed by akshitaguprzj3</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The 2th smallest element is 5




</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:O(N + max_element)</strong></b><span>, where max_element is the maximum element of the array.</span><br><b><strong>Auxiliary Space: O(max_element)</strong></b></p>
 <p dir="ltr"><b><strong>Note: </strong></b><span>This approach is particularly useful when the range of elements is small, this is because we are declaring a array of size maximum element. If the range of elements is very large, the counting sort approach may not be the most efficient choice.</span></p>
 <p dir="ltr"><span>Related Articles:</span><br><a href="https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/" rel="noopener"><span>Print k largest elements of an array</span></a></p>
 <h3></h3>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-the-largest-pair-sum-in-an-unsorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-the-largest-pair-sum-in-an-unsorted-array/?ref=lbp">Find the largest pair sum in an unsorted array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Search an element in a sorted and rotated  Array</div> --> 
  <h1>Search an element in a sorted and rotated Array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Adobe","Amazon","BankBazaar","D-E-Shaw","FactSet","Flipkart","Hike","MakeMyTrip","Microsoft","Paytm","Samsung","SAP Labs","Snapdeal","Times Internet"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given a sorted and rotated array </span><b><strong>arr[]</strong></b><span> of size </span><b><strong>N</strong></b><span> and a </span><b><strong>key</strong></b><span>, the task is to find the key in the array.</span></p>
 <p dir="ltr"><b><strong>Note:</strong></b><span> Find the element in O(logN) time and assume that all the elements are distinct.</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><b><strong>Example:</strong></b><span>&nbsp;&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><b><strong>Input &nbsp;:</strong></b><span> arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}, key = 3</span><br><b><strong>Output :</strong></b><span> Found at index 8</span></p>
  <p dir="ltr"><b><strong>Input &nbsp;:</strong></b><span> arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}, key = 30</span><br><b><strong>Output :</strong></b><span> Not found</span></p>
  <p dir="ltr"><b><strong>Input :</strong></b><span> arr[] = {30, 40, 50, 10, 20}, key = 10 &nbsp;&nbsp;</span><br><b><strong>Output :</strong></b><span> Found at index 3</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/search-in-a-rotated-array4618/1/">Search in a Rotated Array</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/search-in-a-rotated-array4618/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 1 (Finding Pivot where rotation has happened):</strong></b></u><span> The primary idea to solve the problem is as follows.&nbsp;</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <blockquote>
  <p dir="ltr"><span>The idea is to find the pivot point, divide the array into two sub-arrays and perform a binary search.</span></p>
  <p dir="ltr"><span>The main idea for finding a pivot is –&nbsp;</span></p>
  <ul>
   <li value="1"><span>For a sorted (in increasing order) and rotated array, the pivot element is the only element for which the next element to it is smaller than it.</span></li>
   <li value="2"><span>Using </span><a href="https://www.geeksforgeeks.org/binary-search/"><span>binary search</span></a><span> based on the above idea, pivot can be found.</span>
    <ul>
     <li value="1"><span>It can be observed that for a search space of indices in range </span><b><strong>[l, r]</strong></b><span> where the middle index is </span><b><strong>mid</strong></b><span>,&nbsp;</span>
      <ul>
       <li value="1"><span>If rotation has happened in the left half, then obviously the element at </span><b><strong>l</strong></b><span> will be greater than the one at </span><b><strong>mid</strong></b><span>.</span></li>
       <li value="2"><span>Otherwise the left half will be sorted but the element at </span><b><strong>mid</strong></b><span> will be greater than the one at </span><b><strong>r</strong></b><span>.</span></li>
      </ul></li>
    </ul></li>
   <li value="3"><span>After the pivot is found divide the array into two sub-arrays.</span></li>
   <li value="4"><span>Now the individual sub-arrays are sorted so the element can be searched using Binary Search.</span></li>
  </ul>
 </blockquote>
 <p dir="ltr"><span>Follow the steps mentioned below to implement the idea:&nbsp;&nbsp;</span></p>
 <ul>
  <li value="1"><span>Find out the pivot point using binary search. We will set the low pointer as the first array index and high with the last array index.</span>
   <ul>
    <li value="1"><span>From the high and low we will calculate the mid value.&nbsp;</span></li>
    <li value="2"><span>If the value at </span><b><strong>mid-1</strong></b><span> is greater than the one at </span><b><strong>mid</strong></b><span>, return that value as the pivot.</span></li>
    <li value="3"><span>Else if the value at the </span><b><strong>mid+1</strong></b><span> is less than </span><b><strong>mid</strong></b><span>, return mid value as the pivot.</span></li>
    <li value="4"><span>Otherwise, if the value at </span><b><strong>low</strong></b><span> position is greater than </span><b><strong>mid</strong></b><span> position, consider the left half. Otherwise, consider the right half.</span></li>
   </ul></li>
  <li value="2"><span>Divide the array into two sub-arrays based on the pivot that was found.</span></li>
  <li value="3"><span>Now call binary search for one of the two sub-arrays.</span>
   <ul>
    <li value="1"><span>If the</span><b><strong> </strong></b><span>element is greater than the 0</span><sup><span>th</span></sup><span> element then search in the left array</span></li>
    <li value="2"><span>Else search in the right array.</span></li>
   </ul></li>
  <li value="4"><span>If</span><b><strong> </strong></b><span>the</span><b><strong> </strong></b><span>element is found in the selected sub-array then return the index</span></li>
  <li value="5"><span>Else</span><b><strong> </strong></b><span>return </span><b><strong>-1</strong></b><span>.</span></li>
 </ul>
 <p dir="ltr"><span>Follow the below illustration for a better understanding</span></p>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <blockquote>
  <p dir="ltr"><span>Consider </span><b><strong>arr[] = {3, 4, 5, 1, 2}, key = 1</strong></b></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Pivot finding:</strong></b></u></p>
  <p dir="ltr"><b><strong>low = 0, high = 4:</strong></b><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; &nbsp;mid = 2</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; &nbsp;arr[mid] = 5, arr[mid + 1] = 1</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[mid] &gt; arr[mid +1],</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; Therefore the pivot = </span><b><strong>mid = 2</strong></b></p>
  <p dir="ltr"><span>Array is divided into two parts </span><b><strong>{3, 4, 5}, {1, 2}</strong></b><br><span>Now &nbsp;according to the conditions and the key, we need to find in the part {1, 2}&nbsp;</span></p>
  <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Key Finding:</strong></b></u></p>
  <p dir="ltr"><span>We will apply Binary search on {1, 2}.&nbsp;</span><br><b><strong>low = 3 , high = 4.</strong></b><br><b><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong></b><span>=&gt; &nbsp;mid = 3</span><br><b><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong></b><span>=&gt; &nbsp;arr[mid] = 1 , key = 1, hence arr[mid] = key matches.</span><br><b><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong></b><span>=&gt; &nbsp;The required index = </span><b><strong>mid = 3</strong></b></p>
  <p dir="ltr"><span>So the element is &nbsp;found at index </span><b><strong>3</strong></b><span>.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:&nbsp;&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_433709" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/* Java program to search an element</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="comments">in a sorted and pivoted array*/</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Searches an element key in a</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">pivoted sorted array arrp[]</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">of size n */</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">pivotedBinarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pivot = findPivot(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we didn't find a pivot, then</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// array is not rotated at all</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pivot == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we found a pivot, then first</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// compare with pivot and then</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// search in two subarrays around pivot</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[pivot] == key)</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">pivot;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[</code><code class="value">0</code><code class="plain">] &lt;= key)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, </code><code class="value">0</code><code class="plain">, pivot - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, pivot + </code><code class="value">1</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to get pivot. For array</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">3, 4, 5, 6, 1, 2 it returns</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">3 (index of 6) */</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPivot(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// base cases</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &lt; low)</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high == low)</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* low + (high - low)/2; */</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &lt; high &amp;&amp; arr[mid] &gt; arr[mid + </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &gt; low &amp;&amp; arr[mid] &lt; arr[mid - </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(mid - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[low] &gt;= arr[mid])</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findPivot(arr, low, mid - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findPivot(arr, mid + </code><code class="value">1</code><code class="plain">, high);</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Standard Binary Search function */</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high,</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &lt; low)</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* low + (high - low)/2; */</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key == arr[mid])</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &gt; arr[mid])</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, (mid + </code><code class="value">1</code><code class="plain">), high, key);</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, low, (mid - </code><code class="value">1</code><code class="plain">), key);</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number66 index65 alt1">
             &nbsp; 
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Let us search 3 in below array</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr1[] = { </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code> <code class="plain">};</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr1.length;</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Index of the element is : "</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ pivotedBinarySearch(arr1, n, key));</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number78 index77 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of the element is : 8


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log N) Binary Search requires log n comparisons to find the element.</span><br><b><strong>Auxiliary Complexity: </strong></b><span>O(1)</span></p>
 <p dir="ltr"><i><em class="GFGEditorTheme__textItalic">Thanks to Ajay Mishra for providing the above solution.</em></i></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Approach 2 (Direct </strong></b></u><a href="https://www.geeksforgeeks.org/binary-search/"><u><b><strong class="GFGEditorTheme__textUnderline">Binary Search</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline"> on Array without finding Pivot):</strong></b></u><span>&nbsp;</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <p dir="ltr"><span>The idea is to instead of two or more passes of binary search, the result can be found in</span><b><strong> one pass</strong></b><span> of binary search.&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>The idea is to create a recursive function to implement the binary search where the search region is [l, r]. For each recursive call:</span></p>
  <ul>
   <li value="1"><span>We calculate the mid value as </span><b><strong>mid = (l + h) / 2</strong></b></li>
   <li value="2"><span>Then try to figure out if </span><b><strong>l</strong></b><span> to </span><b><strong>mid</strong></b><span> is sorted, or </span><b><strong>(mid+1) to h</strong></b><span> is sorted</span></li>
   <li value="3"><span>Based on that decide the next search region and keep on doing this till the element is found or </span><b><strong>l</strong></b><span> overcomes </span><b><strong>h</strong></b><span>.</span></li>
  </ul>
 </blockquote>
 <p dir="ltr"><span>Follow the steps mentioned below to implement the idea:&nbsp;&nbsp;</span></p>
 <ul>
  <li value="1"><span>Use a recursive function to implement binary search to find the key:</span>
   <ul>
    <li value="1"><span>Find middle-point </span><b><strong>mid = (l + h)/2</strong></b><span>&nbsp;</span></li>
    <li value="2"><span>If the key is present at the middle point, return </span><b><strong>mid</strong></b><span>.</span></li>
    <li value="3"><span>Else if the value at </span><b><strong>l</strong></b><span> is less than the one at mid then </span><b><strong>arr[l . . . mid]</strong></b><span> is sorted</span>
     <ul>
      <li value="1"><span>If the key to be searched lies in the range from </span><b><strong>arr[l]</strong></b><span> to </span><b><strong>arr[mid]</strong></b><span>, recur for arr[l . . . mid].</span></li>
      <li value="2"><span>Else recur for arr[mid+1 . . . h] &nbsp;</span></li>
     </ul></li>
    <li value="4"><span>Else arr[mid+1. . . h] is sorted:&nbsp;</span>
     <ul>
      <li value="1"><span>If the key to be searched lies in the range from </span><b><strong>arr[mid+1]</strong></b><span> to </span><b><strong>arr[h]</strong></b><span>, recur for arr[mid+1. . . h].</span></li>
      <li value="2"><span>Else recur for arr[l. . . mid]&nbsp;</span></li>
     </ul></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Follow the below illustration for a better understanding:</span></p>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <blockquote>
  <p dir="ltr"><span>Input </span><b><strong>arr[] = {3, 4, 5, 1, 2}</strong></b><span>, </span><b><strong>key = 1</strong></b><br><span>Initially low = 0, high = 4.</span></p>
  <p dir="ltr"><b><strong>low = 0, high = 4:</strong></b><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; mid = 2</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[mid] = 5, which is not the desired value.</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[low] &lt; arr[mid] So, the left half is sorted.</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; key &lt; arr[low], So the next search region is 3 to 4.</span></p>
  <p dir="ltr"><b><strong>low = 3, high = 4:</strong></b><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; mid = 3</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[mid] = 1 = key</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; So the element is found at index 3.</span></p>
  <p dir="ltr"><span>The element is found at index </span><b><strong>3</strong></b><span>.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above idea:&nbsp;&nbsp;</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-2"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_644591" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/* Java program to search an element in</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="comments">sorted and rotated array using</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="comments">single pass of Binary Search*/</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns index of key in arr[l..h]</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if key is present, otherwise returns -1</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">search(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">h, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(l &gt; h)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (l + h) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == key)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[l...mid] first subarray is sorted */</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[l] &lt;= arr[mid]) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* As this subarray is sorted, we</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">can quickly check if key lies in</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">half or other half */</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &gt;= arr[l] &amp;&amp; key &lt;= arr[mid])</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">search(arr, l, mid - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*If key not lies in first half subarray,</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Divide other half&nbsp; into two subarrays,</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">such that we can quickly check if key lies</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">in other half */</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">search(arr, mid + </code><code class="value">1</code><code class="plain">, h, key);</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2">
             &nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If arr[l..mid] first subarray is not sorted,</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then arr[mid... h] must be sorted subarray*/</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(key &gt;= arr[mid] &amp;&amp; key &lt;= arr[h])</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">search(arr, mid + </code><code class="value">1</code><code class="plain">, h, key);</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">search(arr, l, mid - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code> <code class="plain">};</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = search(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, key);</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i != -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index: "</code> <code class="plain">+ i);</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Key not found"</code><code class="plain">);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1"><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="comments">// This code is contributed by Aditya Kumar (adityakumar129)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index: 8


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log N). Binary Search requires log n comparisons to find the element. So time complexity is O(log n).</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1).&nbsp;As no extra space is required.</span></p>
 <p dir="ltr"><i><em class="GFGEditorTheme__textItalic">Thanks to Gaurav Ahirwar for suggesting the above solution.</em></i><span>&nbsp;</span></p>
 <p dir="ltr"><b><strong>How to handle duplicates?</strong></b></p>
 <p dir="ltr"><span>At first look, it doesn’t look possible to search in O(Log N) time in all cases when duplicates are allowed.&nbsp;</span><br><span>For example consider searching 0 in {2, 2, 2, 2, 2, 2, 2, 2, 0, 2} and {2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}.&nbsp;</span><br><span>Look into the following article to find a solution to this issue: </span><a href="https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-rotated-array-with-duplicates/"><span>https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-rotated-array-with-duplicates/</span></a></p>
 <p dir="ltr"><b><strong>Similar Articles:</strong></b><span>&nbsp;</span></p>
 <ul>
  <li value="1"><a href="https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/"><span>Find the minimum element in a sorted and rotated array</span></a></li>
  <li value="2"><a href="https://www.geeksforgeeks.org/given-a-sorted-and-rotated-array-find-if-there-is-a-pair-with-a-given-sum/"><span>Given a sorted and rotated array, find if there is a pair with a given sum.</span></a></li>
 </ul>
 <p dir="ltr"><span>Please write comments if you find any bug in the above codes/algorithms, or find other ways to solve the same problem.</span></p>
 <h4><span>Approach#3: Using </span><a href="https://www.geeksforgeeks.org/linear-search/"><span>linear search</span></a></h4>
 <p dir="ltr"><span>This approach uses linear search to find the index of the key in a sorted and rotated array. The idea is to iterate through the array and compare each element with the key until we find a match.</span></p>
 <h4><span>Algorithm</span></h4>
 <ol>
  <li value="1"><span>Initialize a loop index i to 0, and iterate over the array using a for loop.</span></li>
  <li value="2"><span>For each element of the array, check if it is equal to the given key.</span></li>
  <li value="3"><span>If the key is found, return the index of the element.</span></li>
  <li value="4"><span>If the end of the array is reached without finding the key, return -1 to indicate that the key was not found.</span></li>
 </ol>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_457959" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">searchRotatedArray(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">key) {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == key) {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">};</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">key = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = searchRotatedArray(arr, key);</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index != -</code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Found at index "</code> <code class="plain">+ index);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Not found"</code><code class="plain">);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="comments">//This article is contributed by Abhay</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Found at index 8


</pre>
 </div>
 <p dir="ltr"><span>Time complexity of this algorithm is O(n), where n is the length of the input array.&nbsp;</span></p>
 <p dir="ltr"><span>Space complexity is O(1), as the program only uses a constant amount of extra space to store the loop index and the return value.</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array/?ref=lbp">K’th Smallest/Largest Element in Unsorted Array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the Minimum element in a Sorted and Rotated Array</div> --> 
  <h1>Find the Minimum element in a Sorted and Rotated Array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Adobe","Amazon","Microsoft","Morgan Stanley","Samsung","Snapdeal","Times Internet"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Binary Search","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given a sorted array </span><b><strong>arr[] </strong></b><span>(may be distinct or may contain duplicates) of size </span><b><strong>N</strong></b><span> that is rotated at some unknown point, the task is to find the minimum element in it.&nbsp;</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[]</span><b><strong> = </strong></b><span>{5, 6, 1, 2, 3, 4}</span><br><b><strong>Output:</strong></b><span> 1</span><br><b><strong>Explanation: </strong></b><span>1 is the minimum element present in the array.</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {1, 2, 3, 4}</span><br><b><strong>Output: </strong></b><span>1</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr[] = {2, 1}</span><br><b><strong>Output: </strong></b><span>1</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/minimum-element-in-a-sorted-and-rotated-array3611/1/">Minimum element in a sorted and rotated array</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/minimum-element-in-a-sorted-and-rotated-array3611/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><b><strong>Find the minimum element in a sorted and rotated array using </strong></b><a href="https://www.geeksforgeeks.org/linear-search/"><b><strong>Linear Search</strong></b></a><b><strong>:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span>A simple solution is to use </span><a href="https://www.geeksforgeeks.org/linear-search/"><span>linear search</span></a><span> to traverse the complete array and find a minimum.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps mentioned below to implement the idea:</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <ul>
  <li value="1"><span>Declare a variable (say </span><b><strong>min_ele</strong></b><span>) to store the minimum value and initialize it with </span><b><strong>arr[0]</strong></b><span>.</span></li>
  <li value="2"><span>Traverse the array from the start.</span>
   <ul>
    <li value="1"><span>Update the minimum value (</span><b><strong>min_ele</strong></b><span>) if the current element is less than it.</span></li>
   </ul></li>
  <li value="3"><span>Return the final value of </span><b><strong>min_ele</strong></b><span> as the required answer.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_774453" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Function to find the minimum value</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMin(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min_ele = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traversing over array to</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// find minimum element</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &lt; min_ele) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min_ele = arr[i];</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">min_ele;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code> <code class="plain">};</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(findMin(arr, N));</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="comments">// This code is contributed by aadityaburujwale.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>1






</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(N)</span><br><b><strong>Auxiliary&nbsp;Space:</strong></b><span> O(1)</span></p>
 <h2><b><strong>Find the minimum element in a sorted and rotated array using Binary Search:&nbsp;</strong></b></h2>
 <ul>
  <li value="1"><span>The findMin function takes three arguments: arr (the input array), low (the lowest index of the array), and high (the highest index of the array).</span></li>
  <li value="2"><span>If the array is not rotated, i.e., the first element is less than or equal to the last element, then the first element is returned as the minimum element.</span></li>
  <li value="3"><span>Otherwise, a binary search algorithm is implemented to find the minimum element.</span></li>
  <li value="4"><span>The binary search loop continues until the low index is less than or equal to the high index.</span></li>
  <li value="5"><span>Inside the loop, the middle index mid is calculated as the average of the low and high indices.</span></li>
  <li value="6"><span>If the element at the mid index is less than the element at mid-1 index, then the element at the mid index is returned as the minimum element.</span></li>
  <li value="7"><span>If the element at the mid index is greater than the element at the high index, then the minimum element must be in the right half of the array. So, the low index is updated to mid+1.</span></li>
  <li value="8"><span>Otherwise, the minimum element must be in the left half of the array. So, the high index is updated to mid-1.</span></li>
  <li value="9"><span>If no minimum element is found during the binary search, then the findMin function returns None.</span></li>
  <li value="10"><span>In the driver program, an input array arr is defined with rotated and sorted elements, and the findMin function is called with low and high indices set to 0 and N-1, respectively, where N is the length of the input array.</span></li>
  <li value="11"><span>The minimum element is printed using the print function with the help of the str function to convert the returned value to a string</span></li>
 </ul>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <blockquote>
  <p dir="ltr"><span>Let the array be </span><b><strong>arr = [7, 8, 9, 1, 2, 3, 4, 5, 6]</strong></b><span>. Here, the minimum element in the array is 1.</span></p>
  <p dir="ltr"><span>We start with </span><b><strong>low = 0 and high = 8.</strong></b></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <p dir="ltr"><span>First iteration:</span></p>
  <p dir="ltr"><b><strong>mid</strong></b><span> = (low + high) // 2 = 4</span></p>
  <p dir="ltr"><b><strong>arr[mid]</strong></b><span> = 2, arr[mid-1] = 1</span></p>
  <p dir="ltr"><b><strong>arr[mid] &lt; arr[mid-1]</strong></b><span>, so we return arr[mid] which is 2.</span></p>
  <p dir="ltr"><span>So the minimum element is found at</span><b><strong> index 3</strong></b><span> and </span><b><strong>arr[3] = 1.</strong></b></p>
 </blockquote>
 <p dir="ltr"><b><strong>Below is the code implementation of the above approach:</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_640735" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMin(List&lt;Integer&gt; arr, </code><code class="keyword">int</code> <code class="plain">low,</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the array is not rotated</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr.get(low) &lt;= arr.get(high)) {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr.get(low);</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Binary search</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if mid is the minimum element</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr.get(mid) &lt; arr.get(mid - </code><code class="value">1</code><code class="plain">)) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr.get(mid);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the left half is sorted, the minimum</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element must be in the right half</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr.get(mid) &gt; arr.get(high)) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the right half is sorted, the minimum</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element must be in the left half</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If no minimum element is found, return -1</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1">
             &nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test above functions</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">List&lt;Integer&gt; arr = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;(</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.asList(</code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">));</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.size();</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The minimum element is "</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ findMin(arr, </code><code class="value">0</code><code class="plain">, N - </code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The minimum element is 1






</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: </strong></b><span>O(log n) – where n is the number of elements in the array. This is because the algorithm uses binary search, which has a logarithmic time complexity.</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1) – the algorithm uses a constant amount of extra space to store variables such as low, high, and mid, regardless of the size of the input array.</span></p>
 <p dir="ltr"></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/?ref=lbp">Search an element in a sorted and rotated Array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find a peak element which is not smaller than its neighbours</div> --> 
  <h1>Find a peak element which is not smaller than its neighbours</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Adobe","Amazon","Visa"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array </span><b><strong>arr</strong></b><span> of </span><b><strong>n</strong></b><span> elements that is first strictly increasing and then maybe strictly decreasing, find the maximum element in the array.</span></p>
 <p dir="ltr"><span>Note: If the array is increasing then just print the last element will be the maximum value.</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><b><strong>Example:</strong></b></p>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> array[]= {5, 10, 20, 15}</span><br><b><strong>Output:</strong></b><span> 20</span><br><b><strong>Explanation: </strong></b><span>The element 20 has neighbors 10 and 15, both of them are less than 20.</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> array[] = {10, 20, 15, 2, 23, 90, 67}</span><br><b><strong>Output:</strong></b><span> 20 or 90</span><br><b><strong>Explanation:&nbsp;</strong></b><span>The element 20 has neighbors 10 and 15, both of them are less than 20, similarly 90 has neighbors 23 and 67.</span></p>
 </blockquote>
 <p dir="ltr"><span>The following corner cases give a better idea about the problem.&nbsp;</span></p>
 <ol>
  <li value="1"><span>If the input array is sorted in a strictly increasing order, the last element is always a peak element. For example, 50 is peak element in {10, 20, 30, 40, 50}.</span></li>
  <li value="2"><span>If the input array is sorted in a strictly decreasing order, the first element is always a peak element. 100 is the peak element in {100, 80, 60, 50, 20}.</span></li>
  <li value="3"><span>If all elements of the input array are the same, every element is a peak element.</span></li>
 </ol>
 <p dir="ltr"><span>It is clear from the above examples that there is always a peak element in the input array.</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/maximum-value-in-a-bitonic-array3001/1/">Bitonic Point</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/maximum-value-in-a-bitonic-array3001/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Naive Approach:</strong></b><span> Below is the idea to solve the problem</span></p>
 <blockquote>
  <p dir="ltr"><span>The array can be traversed and the element whose neighbors are less than that element can be returned.</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the below steps to Implement the idea:&nbsp;</span></p>
 <ul>
  <li value="1"><span>If the first element is greater than the second or the last element is greater than the second last, print the respective element and terminate the program.</span></li>
  <li value="2"><span>Else traverse the array from the second index to the second last index i.e. </span><b><strong>1 </strong></b><span>to </span><b><strong>N – 1&nbsp;</strong></b><span>&nbsp;</span>
   <ul>
    <li value="1"><span>If for an element array[i] is greater than both its neighbors, i.e.,&nbsp;array[i] &gt; =array[i-1]&nbsp;</span><i><em class="GFGEditorTheme__textItalic">&nbsp;</em></i><span>and array[i] &gt; =array[i+1]&nbsp;, then print that element and terminate.</span></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of above idea.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_362776" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Java program to find a peak element</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the peak element in the array</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPeak(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// First or last element is peak element</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[</code><code class="value">0</code><code class="plain">] &gt;= arr[</code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[n - </code><code class="value">1</code><code class="plain">] &gt;= arr[n - </code><code class="value">2</code><code class="plain">])</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check for every other element</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if the neighbors are smaller</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt;= arr[i - </code><code class="value">1</code><code class="plain">] &amp;&amp; arr[i] &gt;= arr[i + </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1">
             &nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Index of a peak point is "</code> <code class="plain">+ findPeak(arr, n));</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1"><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="comments">// This code is contributed by Aditya Kumar (adityakumar129)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of a peak point is 2


</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity:</strong></b><span> O(n), One traversal is needed so the time complexity is O(n)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1), No extra space is needed, so space complexity is constant</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <h2><span>Find a peak element using recursive </span><a href="https://www.geeksforgeeks.org/binary-search/"><span>Binary Search</span></a></h2>
 <p dir="ltr"><span>Below is the idea to solve the problem.</span></p>
 <blockquote>
  <p dir="ltr"><span>Using Binary Search, check if the </span><b><strong>middle</strong></b><span> element is the peak element or not. If the middle element is not the peak element, then check if the element on the right side is greater than the middle element then there is always a peak element on the </span><b><strong>right side</strong></b><span>. If the element on the left side is greater than the middle element then there is always a peak element on the </span><b><strong>left side</strong></b><span>.&nbsp;</span></p>
 </blockquote>
 <div>
   &nbsp; 
 </div>
 <p dir="ltr"><span>Follow the steps below to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Create two variables, l and r, initialize l = 0 and r = n-1</span></li>
  <li value="2"><span>Recursively perform the below steps till </span><b><strong>l &lt;= r</strong></b><span>, i.e. lowerbound is less than the upperbound</span>
   <ul>
    <li value="1"><span>Check if the mid value or index&nbsp;mid = low + (high – low) / 2,&nbsp;&nbsp;is the peak element or not, if yes then print the element and terminate.</span></li>
    <li value="2"><span>Else if the element on the left side of the middle element is greater then check for peak element on the left side, i.e. update </span><i><em class="GFGEditorTheme__textItalic">r = mid – 1</em></i></li>
    <li value="3"><span>Else if the element on the right side of the middle element is greater then check for peak element on the right side, i.e. update&nbsp;</span><img src="https://quicklatex.com/cache3/b8/ql_87d7c1423818070f80fabe0ce10ed3b8_l3.png" class="ql-img-inline-formula quicklatex-auto-format" alt="l = mid + 1   " title="Rendered by QuickLaTeX.com" height="20" width="132" style="vertical-align: 31px;"></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_113957" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Java program to find a peak</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// element using divide and conquer</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">PeakElement {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A binary search based function</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// that returns index of a peak element</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPeakUtil(</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find index of middle element</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// low + (high - low) / 2</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + (high - low) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Compare middle element with its</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// neighbours (if neighbours exist)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((mid == </code><code class="value">0</code> <code class="plain">|| arr[mid - </code><code class="value">1</code><code class="plain">] &lt;= arr[mid])</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; (mid == n - </code><code class="value">1</code> <code class="plain">|| arr[mid + </code><code class="value">1</code><code class="plain">] &lt;= arr[mid]))</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If middle element is not peak</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and its left neighbor is</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// greater than it, then left half</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// must have a peak element</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(mid &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; arr[mid - </code><code class="value">1</code><code class="plain">] &gt; arr[mid])</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findPeakUtil(arr, low, (mid - </code><code class="value">1</code><code class="plain">), n);</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If middle element is not peak</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and its right neighbor</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is greater than it, then right</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// half must have a peak</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findPeakUtil(</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr, (mid + </code><code class="value">1</code><code class="plain">), high, n);</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A wrapper over recursive function</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// findPeakUtil()</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPeak(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findPeakUtil(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, n);</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver method</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Index of a peak point is "</code> <code class="plain">+ findPeak(arr, n));</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of a peak point is 2


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log N), Where N is the number of elements in the input array.&nbsp;</span><br><b><strong>Auxiliary Space:</strong></b><span> O(log N), As recursive call is there, hence implicit stack is used.</span></p>
 <h2><span>Find a peak element using iterative </span><a href="https://www.geeksforgeeks.org/binary-search/"><span>Binary search</span></a></h2>
 <p dir="ltr"><span>Below is the idea to solve the problem.</span></p>
 <blockquote>
  <p dir="ltr"><span>Using Binary Search, check if the </span><b><strong>middle</strong></b><span> element is the peak element or not. If the middle element the peak element terminate the while loop and print </span><b><strong>middle element</strong></b><span>, then check if the element on the right side is greater than the middle element then there is always a peak element on the </span><b><strong>right side</strong></b><span>. If the element on the left side is greater than the middle element then there is always a peak element on the </span><b><strong>left side</strong></b><span>.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Follow the steps below to implement the idea:</span></p>
 <ul>
  <li value="1"><span>Create two variables, l and r, initialize l = 0 and r = n-1</span></li>
  <li value="2"><span>Run a while loop till </span><b><strong>l &lt;= r</strong></b><span>, lowerbound is less than the upperbound</span>
   <ul>
    <li value="1"><span>Check if the mid value or index mid = low + (high – low) / 2,&nbsp;is the peak element or not, if yes then print the element and terminate.</span></li>
    <li value="2"><span>Else if the element on the left side of the middle element is greater then check for peak element on the left side, i.e. update </span><i><em class="GFGEditorTheme__textItalic">r = mid – 1</em></i></li>
    <li value="3"><span>Else if the element on the right side of the middle element is greater then check for peak element on the right side, i.e. update&nbsp;</span><img src="https://quicklatex.com/cache3/b8/ql_87d7c1423818070f80fabe0ce10ed3b8_l3.png" class="ql-img-inline-formula quicklatex-auto-format" alt="l = mid + 1   " title="Rendered by QuickLaTeX.com" height="20" width="132" style="vertical-align: 31px;"></li>
   </ul></li>
 </ul>
 <p dir="ltr"><span>The below-given code is the iterative version of the above explained and demonstrated recursive based divide and conquer technique.</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_144192" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Java program to find a peak element using divide and</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// conquer</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A binary search based function that returns index of</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a peak element</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPeak(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = n-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt;= r) {</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// finding mid by binary right shifting.</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mid = (l + r) &gt;&gt; </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first case if mid is the answer</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((mid == </code><code class="value">0</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">|| arr[mid - </code><code class="value">1</code><code class="plain">] &lt;= arr[mid])</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; (mid == n - </code><code class="value">1</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">|| arr[mid + </code><code class="value">1</code><code class="plain">] &lt;= arr[mid]))</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// move the right pointer</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; arr[mid - </code><code class="value">1</code><code class="plain">] &gt; arr[mid])</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// move the left pointer</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">0</code> <code class="plain">};</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of a peak point is "</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ findPeak(arr, n));</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="comments">// This code is contributed by Rajdeep Mallick (rajdeep999)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Index of a peak point is 2


</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(log N), Where n is the number of elements in the input array. In each step our search becomes half. So it can be compared to Binary search, So the time complexity is O(log N)</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1), No extra space is required, so the space complexity is constant.</span></p>
 <p dir="ltr" style="text-align: left"><b><strong>Exercise:</strong></b><span>&nbsp;</span><br><span>Consider the following modified definition of peak element. An array element is a peak if it is greater than its neighbors. Note that an array may not contain a peak element with this modified definition.</span></p>
 <p dir="ltr" style="text-align: left"><b><strong>Related Problem:</strong></b><span>&nbsp;</span><br><a href="https://www.geeksforgeeks.org/find-local-minima-array/"><b><strong>Find local minima in an array</strong></b></a></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/quickhull-algorithm-convex-hull/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/quickhull-algorithm-convex-hull/?ref=lbp">Quickhull Algorithm for Convex Hull</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Maximum and minimum of an array using minimum number of comparisons</div> --> 
  <h1>Maximum and minimum of an array using minimum number of comparisons</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Arrays","Divide and Conquer","Numbers","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given an array of size </span><b><strong>N. </strong></b><span>The task is to find the maximum and the minimum element of the array using the minimum number of comparisons.</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input: </strong></b><span>arr[] = {3, 5, 4, 1, 9}</span><br><b><strong>Output: </strong></b><span>Minimum element is: 1</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Maximum element is: 9</span></p>
  <p dir="ltr"><b><strong>Input: </strong></b><span>arr[] = {22, 14, 8, 17, 35, 3}</span><br><b><strong>Output:&nbsp;</strong></b><span> Minimum element is: 3</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Maximum element is: 35</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://practice.geeksforgeeks.org/problems/max-min/1/">Max Min</a>
    </div>
   </div>
   <div class="redirect"><a href="https://practice.geeksforgeeks.org/problems/max-min/1/">Try It!</a>
   </div>
  </div>
 </div>
 <div>
   &nbsp; 
 </div>
 <h2><u><span class="GFGEditorTheme__textUnderline">Maximum and minimum of an array using </span></u><a href="https://www.geeksforgeeks.org/sorting-algorithms/" rel=""><u><span class="GFGEditorTheme__textUnderline">Sorting</span></u></a><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>One approach to find the maximum and minimum element in an array is to first sort the array in ascending order. Once the array is sorted, the first element of the array will be the minimum element and the last element of the array will be the maximum element.</span></p>
 </blockquote>
 <p dir="ltr"><span>Step-by-step approach:</span></p>
 <ul>
  <li value="1"><span>Initialize an array.</span></li>
  <li value="2"><span>Sort the array in ascending order.</span></li>
  <li value="3"><span>The first element of the array will be the minimum element.</span></li>
  <li value="4"><span>The last element of the array will be the maximum element.</span></li>
  <li value="5"><span>Print the minimum and maximum element.</span></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_550734" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Pair {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">min;</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">max;</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">}</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">Pair getMinMax(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = </code><code class="keyword">new</code> <code class="plain">Pair();</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr);</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[n - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1000</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">445</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">330</code><code class="plain">, </code><code class="value">3000</code> <code class="plain">};</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr_size = arr.length;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = getMinMax(arr, arr_size);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Minimum element is "</code> <code class="plain">+ minmax.min);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Maximum element is "</code> <code class="plain">+ minmax.max);</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Minimum element is 1
Maximum element is 3000


</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: </strong></b><span>O(n log n), where n is the number of elements in the array, as we are using a sorting algorithm.</span><br><b><strong>Auxilary Space</strong></b><span>: is O(1), as we are not using any extra space.</span></p>
 <h3><b><strong>Number of Comparisons:</strong></b></h3>
 <p dir="ltr"><span>The number of comparisons made to find the minimum and maximum elements is equal to the number of comparisons made during the sorting process. For any comparison-based sorting algorithm, the minimum number of comparisons required to sort an array of n elements is O(n log n). Hence, the number of comparisons made in this approach is also </span><b><strong>O(n log n)</strong></b><span>.</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">Maximum and minimum of an array using </span></u><a href="https://www.geeksforgeeks.org/linear-search/" rel=""><u><span class="GFGEditorTheme__textUnderline">Linear search</span></u></a><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>Initialize values of min and max as minimum and maximum of the first two elements respectively. Starting from 3rd, compare each element with max and min, and change max and min accordingly (i.e., if the element is smaller than min then change min, else if the element is greater than max then change max, else ignore the element)&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_293083" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="comments">// Java program of above implementation</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="comments">/* Class Pair is used to return two values from getMinMax() */</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">Pair {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">Pair getMinMax(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = </code><code class="keyword">new</code>&nbsp; <code class="plain">Pair();</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*If there is only one element then return it as min and max both*/</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n == </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are more than one elements, then initialize min </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">and max*/</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[</code><code class="value">0</code><code class="plain">] &gt; arr[</code><code class="value">1</code><code class="plain">]) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">2</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; minmax.max) {</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[i];</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[i] &lt; minmax.min) {</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[i];</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1000</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">445</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">330</code><code class="plain">, </code><code class="value">3000</code><code class="plain">};</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr_size = </code><code class="value">6</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = getMinMax(arr, arr_size);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"\nMinimum element is %d"</code><code class="plain">, minmax.min);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"\nMaximum element is %d"</code><code class="plain">, minmax.max);</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <pre>Minimum element is 1
Maximum element is 3000

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary Space:</strong></b><i><b><strong class="GFGEditorTheme__textItalic"> </strong></b></i><span>O(1) as no extra space was needed.</span></p>
 <h3><span>Number of Comparisons:</span></h3>
 <p dir="ltr"><span>In this method, the total number of comparisons is </span><b><strong>1 + 2*(n-2)</strong></b><span> in the worst case and </span><b><strong>1 + (n-2)</strong></b><span> in the best case.&nbsp;</span><br><span>In the above implementation, the worst case occurs when elements are sorted in descending order and the best case occurs when elements are sorted in ascending order.</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">Maximum and minimum of an array using the Tournament Mmethod:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>The idea is to divide the array into two parts and compare the maximums and minimums of the two parts to get the maximum and the minimum of the whole array.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_98181" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// Java program of above implementation</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Class Pair is used to return two values from</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">* getMinMax() */</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">Pair {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">Pair getMinMax(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = </code><code class="keyword">new</code> <code class="plain">Pair();</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair mml = </code><code class="keyword">new</code> <code class="plain">Pair();</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair mmr = </code><code class="keyword">new</code> <code class="plain">Pair();</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there is only one element</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(low == high) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[low];</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[low];</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are two elements */</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high == low + </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[low] &gt; arr[high]) {</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[low];</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[high];</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[high];</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[low];</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If there are more than 2 elements */</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mid = (low + high) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mml = getMinMax(arr, low, mid);</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mmr = getMinMax(arr, mid + </code><code class="value">1</code><code class="plain">, high);</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* compare minimums of two parts*/</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mml.min &lt; mmr.min) {</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = mml.min;</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = mmr.min;</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* compare maximums of two parts*/</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mml.max &gt; mmr.max) {</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = mml.max;</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = mmr.max;</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1000</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">445</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">330</code><code class="plain">, </code><code class="value">3000</code> <code class="plain">};</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr_size = </code><code class="value">6</code><code class="plain">;</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = getMinMax(arr, </code><code class="value">0</code><code class="plain">, arr_size - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"\nMinimum element is %d"</code><code class="plain">,</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min);</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"\nMaximum element is %d"</code><code class="plain">,</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max);</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Minimum element is 1
Maximum element is 3000

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity: </strong></b><span>O(n)</span><br><b><strong>Auxiliary Space:</strong></b><i><b><strong class="GFGEditorTheme__textItalic"> </strong></b></i><span>O(log n) as the stack space will be filled for the maximum height of the tree formed during recursive calls same as a binary tree.</span></p>
 <h3><span>Number of Comparisons:</span></h3>
 <p dir="ltr"><span>Let the number of comparisons be T(n). T(n) can be written as follows:&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>T(n) = T(floor(n/2)) + T(ceil(n/2)) + 2</span><br><span>T(2) = 1</span><br><span>T(1) = 0</span></p>
 </blockquote>
 <p dir="ltr"><span>If n is a power of 2, then we can write T(n) as:&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>T(n) = 2T(n/2) + 2</span></p>
  <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 </blockquote>
 <p dir="ltr"><span>After solving the above recursion, we get&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>T(n) = 3n/2 -2</span></p>
 </blockquote>
 <p dir="ltr"><span>Thus, the approach does </span><b><strong>3n/2 -2</strong></b><span> comparisons if n is a power of 2. And it does more than 3n/2 -2 comparisons if n is not a power of 2.</span></p>
 <h2><u><span class="GFGEditorTheme__textUnderline">Maximum and minimum of an array by comparing in pairs:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>The idea is that when n is odd then initialize min and max as the first element.&nbsp;If n is even then initialize min and max as minimum and maximum of the first two elements respectively.&nbsp;For the rest of the elements, pick them in pairs and compare their&nbsp;maximum and minimum with max and min respectively.&nbsp;</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_40344" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// Java program of above implementation</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="comments">/* Class Pair is used to return two values from getMinMax() */</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">Pair {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">min;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">max;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">Pair getMinMax(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n) {</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = </code><code class="keyword">new</code> <code class="plain">Pair();</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If array has even number of elements then&nbsp; </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">initialize the first two elements as minimum and&nbsp; </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">maximum */</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[</code><code class="value">0</code><code class="plain">] &gt; arr[</code><code class="value">1</code><code class="plain">]) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i = </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* set the starting index for loop */</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="comments">/* If array has odd number of elements then&nbsp; </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">initialize the first element as minimum and&nbsp; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">maximum */</code> <code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* set the starting index for loop */</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* In the while loop, pick elements in pair and&nbsp; </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">compare the pair with max and min so far */</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; n - </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; arr[i + </code><code class="value">1</code><code class="plain">]) {</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; minmax.max) {</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[i];</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i + </code><code class="value">1</code><code class="plain">] &lt; minmax.min) {</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[i + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i + </code><code class="value">1</code><code class="plain">] &gt; minmax.max) {</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.max = arr[i + </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &lt; minmax.min) {</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minmax.min = arr[i];</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i += </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Increment the index by 2 as two&nbsp; </code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements are processed in loop */</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minmax;</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">1000</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">445</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">330</code><code class="plain">, </code><code class="value">3000</code><code class="plain">};</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr_size = </code><code class="value">6</code><code class="plain">;</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair minmax = getMinMax(arr, arr_size);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"Minimum element is %d"</code><code class="plain">, minmax.min);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"\nMaximum element is %d"</code><code class="plain">, minmax.max);</code>
           </div>
           <div class="line number71 index70 alt2">
             &nbsp; 
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number73 index72 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Minimum element is 1
Maximum element is 3000

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n)</span><br><b><strong>Auxiliary</strong></b><i><b><strong class="GFGEditorTheme__textItalic"> </strong></b></i><b><strong>Space:</strong></b><i><b><strong class="GFGEditorTheme__textItalic"> </strong></b></i><span>O(1) as no extra space was needed.</span></p>
 <h3><span>Number of Comparisons:</span></h3>
 <p dir="ltr"><span>The total number of comparisons: Different for even and odd n, see below:&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>If n is odd: 3*(n-1)/2 </span></p>
  <p dir="ltr"><span>If n is even: 1 + 3*(n-2)/2 = 3n/2-2, 1 comparison for initializing min and max, </span><br><span> and 3(n-2)/2 comparisons for rest of the elements </span></p>
 </blockquote>
 <p dir="ltr"><span>The third and fourth approaches make an equal number of comparisons when n is a power of 2.&nbsp;</span><br><span>In general, method 4 seems to be the best.</span><br><span>Please write comments if you find any bug in the above programs/algorithms or a better way to solve the same problem.</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/square-root-of-an-integer/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/square-root-of-an-integer/?ref=lbp">Square root of an integer</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find a Fixed Point (Value equal to index) in a given array</div> --> 
  <h1>Find a Fixed Point (Value equal to index) in a given array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","FactSet","Hike"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given an array of n distinct integers sorted in ascending order, write a function that returns a Fixed Point in the array, if there is any Fixed Point present in array, else returns -1. Fixed Point in an array is an index i such that arr[i] is equal to i. Note that integers in array can be negative.&nbsp;<br>Examples:&nbsp;<br>&nbsp;</p>
 <pre>  Input: arr[] = {-10, -5, 0, 3, 7}
  Output: 3  // arr[3] == 3 

  Input: arr[] = {0, 2, 5, 8, 17}
  Output: 0  // arr[0] == 0 


  Input: arr[] = {-10, -5, 3, 4, 7, 9}
  Output: -1  // No Fixed Point</pre>
 <p>&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/value-equal-to-index-value1330/1/" title="Permalink to Value equal to index value" permalink="">Value equal to index value</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/value-equal-to-index-value1330/1/" title="Permalink to Value equal to index value" permalink="">Try It!</a>
   </div>
  </div>
 </div>
 <p><strong>Method 1 (Linear Search)&nbsp;</strong><br>Linearly search for an index i such that arr[i] == i. Return the first such index found. Thanks to pm for suggesting this solution.&nbsp;<br>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_801751" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to check fixed point </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// in an array using linear search </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">linearSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n) </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) { </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == i) </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i; </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If no fixed point present&nbsp; </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">then return -1 */</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { -</code><code class="value">10</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">100</code> <code class="plain">}; </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Fixed Point is "</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ linearSearch(arr, n)); </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">} </code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:</strong>&nbsp;&nbsp;</p>
 <pre>Fixed Point is 3</pre>
 <p><strong>Time Complexity:</strong> O(n)&nbsp;<br><strong>Auxiliary Space: </strong>O(1)&nbsp;</p>
 <p><strong>Method 2 (Binary Search)</strong>&nbsp;<br>First check whether middle element is Fixed Point or not. If it is, then return it; otherwise if the index of middle + 1 element is less than or equal to the value at the high index, then Fixed Point(s) might lie on the right side of the middle point (obviously only if there is a Fixed Point). Similarly, check if the index of middle – 1 element is greater than or equal to the value at the low index, then Fixed Point(s) might lie on the left side of the middle point.&nbsp;<br>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_121543" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to check fixed point </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// in an array using binary search </code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high) </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(high &gt;= low) { </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + (high - low) / </code><code class="value">2</code><code class="plain">; </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid == arr[mid]) </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res = -</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid + </code><code class="value">1</code> <code class="plain">&lt;= arr[high]) </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res = binarySearch(arr, (mid + </code><code class="value">1</code><code class="plain">), high); </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(res != -</code><code class="value">1</code><code class="plain">) </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">res; </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid - </code><code class="value">1</code> <code class="plain">&gt;= arr[low]) </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, low, (mid - </code><code class="value">1</code><code class="plain">)); </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Return -1 if there is no Fixed Point */</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main function </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { -</code><code class="value">10</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">100</code> <code class="plain">}; </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Fixed Point is "</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">)); </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number33 index32 alt2"><code class="plain">} </code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p>Output:&nbsp;<br>&nbsp;</p>
 <pre>Fixed Point is 3</pre>
 <p>Algorithmic Paradigm: Divide &amp; Conquer&nbsp;</p>
 <p><strong>Time Complexity: </strong>O(log n)</p>
 <p><strong>Auxiliary Space</strong>: O(log n) (As implicit stack is used for recursive calls)<br>&nbsp;</p>
 <p><a href="https://www.geeksforgeeks.org/find-fixed-point-value-equal-index-given-array-duplicates-allowed/">Find a Fixed Point (Value equal to index) in a given array | Duplicates Allowed</a></p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/?ref=lbp">Find the Minimum element in a Sorted and Rotated Array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the k most frequent words from a file</div> --> 
  <h1>Find the k most frequent words from a file</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Advanced Data Structure","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given a book of words. Assume you have enough main memory to accommodate all words. design a data structure to find top K maximum occurring words. The data structure should be dynamic so that new words can be added.&nbsp;</span><br><span>A simple solution is to </span><b><strong>use Hashing</strong></b><span>. Hash all words one by one in a hash table. If a word is already present, then increment its count. Finally, traverse through the hash table and return the k words with maximum counts.</span><br><span>We can </span><b><strong>use Trie and Min Heap</strong></b><span> to get the k most frequent words efficiently. The idea is to use Trie for searching existing words adding new words efficiently. Trie also stores count of occurrences of words. A Min Heap of size k is used to keep track of k most frequent words at any point of time(Use of Min Heap is same as we used it to find k largest elements in </span><a href="https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/"><span>this</span></a><span> post).&nbsp;</span><br><span>Trie and Min Heap are linked with each other by storing an additional field in Trie ‘indexMinHeap’ and a pointer ‘trNode’ in Min Heap. The value of ‘indexMinHeap’ is maintained as -1 for the words which are currently not in Min Heap (or currently not among the top k frequent words). For the words which are present in Min Heap, ‘indexMinHeap’ contains, index of the word in Min Heap. The pointer ‘trNode’ in Min Heap points to the leaf node corresponding to the word in Trie.</span><br><span>Following is the complete process to print k most frequent words from a file.</span><br><span>Read all words one by one. For every word, insert it into Trie. Increase the counter of the word, if already exists. Now, we need to insert this word in min heap also. For insertion in min heap, 3 cases arise:</span><br><b><strong>1.</strong></b><span> The word is already present. We just increase the corresponding frequency value in min heap and call minHeapify() for the index obtained by “indexMinHeap” field in Trie. When the min heap nodes are being swapped, we change the corresponding minHeapIndex in the Trie. Remember each node of the min heap is also having pointer to Trie leaf node.</span><br><b><strong>2.</strong></b><span> The minHeap is not full. we will insert the new word into min heap &amp; update the root node in the min heap node &amp; min heap index in Trie leaf node. Now, call buildMinHeap().</span><br><b><strong>3.</strong></b><span> The min heap is full. Two sub-cases arise.&nbsp;</span><br><span>….</span><b><strong>3.1</strong></b><span> The frequency of the new word inserted is less than the frequency of the word stored in the head of min heap. Do nothing.</span><br><span>….</span><b><strong>3.2</strong></b><span> The frequency of the new word inserted is greater than the frequency of the word stored in the head of min heap. Replace &amp; update the fields. Make sure to update the corresponding min heap index of the “word to be replaced” in Trie with -1 as the word is no longer in min heap.</span><br><b><strong>4.</strong></b><span> Finally, Min Heap will have the k most frequent words of all words present in given file. So we just need to print all words present in Min Heap.&nbsp;</span><br><span>&nbsp;</span></p>
 <p><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_841385" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.File;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.FileNotFoundException;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Scanner;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">TrieNode {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">isEnd;</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">frequency;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">indexMinHeap;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TrieNode[] child;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">TrieNode() {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">isEnd = </code><code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">frequency = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">indexMinHeap = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">child = </code><code class="keyword">new</code> <code class="plain">TrieNode[</code><code class="value">26</code><code class="plain">]; </code><code class="comments">// Represents 26 slots for 'a' to 'z'</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number17 index16 alt2"><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="keyword">class</code> <code class="plain">MinHeapNode {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TrieNode root;</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">frequency;</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String word;</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">MinHeapNode(TrieNode root, </code><code class="keyword">int</code> <code class="plain">frequency, String word) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.root = root;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.frequency = frequency;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.word = word;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="keyword">class</code> <code class="plain">MinHeap {</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">capacity;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MinHeapNode[] array;</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">MinHeap(</code><code class="keyword">int</code> <code class="plain">capacity) {</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.capacity = capacity;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.count = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.array = </code><code class="keyword">new</code> <code class="plain">MinHeapNode[capacity];</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2"><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">KMostFrequentWords {</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Utility function to create a new Trie node</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="plain">TrieNode newTrieNode() {</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TrieNode trieNode = </code><code class="keyword">new</code> <code class="plain">TrieNode();</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">trieNode;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Utility function to create a Min Heap of given capacity</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="plain">MinHeap createMinHeap(</code><code class="keyword">int</code> <code class="plain">capacity) {</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MinHeap minHeap = </code><code class="keyword">new</code> <code class="plain">MinHeap(capacity);</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">minHeap;</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1">
             &nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Build Min Heap</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">buildMinHeap(MinHeap minHeap) {</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = minHeap.count - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = (n - </code><code class="value">1</code><code class="plain">) / </code><code class="value">2</code><code class="plain">; i &gt;= </code><code class="value">0</code><code class="plain">; --i)</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(minHeap, i);</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Insert a word into the Min Heap</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">insertInMinHeap(MinHeap minHeap, TrieNode root, String word) {</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(root.indexMinHeap != -</code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[root.indexMinHeap].frequency += </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(minHeap, root.indexMinHeap);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(minHeap.count &lt; minHeap.capacity) {</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = minHeap.count;</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[count] = </code><code class="keyword">new</code> <code class="plain">MinHeapNode(root, root.frequency, word);</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">root.indexMinHeap = minHeap.count;</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.count += </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">buildMinHeap(minHeap);</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(root.frequency &gt; minHeap.array[</code><code class="value">0</code><code class="plain">].frequency) {</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[</code><code class="value">0</code><code class="plain">].root.indexMinHeap = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[</code><code class="value">0</code><code class="plain">].root = root;</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[</code><code class="value">0</code><code class="plain">].root.indexMinHeap = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[</code><code class="value">0</code><code class="plain">].frequency = root.frequency;</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[</code><code class="value">0</code><code class="plain">].word = word;</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(minHeap, </code><code class="value">0</code><code class="plain">);</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number84 index83 alt1">
             &nbsp; 
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Insert a word into Trie and Min Heap</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">insertUtil(TrieNode root, MinHeap minHeap, String word, String dupWord) {</code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(root == </code><code class="keyword">null</code><code class="plain">)</code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">root = newTrieNode();</code>
           </div>
           <div class="line number89 index88 alt2">
             &nbsp; 
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(!word.isEmpty())</code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">insertUtil(root.child[word.toLowerCase().charAt(</code><code class="value">0</code><code class="plain">) - </code><code class="string">'a'</code><code class="plain">], minHeap, word.substring(</code><code class="value">1</code><code class="plain">), dupWord);</code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(root.isEnd)</code>
           </div>
           <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">root.frequency += </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">root.isEnd = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">root.frequency = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">insertInMinHeap(minHeap, root, dupWord);</code>
           </div>
           <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number102 index101 alt1">
             &nbsp; 
           </div>
           <div class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Wrapper for inserting into Trie and Min Heap</code>
           </div>
           <div class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">insertTrieAndHeap(String word, TrieNode root, MinHeap minHeap) {</code>
           </div>
           <div class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">insertUtil(root, minHeap, word, word);</code>
           </div>
           <div class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number107 index106 alt2">
             &nbsp; 
           </div>
           <div class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display the contents of the Min Heap</code>
           </div>
           <div class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">displayMinHeap(MinHeap minHeap) {</code>
           </div>
           <div class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; minHeap.count; ++i) {</code>
           </div>
           <div class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(minHeap.array[i].word + </code><code class="string">": "</code> <code class="plain">+ minHeap.array[i].frequency);</code>
           </div>
           <div class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number114 index113 alt1">
             &nbsp; 
           </div>
           <div class="line number115 index114 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Standard Min Heapify function</code>
           </div>
           <div class="line number116 index115 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">minHeapify(MinHeap minHeap, </code><code class="keyword">int</code> <code class="plain">idx) {</code>
           </div>
           <div class="line number117 index116 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">left, right, smallest;</code>
           </div>
           <div class="line number118 index117 alt1">
             &nbsp; 
           </div>
           <div class="line number119 index118 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = </code><code class="value">2</code> <code class="plain">* idx + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number120 index119 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = </code><code class="value">2</code> <code class="plain">* idx + </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number121 index120 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">smallest = idx;</code>
           </div>
           <div class="line number122 index121 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(left &lt; minHeap.count &amp;&amp; minHeap.array[left].frequency &lt; minHeap.array[smallest].frequency)</code>
           </div>
           <div class="line number123 index122 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">smallest = left;</code>
           </div>
           <div class="line number124 index123 alt1">
             &nbsp; 
           </div>
           <div class="line number125 index124 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(right &lt; minHeap.count &amp;&amp; minHeap.array[right].frequency &lt; minHeap.array[smallest].frequency)</code>
           </div>
           <div class="line number126 index125 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">smallest = right;</code>
           </div>
           <div class="line number127 index126 alt2">
             &nbsp; 
           </div>
           <div class="line number128 index127 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(smallest != idx) {</code>
           </div>
           <div class="line number129 index128 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[smallest].root.indexMinHeap = idx;</code>
           </div>
           <div class="line number130 index129 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[idx].root.indexMinHeap = smallest;</code>
           </div>
           <div class="line number131 index130 alt2">
             &nbsp; 
           </div>
           <div class="line number132 index131 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MinHeapNode temp = minHeap.array[smallest];</code>
           </div>
           <div class="line number133 index132 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[smallest] = minHeap.array[idx];</code>
           </div>
           <div class="line number134 index133 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeap.array[idx] = temp;</code>
           </div>
           <div class="line number135 index134 alt2">
             &nbsp; 
           </div>
           <div class="line number136 index135 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minHeapify(minHeap, smallest);</code>
           </div>
           <div class="line number137 index136 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number138 index137 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number139 index138 alt2">
             &nbsp; 
           </div>
           <div class="line number140 index139 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main function to read words from a file and print k most frequent words</code>
           </div>
           <div class="line number141 index140 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printKMostFreq(String filePath, </code><code class="keyword">int</code> <code class="plain">k) </code><code class="keyword">throws</code> <code class="plain">FileNotFoundException {</code>
           </div>
           <div class="line number142 index141 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MinHeap minHeap = createMinHeap(k);</code>
           </div>
           <div class="line number143 index142 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TrieNode root = </code><code class="keyword">null</code><code class="plain">;</code>
           </div>
           <div class="line number144 index143 alt1">
             &nbsp; 
           </div>
           <div class="line number145 index144 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">(Scanner scanner = </code><code class="keyword">new</code> <code class="plain">Scanner(</code><code class="keyword">new</code> <code class="plain">File(filePath))) {</code>
           </div>
           <div class="line number146 index145 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(scanner.hasNext()) {</code>
           </div>
           <div class="line number147 index146 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String[] words = scanner.next().split(</code><code class="string">"\\s+"</code><code class="plain">);</code>
           </div>
           <div class="line number148 index147 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(String word : words) {</code>
           </div>
           <div class="line number149 index148 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">insertTrieAndHeap(word, root, minHeap);</code>
           </div>
           <div class="line number150 index149 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number151 index150 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number152 index151 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number153 index152 alt2">
             &nbsp; 
           </div>
           <div class="line number154 index153 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">displayMinHeap(minHeap);</code>
           </div>
           <div class="line number155 index154 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number156 index155 alt1">
             &nbsp; 
           </div>
           <div class="line number157 index156 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number158 index157 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number159 index158 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String filePath = </code><code class="string">"/file.txt"</code><code class="plain">;</code>
           </div>
           <div class="line number160 index159 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code>
           </div>
           <div class="line number161 index160 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printKMostFreq(filePath, k);</code>
           </div>
           <div class="line number162 index161 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">catch</code> <code class="plain">(FileNotFoundException e) {</code>
           </div>
           <div class="line number163 index162 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"File doesn't exist."</code><code class="plain">);</code>
           </div>
           <div class="line number164 index163 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number165 index164 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number166 index165 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>Output:&nbsp;</span></p>
 <pre><span>your : 3</span><br><span>well : 3</span><br><span>and : 4</span><br><span>to : 4</span><br><span>Geeks : 6</span><br></pre>
 <p dir="ltr"><span>The above output is for a file with following content.&nbsp;</span></p>
 <pre><span>Welcome to the world of Geeks </span><br><span>This portal has been created to provide well written well thought and well explained </span><br><span>solutions for selected questions If you like Geeks for Geeks and would like to contribute </span><br><span>here is your chance You can write article and mail your article to contribute at </span><br><span>geeksforgeeks org See your article appearing on the Geeks for Geeks main page and help </span><br><span>thousands of other Geeks</span><br></pre>
 <p dir="ltr"><span></span><br><span>&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-a-fixed-point-in-a-given-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-a-fixed-point-in-a-given-array/?ref=lbp">Find a Fixed Point (Value equal to index) in a given array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find k closest elements to a given value</div> --> 
  <h1>Find k closest elements to a given value</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given a sorted array arr[] and a value X, find the k closest elements to X in arr[].&nbsp;</span></p>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <pre><b><strong>Input:</strong></b><span> K = 4, X = 35</span><br><span>       arr[] = {12, 16, 22, 30, 35, 39, 42, </span><br><span>               45, 48, 50, 53, 55, 56}</span><br><b><strong>Output:</strong></b><span> 30 39 42 45</span><br></pre>
 <p dir="ltr"><span>Note that if the element is present in array, then it should not be in output, only the other closest elements are required.</span></p>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/k-closest-elements3619/1/">K closest elements</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/k-closest-elements3619/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p dir="ltr"><span>In the following solutions, it is assumed that all elements of array are distinct.</span></p>
 <blockquote>
  <p dir="ltr"><span>A </span><b><strong>simple solution </strong></b><span>is to do linear search for k closest elements.&nbsp;</span></p>
  <ol>
   <li value="1"><span>Start from the first element and search for the crossover point (The point before which elements are smaller than or equal to X and after which elements are greater). This step takes O(n) time.&nbsp;</span></li>
   <li value="2"><span>Once we find the crossover point, we can compare elements on both sides of crossover point to print k closest elements. This step takes O(k) time.</span></li>
  </ol>
  <p dir="ltr"><span>The time complexity of the above solution is O(n).</span></p>
 </blockquote>
 <p dir="ltr"><span>An </span><b><strong>Optimized Solution</strong></b><span> is to find k elements in O(Logn + k) time. The idea is to use </span><a href="https://www.geeksforgeeks.org/binary-search/"><span>Binary Search</span></a><span> to find the crossover point. Once we find index of crossover point, we can print k closest elements in O(k) time.&nbsp;&nbsp;</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_451914" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find k closest elements to a given value</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">KClosest</code>
           </div>
           <div class="line number3 index2 alt2"><code class="plain">{</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Function to find the cross over point (the point before</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">which elements are smaller than or equal to x and after</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">which greater than x)*/</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">findCrossOver(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">low, </code><code class="keyword">int</code> <code class="plain">high, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Base cases</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[high] &lt;= x) </code><code class="comments">// x is greater than all</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">high;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[low] &gt; x)&nbsp; </code><code class="comments">// x is smaller than all</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the middle point</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (low + high)/</code><code class="value">2</code><code class="plain">;&nbsp; </code><code class="comments">/* low + (high - low)/2 */</code>
           </div>
           <div class="line number17 index16 alt2">
             &nbsp; 
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is same as middle element, then return mid */</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &lt;= x &amp;&amp; arr[mid+</code><code class="value">1</code><code class="plain">] &gt; x)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* If x is greater than arr[mid], then either arr[mid + 1]</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">is ceiling of x or ceiling lies in arr[mid+1...high] */</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(arr[mid] &lt; x)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findCrossOver(arr, mid+</code><code class="value">1</code><code class="plain">, high, x);</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">findCrossOver(arr, low, mid - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function prints k closest elements to x in arr[].</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// n is the number of elements in arr[]</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">printKclosest(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">k, </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the crossover point</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = findCrossOver(arr, </code><code class="value">0</code><code class="plain">, n-</code><code class="value">1</code><code class="plain">, x); </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = l+</code><code class="value">1</code><code class="plain">;&nbsp;&nbsp; </code><code class="comments">// Right index to search</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = </code><code class="value">0</code><code class="plain">; </code><code class="comments">// To keep track of count of elements</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// already printed</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If x is present in arr[], then reduce left index</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Assumption: all elements in arr[] are distinct</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[l] == x) l--;</code>
           </div>
           <div class="line number43 index42 alt2">
             &nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Compare elements on left and right of crossover</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// point to find the k closest elements</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &gt;= </code><code class="value">0</code> <code class="plain">&amp;&amp; r &lt; n &amp;&amp; count &lt; k)</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(x - arr[l] &lt; arr[r] - x)</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[l--]+</code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[r++]+</code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there are no more elements on right side, then</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// print left elements</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(count &lt; k &amp;&amp; l &gt;= </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[l--]+</code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number62 index61 alt1">
             &nbsp; 
           </div>
           <div class="line number63 index62 alt2">
             &nbsp; 
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there are no more elements on left side, then</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// print right elements</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(count &lt; k &amp;&amp; r &lt; n)</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(arr[r++]+</code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number72 index71 alt1">
             &nbsp; 
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to check above functions */</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">KClosest ob = </code><code class="keyword">new</code> <code class="plain">KClosest();</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">12</code><code class="plain">, </code><code class="value">16</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">42</code><code class="plain">,</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">45</code><code class="plain">, </code><code class="value">48</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">53</code><code class="plain">, </code><code class="value">55</code><code class="plain">, </code><code class="value">56</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">35</code><code class="plain">, k = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ob.printKclosest(arr, x, </code><code class="value">4</code><code class="plain">, n);</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number84 index83 alt1"><code class="plain">}</code>
           </div>
           <div class="line number85 index84 alt2"><code class="comments">/* This code is contributed by Rajat Mishra */</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>39 30 42 45 
</pre>
 </div>
 <p dir="ltr"><b><strong>Time complexity: </strong></b><span>O(Logn + k).</span><br><b><strong>Auxiliary Space: O(1), </strong></b><span>since no extra space has been used.</span></p>
 <p dir="ltr"><b><strong>Approach 2: Using Priority Queue</strong></b></p>
 <blockquote>
  <p dir="ltr"><span>This approach uses a priority queue (max heap) to maintain the k closest numbers to x. It iterates over the elements in the array and calculates their absolute differences from x. The pairs of absolute differences and negative values are pushed into the max heap. If the size of the max heap exceeds k, the element with the maximum absolute difference is removed. Finally, the top k elements from the max heap are extracted and stored in a result vector. The vector is then reversed to obtain the closest numbers in ascending order before being returned as the result.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_852362" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Create pair class which implements Comparable</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// interface</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">Pair </code><code class="keyword">implements</code> <code class="plain">Comparable&lt;Pair&gt; {</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">absDiff;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ind;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Pair(</code><code class="keyword">int</code> <code class="plain">f, </code><code class="keyword">int</code> <code class="plain">s)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">absDiff = f;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ind = s;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">compareTo(GFG.Pair o)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If there are two elements with the same</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// difference with X, the greater element is</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// given priority.</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(absDiff == o.absDiff)</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ind - o.ind;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">o.absDiff - absDiff;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code><code class="plain">[] printKClosest(</code><code class="keyword">int</code><code class="plain">[] nums, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">k,</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Pair&gt; maxHeap = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;();</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; nums.length; i++) {</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = Math.abs(nums[i] - x);</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//if nums[i] == x then no need to consider that element</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(diff != </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxHeap.add(</code><code class="keyword">new</code> <code class="plain">Pair(diff, i));</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//if maxheap size exceeds k then remove the element with maximum absolute difference</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(maxHeap.size() &gt; k)</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">maxHeap.poll();</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans[] = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[k];</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!maxHeap.isEmpty()) {</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//Add the remaining elements to the answer</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans[j] = nums[maxHeap.poll().ind];</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// reverse the array to get elements closest elements in ascending order</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; k / </code><code class="value">2</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">t = ans[i];</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans[i] = ans[k - i - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans[k - i - </code><code class="value">1</code><code class="plain">] = t;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">12</code><code class="plain">, </code><code class="value">16</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">35</code><code class="plain">, </code><code class="value">39</code><code class="plain">, </code><code class="value">42</code><code class="plain">,</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">45</code><code class="plain">, </code><code class="value">48</code><code class="plain">, </code><code class="value">50</code><code class="plain">, </code><code class="value">53</code><code class="plain">, </code><code class="value">55</code><code class="plain">, </code><code class="value">56</code> <code class="plain">};</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">4</code><code class="plain">, x = </code><code class="value">35</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans[] = printKClosest(arr, arr.length, k, x);</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Arrays.toString(ans));</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <pre>39 30 42 45 

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(n log k), where n is the size of the array and k is the number of elements to be returned. The priority queue takes O(log k) time to insert an element and O(log k) time to remove the top element. Therefore, traversing through the array and inserting elements into the priority queue takes O(n log k) time. Popping elements from the priority queue and pushing them into the result vector takes O(k log k) time. Therefore, the total time complexity is O(n log k + k log k) which is equivalent to O(n log k).</span><br><b><strong>Auxiliary Space</strong></b><span>: O(k), as we are using a priority queue of size k+1 and a vector of size k to store the result.</span></p>
 <p dir="ltr"><b><strong>Exercise:</strong></b><span> Extend the optimized solution to work for duplicates also, i.e., to work for arrays where elements don’t have to be distinct.</span></p>
 <p dir="ltr"><b><strong>Approach 3: Two Pointer Approach </strong></b></p>
 <p dir="ltr"><b><strong>Initialization:</strong></b></p>
 <ul>
  <li value="1"><span>Initialize two pointers, left and right, pointing to the start and end of the array, respectively.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Binary Search:</strong></b></p>
 <ul>
  <li value="1"><span>Use a binary search-like approach to narrow down the range until right – left &gt;= k.</span></li>
  <li value="2"><span>Compare the absolute differences of the elements at left and right with the target.</span></li>
  <li value="3"><span>Move the pointers accordingly to minimize the absolute difference.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Print Result:</strong></b></p>
 <ul>
  <li value="1"><span>Print the k closest elements within the narrowed down range.</span></li>
 </ul>
 <div class="responsive-tabs">
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>30 35 39 42 
</pre>
 </div>
 <p dir="ltr"><span>The time complexity of the above solution is O(n) and doesn’t require any extra space.</span></p>
 <p dir="ltr"></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-the-k-most-frequent-words-from-a-file/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-the-k-most-frequent-words-from-a-file/?ref=lbp">Find the k most frequent words from a file</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Given a sorted array and a number x, find the pair in array whose sum is closest to x</div> --> 
  <h1>Given a sorted array and a number x, find the pair in array whose sum is closest to x</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching","Sorting","two-pointer-algorithm"]');
                                            </script> 
<div class="text"> 
 <p style="text-align:justify">Given a sorted array and a number x, find a pair in an array whose sum is closest to x.</p>
 <p style="text-align:justify"><strong>Examples:</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <pre><strong>Input</strong>: arr[] = {10, 22, 28, 29, 30, 40}, x = 54
<strong>Output</strong>: 22 and 30

<strong>Input:</strong> arr[] = {1, 3, 4, 7, 10}, x = 15
<strong>Output:</strong> 4 and 10</pre>
 <p style="text-align:justify"><strong>Naive Approach:- </strong>A simple solution is to consider every pair and keep track of the closest pair (the absolute difference between pair sum and x is minimum). Finally, print the closest pair. The time complexity of this solution is O(n<sup>2</sup>)</p>
 <p style="text-align:justify"><strong>Implementation:-&nbsp;</strong></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_396611" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Simple Java program to find the pair&nbsp; </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// with sum closest to a given no. </code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG { </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Function to Prints the pair with sum closest to x </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printClosest(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x) </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_l = </code><code class="value">0</code><code class="plain">, </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = </code><code class="value">0</code><code class="plain">; </code><code class="comments">// To store indexes of result pair </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// variable to store current minimum difference </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = Integer.MAX_VALUE; </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// iterating over array </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++) { </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = i + </code><code class="value">1</code><code class="plain">; j &lt; n; j++) { </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if found more closest pair </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(arr[i] + arr[j] - x) &lt; temp) { </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = i; </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = j; </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">temp = Math.abs(arr[i] + arr[j] - x); </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The closest pair is "</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[res_l] + </code><code class="string">" and "</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[res_r]); </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Driver program to test above functions </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">28</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">}; </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">54</code><code class="plain">; </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printClosest(arr, n, x); </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number41 index40 alt2"><code class="plain">} </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="comments">// This code is Contributed by Prasad Kandekar(prasad264)</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre> The closest pair is 22 and 30</pre>
 </div>
 <p><strong>Time Complexity:- </strong>O(N^2)<br><strong>Auxiliary Space:- </strong>O(1)</p>
 <p><strong>Binary Search Approach:- </strong>The more efficient solution than the above approach is to use <a href="https://www.geeksforgeeks.org/binary-search/">Binary Search</a> because the given array is in a sorted format.</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p><strong>Step-by-step algorithm for implementing the above approach:</strong></p>
 <ul>
  <li>Initialize variables: 
   <ul>
    <li><strong>l and r</strong> to point to the first and last elements of the array, respectively.</li>
    <li><strong>res_l and res_r </strong>to store the indexes of the closest pair.</li>
    <li><strong>minDiff</strong> to store the current minimum difference.</li>
   </ul></li>
  <li>&nbsp;Iterate over the array using a loop: 
   <ul>
    <li><strong>Set e</strong> to the current element.</li>
    <li>While <strong>left</strong> is less than or equal to<strong> right</strong>: 
     <ul>
      <li>Set mid to the middle element of the subarray.</li>
      <li>&nbsp;If <strong>arr[mid] + e</strong> is equal to<strong> x</strong>,&nbsp; 
       <ul>
        <li>set <strong>res_l to i,</strong> <strong>res_r to mid</strong>, and <strong>minDiff to 0</strong>. Break out of the loop.</li>
       </ul></li>
      <li>&nbsp;If <strong>abs(arr[mid] + e – x) </strong>is less than <strong>minDiff,</strong>
       <ul>
        <li>set <strong>minDiff</strong> to <strong>abs(arr[mid] + e – x) </strong>and <strong>res_l to i&nbsp;</strong></li>
       </ul></li>
      <li>&nbsp;and <strong>res_r to mid.</strong></li>
      <li>&nbsp;If <strong>arr[mid] + e</strong> is less than<strong> x,</strong> set <strong>left to mid + 1.</strong></li>
      <li>&nbsp;Otherwise, set<strong> right to mid – 1. &nbsp;&nbsp;</strong></li>
     </ul></li>
    <li>Set <strong>left and right </strong>to point to the first and last elements of the remaining subarray, respectively.&nbsp;</li>
   </ul></li>
  <li>&nbsp; Print the pair with the values of <strong>arr[res_l] and arr[res_r].</strong></li>
 </ul>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_338908" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main { </code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize the array </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">10</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">28</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code> <code class="plain">}; </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize the target sum </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">54</code><code class="plain">; </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Get the length of the array </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Call the closestPair function </code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">closestPair(arr, n, x); </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to find the pair with sum closest to a given </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// no using above approach </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">closestPair(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x) </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize variables pointing to the first and </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// last elements of the array </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = n - </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// To store indexes of result pair </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_l = </code><code class="value">0</code><code class="plain">, res_r = </code><code class="value">0</code><code class="plain">; </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// variable to store current minimum difference </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">minDiff = Integer.MAX_VALUE; </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Iterate over the array </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) { </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">e = arr[i]; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Use binary search to find the element 'elem' </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in the array such that 'e+elem' is closest to </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 'x'. </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">left = i + </code><code class="value">1</code><code class="plain">, right = n - </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(left &lt;= right) { </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (left + right) / </code><code class="value">2</code><code class="plain">; </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] + e == x) { </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = i; </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = mid; </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minDiff = </code><code class="value">0</code><code class="plain">; </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">; </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if this pair is closer than the </code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// closest pair so far </code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(arr[mid] + e - x) &lt; minDiff) { </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">minDiff = Math.abs(arr[mid] + e - x); </code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = i; </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = mid; </code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] + e &lt; x) { </code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = mid + </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{ </code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = mid - </code><code class="value">1</code><code class="plain">; </code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the pair </code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The closest pair is "</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[res_l] + </code><code class="string">" and "</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ arr[res_r]); </code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number66 index65 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>The closest pair is 22 and 30</pre>
 </div>
 <p><strong>Complexity Analysis:</strong></p>
 <p><strong>Time Complexity: O(n log n), </strong>because we are using a binary search algorithm to search for the pair, and for each element, we are performing a binary search, which has a time complexity of O(logn). Hence, the total time complexity of the approach becomes O(n log n).<br><strong>Auxiliary Space: O(1)</strong>, because we are not using any extra space to store the elements of the array or the result. The only extra space used is for storing some variables, which is constant and does not depend on the size of the input.</p>
 <p style="text-align:justify"><strong>Efficient Approach:- </strong>An efficient solution can find the pair in O(n) time. The idea is similar to method 1 of <a href="https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/">this </a>post. The following is a detailed algorithm.&nbsp;</p>
 <pre>1) Initialize a variable diff as infinite (Diff is used to store the 
   difference between pair and x).  We need to find the minimum diff.
2) Initialize two index variables l and r in the given sorted array.
       (a) Initialize first to the leftmost index:  l = 0
       (b) Initialize second  the rightmost index:  r = n-1
3) Loop while l &lt; r.
       (a) If  abs(arr[l] + arr[r] - sum) &lt; diff  then 
           update diff and result 
       (b) If(arr[l] + arr[r] &lt;  sum )  then l++
       (c) Else r--    </pre>
 <p style="text-align:justify">Following is the implementation of the above algorithm.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_817577" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find pair with sum closest to x </code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*; </code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.Math; </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">CloseSum { </code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Prints the pair with sum closest to x </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printClosest(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x) </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_l=</code><code class="value">0</code><code class="plain">, res_r=</code><code class="value">0</code><code class="plain">;&nbsp; </code><code class="comments">// To store indexes of result pair </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize left and right indexes and difference between </code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pair sum and x </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = n-</code><code class="value">1</code><code class="plain">, diff = Integer.MAX_VALUE; </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// While there are elements between l and r </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(r &gt; l) </code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if this pair is closer than the closest pair so far </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(arr[l] + arr[r] - x) &lt; diff) </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = l; </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = r; </code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">diff = Math.abs(arr[l] + arr[r] - x); </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If this pair has more sum, move to smaller values. </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[l] + arr[r] &gt; x) </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--; </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="comments">// Move to larger values </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++; </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">" The closest pair is "</code><code class="plain">+arr[res_l]+</code><code class="string">" and "</code><code class="plain">+ arr[res_r]); </code>
           </div>
           <div class="line number36 index35 alt1"><code class="plain">} </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test above function </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] =&nbsp; {</code><code class="value">10</code><code class="plain">, </code><code class="value">22</code><code class="plain">, </code><code class="value">28</code><code class="plain">, </code><code class="value">29</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">}, x = </code><code class="value">54</code><code class="plain">; </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length; </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printClosest(arr, n, x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number46 index45 alt1"><code class="plain">} </code>
           </div>
           <div class="line number47 index46 alt2"><code class="comments">/*This code is contributed by Devesh Agrawal*/</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre> The closest pair is 22 and 30</pre>
 </div>
 <p><strong>Time Complexity: O(n)</strong>, where n is the length of an Array.<br><strong>Auxiliary Space:</strong> O(1)</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-k-closest-elements-given-value/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-k-closest-elements-given-value/?ref=lbp">Find k closest elements to a given value</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find the closest pair from two sorted arrays</div> --> 
  <h1>Find the closest pair from two sorted arrays</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching","two-pointer-algorithm"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given two arrays </span><b><strong>arr1[0…m-1]</strong></b><span> and </span><b><strong>arr2[0..n-1],</strong></b><span> and a number </span><b><strong>x</strong></b><span>, the task is to find the pair</span><b><strong> arr1[i] + arr2[j] </strong></b><span>such that absolute value of </span><b><strong>(arr1[i] + arr2[j] – x) </strong></b><span>is minimum.</span></p>
 <p dir="ltr"><b><strong>Example:&nbsp;</strong></b></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> arr1[] = {1, 4, 5, 7};</span><br><span> arr2[] = {10, 20, 30, 40};</span><br><span> x = 32</span><br><b><strong>Output:</strong></b><span> 1 and 30</span><br><b><strong>Input: </strong></b><span>arr1[] = {1, 4, 5, 7};</span><br><span> arr2[] = {10, 20, 30, 40};</span><br><span> x = 50 </span><br><b><strong>Output: </strong></b><span>7 and 40</span></p>
 </blockquote>
 <h2><span>Find the closest pair from two sorted arrays using Nested Loop:</span></h2>
 <p dir="ltr"><span>A </span><b><strong>Simple Solution</strong></b><span> is to run two loops. The outer loop considers every element of first array and inner loop checks for the pair in second array. We keep track of minimum difference between ar1[i] + ar2[j] and x.</span></p>
 <h2><span>Find the closest pair from two sorted arrays using </span><a href="https://www.geeksforgeeks.org/two-pointers-technique/" rel=""><span>Two pointer Technique</span></a><span>:</span></h2>
 <blockquote>
  <p dir="ltr"><span>Below is the idea to solve this problem in </span><b><strong>O(n) time </strong></b><span>using following steps.&nbsp;</span></p>
  <p dir="ltr"><span>1) Merge given two arrays into an auxiliary array of size m+n using </span><a href="https://www.geeksforgeeks.org/merge-sort/"><span>merge process of merge sort</span></a><span>. While merging keep another boolean array of size m+n to indicate whether the current element in merged array is from ar1[] or ar2[].</span><br><span>2) Consider the merged array and use the </span><a href="https://www.geeksforgeeks.org/given-sorted-array-number-x-find-pair-array-whose-sum-closest-x/"><span>linear time algorithm to find the pair with sum closest to x</span></a><span>. One extra thing we need to consider only those pairs which have one element from ar1[] and other from ar2[], we use the boolean array for this purpose.</span></p>
 </blockquote>
 <h3><b><strong>Can we do it in a single pass and O(1) extra space?</strong></b><span>&nbsp;</span></h3>
 <p dir="ltr"><span>The idea is to start from left side of one array and right side of another array, and use the algorithm same as step 2 of above approach. </span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><b><strong>Step-by-step approach:</strong></b></p>
 <ul>
  <li value="1"><span>Initialize a variable </span><b><strong>diff</strong></b><span> as </span><b><strong>infinite</strong></b><span> (Diff is used to store the difference between pair and </span><b><strong>x</strong></b><span>). We need to find the minimum </span><b><strong>diff.</strong></b></li>
  <li value="2"><span>Initialize two index variables </span><b><strong>l</strong></b><span> and </span><b><strong>r</strong></b><span> in the given sorted array.</span><br><span> (a) Initialize first to the leftmost index in </span><b><strong>ar1: l = 0</strong></b><br><span> (b) Initialize second the rightmost index in </span><b><strong>ar2: r = n-1</strong></b></li>
  <li value="3"><span>Loop while </span><b><strong> l&lt; length.ar1</strong></b><span> and</span><b><strong> r&gt;=0</strong></b><br><span> (a) If </span><b><strong>abs(ar1[l] + ar2[r] – sum) &lt; diff</strong></b><span> then update </span><b><strong>diff</strong></b><span> and </span><b><strong>result </strong></b><br><span> (b) If </span><b><strong>(ar1[l] + ar2[r] &lt; sum ) </strong></b><span> then</span><b><strong> l++</strong></b><br><span> (c) Else </span><b><strong>r– </strong></b><span> </span></li>
  <li value="4"><span>Print the </span><b><strong>result. </strong></b></li>
 </ul>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_288384" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find closest pair in an array</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">ClosestPair</code>
           </div>
           <div class="line number3 index2 alt2"><code class="plain">{</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ar1[0..m-1] and ar2[0..n-1] are two given sorted</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// arrays/ and x is given number. This function prints</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the pair from both arrays such that the sum of the</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pair is closest to x.</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">printClosest(</code><code class="keyword">int</code> <code class="plain">ar1[], </code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">m, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize the diff between pair sum and x.</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number12 index11 alt1">
             &nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// res_l and res_r are result indexes from ar1[] and ar2[]</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// respectively</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_l = </code><code class="value">0</code><code class="plain">, res_r = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Start from left side of ar1[] and right side of ar2[]</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = n-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l&lt;m &amp;&amp; r&gt;=</code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If this pair is closer to x than the previously</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// found closest, then update res_l, res_r and diff</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(ar1[l] + ar2[r] - x) &lt; diff)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = l;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = r;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">diff = Math.abs(ar1[l] + ar2[r] - x);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If sum of this pair is more than x, move to smaller</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// side</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar1[l] + ar2[r] &gt; x)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>&nbsp; <code class="comments">// move to the greater side</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"The closest pair is ["</code> <code class="plain">+ ar1[res_l] +</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">", "</code> <code class="plain">+ ar2[res_r] + </code><code class="string">"]"</code><code class="plain">);</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test above functions</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ClosestPair ob = </code><code class="keyword">new</code> <code class="plain">ClosestPair();</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">};</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = {</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">};</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = ar1.length;</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = ar2.length;</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">38</code><code class="plain">;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ob.printClosest(ar1, ar2, m, n, x);</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1"><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="comments">/*This code is contributed by Rajat Mishra */</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Output:&nbsp;</strong></b></p>
 <pre><span> The closest pair is [7, 30] 

</span></pre>
 <p dir="ltr"><b><strong>Time Complexity : </strong></b><span>O(n)&nbsp;</span><br><b><strong>Auxiliary Space :</strong></b><span> O(1)</span></p>
 <h2><b><strong>Find the closest pair from two sorted arrays using </strong></b><a href="https://www.geeksforgeeks.org/binary-search/" rel=""><b><strong>Binary Search</strong></b></a><b><strong>:</strong></b></h2>
 <blockquote>
  <p dir="ltr"><span>Since the two input arrays </span><b><strong>arr1</strong></b><span> and </span><b><strong>arr2</strong></b><span> are sorted, the comparison of the </span><b><strong>sum</strong></b><span> of the current pair with </span><b><strong>x</strong></b><span> essentially performs a binary search on the input array. By moving the </span><b><strong>left</strong></b><span> or </span><b><strong>right</strong></b><span> index based on the comparison result, the function implicitly divides the input array into two halves at each iteration, and therefore performs a</span><b><strong> binary search</strong></b><span> on the input array to find the closest pair.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_929705" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">ClosestSumPair {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to perform binary search on array ar2[] for</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the closest element to x</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">left, </code><code class="keyword">int</code> <code class="plain">right, </code><code class="keyword">int</code> <code class="plain">x) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(left &gt; right)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">left-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (left + right) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar2[mid] == x)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(ar2[mid] &gt; x)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(ar2, left, mid-</code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(ar2, mid+</code><code class="value">1</code><code class="plain">, right, x);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ar1[0..m-1] and ar2[0..n-1] are two given sorted arrays</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and x is given number. This function prints the pair from</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// both arrays such that the sum of the pair is closest to x.</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printClosest(</code><code class="keyword">int</code> <code class="plain">ar1[], </code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">m, </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">x) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize the diff between pair sum and x.</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// res_l and res_r are result indexes from ar1[] and ar2[]</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// respectively</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_l = </code><code class="value">0</code><code class="plain">, res_r = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Start from left side of ar1[] and right side of ar2[]</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, r = n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l &lt; m &amp;&amp; r &gt;= </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If this pair is closer to x than the previously</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// found closest, then update res_l, res_r and diff</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(Math.abs(ar1[l] + ar2[r] - x) &lt; diff) {</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_l = l;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_r = r;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">diff = Math.abs(ar1[l] + ar2[r] - x);</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If sum of this pair is more than x, move to smaller</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// side</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar1[l] + ar2[r] &gt; x)</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r--;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="comments">// move to the greater side</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l++;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the result</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The closest pair is ["</code> <code class="plain">+ ar1[res_l] + </code><code class="string">", "</code> <code class="plain">+ ar2[res_r] + </code><code class="string">"]"</code><code class="plain">);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program to test above functions</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">};</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = {</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">40</code><code class="plain">};</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = ar1.length;</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = ar2.length;</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">38</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Perform binary search on ar2[] for the element closest</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to x-ar1[i]</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; m; i++) {</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">index = binarySearch(ar2, </code><code class="value">0</code><code class="plain">, n-</code><code class="value">1</code><code class="plain">, x-ar1[i]);</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check if the element closest to x-ar1[i] is better</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// than the current best</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(index &gt;= </code><code class="value">0</code> <code class="plain">&amp;&amp; index &lt; n &amp;&amp; Math.abs(ar1[i]+ar2[index]-x) &lt; Math.abs(ar1[i]+ar2[index-</code><code class="value">1</code><code class="plain">]-x)) {</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printClosest(ar1, ar2, m, n, x);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(index &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; Math.abs(ar1[i]+ar2[index-</code><code class="value">1</code><code class="plain">]-x) &lt; Math.abs(ar1[i]+ar2[index]-x)) {</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">index--;</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number76 index75 alt1"><code class="plain">}</code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>OUTPUT</strong></b><span>:</span></p>
 <pre><span>The closest pair is [7, 30] 

</span></pre>
 <p dir="ltr"><b><strong>Time Complexity : </strong></b><span>O(mLogN)&nbsp;, As we are Dividing Arrays using Binary search where.</span><br><b><strong>Auxiliary Space : </strong></b><span>O(1)</span><br><span>&nbsp;</span></p>
 <figure class="media"></figure>
 <p dir="ltr"><a href="https://www.geeksforgeeks.org/smallest-difference-pair-values-two-unsorted-arrays/"><span>Smallest Difference pair of values between two unsorted Arrays</span></a><br><span> </span><br><span>&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/given-sorted-array-number-x-find-pair-array-whose-sum-closest-x/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/given-sorted-array-number-x-find-pair-array-whose-sum-closest-x/?ref=lbp">Given a sorted array and a number x, find the pair in array whose sum is closest to x</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find three closest elements from given three sorted arrays</div> --> 
  <h1>Find three closest elements from given three sorted arrays</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>Given three sorted arrays A[], B[] and C[], find 3 elements i, j and k from A, B and C respectively such that max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) is minimized. Here abs() indicates absolute value.</span></p>
 <p dir="ltr"><b><strong>Example :</strong></b><span>&nbsp;</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p dir="ltr"><b><strong>Input : </strong></b><span>A[] = {1, 4, 10}</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B[] = {2, 15, 20}</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; C[] = {10, 12}</span></p>
  <p dir="ltr"><b><strong>Output: </strong></b><span>10 15 10</span><br><b><strong>Explanation: </strong></b><span>10 from A, 15 from B and 10 from C</span></p>
  <p dir="ltr"><b><strong>Input: </strong></b><span>A[] = {20, 24, 100}</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B[] = {2, 19, 22, 79, 800}</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; C[] = {10, 12, 23, 24, 119}</span><br><b><strong>Output: </strong></b><span>24 22 23</span><br><b><strong>Explanation: </strong></b><span>24 from A, 22 from B and 23 from C</span></p>
 </blockquote>
 <p dir="ltr"><b><strong>We strongly recommend you to minimize your browser and try this yourself first.</strong></b></p>
 <p dir="ltr"><span>A</span><b><strong> Simple Solution</strong></b><span> is to run three nested loops to consider all triplets from A, B and C. Compute the value of max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) for every triplet and return minimum of all values. </span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p dir="ltr"><span>Steps to implement-</span></p>
 <ul>
  <li value="1"><span>Declared three variables a,b, and c to store final answers</span></li>
  <li value="2"><span>Initialized a variable “ans” with the Maximum value </span></li>
  <li value="3"><span>We will store a minimum of max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) in “ans” variable</span></li>
  <li value="4"><span>Run three nested loops where each loop is for each array</span></li>
  <li value="5"><span>From that loop if max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) is less than a minimum of max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) present in “ans”</span>
   <ul>
    <li value="1"><span> Then, update “ans” with new max(abs(A[i] – B[j]), abs(B[j] – C[k]), abs(C[k] – A[i])) and that three variable a,b,c with three elements of those arrays</span></li>
   </ul></li>
  <li value="6"><span>In the last print value present in a,b,c</span></li>
 </ul>
 <p dir="ltr"><b><strong>Code-</strong></b></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_764038" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find 3 elements such that</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// max(abs(A[i]-B[j]),</code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// abs(B[j]-C[k]), abs(C[k]-A[i])) is minimized.</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findClosest(</code><code class="keyword">int</code><code class="plain">[] A, </code><code class="keyword">int</code><code class="plain">[] B,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] C, </code><code class="keyword">int</code> <code class="plain">p, </code><code class="keyword">int</code> <code class="plain">q,</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Three variable to store answer</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a = </code><code class="value">0</code><code class="plain">, b = </code><code class="value">0</code><code class="plain">, c = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// To Store minimum of</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// max(abs(A[i]-B[j]),abs(B[j]-C[k]),</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// abs(C[k]-A[i]))</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = Integer.MAX_VALUE;</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Run three nested loop</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; p; i++) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">; j &lt; q; j++) {</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">0</code><code class="plain">; k &lt; r; k++) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">curr</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= Math.max(Math.abs(A[i] - B[j]),</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Math.abs(B[j] - C[k]));</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = Math.max(</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">curr, Math.abs(C[k] - A[i]));</code>
           </div>
           <div class="line number30 index29 alt1">
             &nbsp; 
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If that is minimum than previous then</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// update answer</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(temp &lt; ans) {</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans = temp;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a = A[i];</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b = B[j];</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c = C[k];</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing final answer</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(a + </code><code class="string">" "</code> <code class="plain">+ b + </code><code class="string">" "</code> <code class="plain">+ c);</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver program</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] A = { </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] B = { </code><code class="value">2</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">20</code> <code class="plain">};</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] C = { </code><code class="value">10</code><code class="plain">, </code><code class="value">12</code> <code class="plain">};</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p = A.length;</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q = B.length;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = C.length;</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findClosest(A, B, C, p, q, r);</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number58 index57 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Output-</strong></b></p>
 <pre><span>10 15 10</span><br></pre>
 <p dir="ltr"><b><strong>Time complexity </strong></b><span>:O(N</span><sup><span>3</span></sup><span>),because of three nested loops</span><br><b><strong>Auxiliary space</strong></b><span>: O(1),because no extra space has been used</span></p>
 <p dir="ltr"><span>A </span><b><strong>Better Solution</strong></b><span> is to use Binary Search.&nbsp;</span><br><span>1) Iterate over all elements of A[],&nbsp;</span><br><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a) Binary search for element just smaller than or equal to in B[] and C[], and note the difference.&nbsp;</span><br><span>2) Repeat step 1 for B[] and C[].&nbsp;</span><br><span>3) Return overall minimum.</span><br><span>Time complexity of this solution is O(nLogn)</span></p>
 <p dir="ltr"><b><strong>Efficient Solution</strong></b><span> Let ‘p’ be size of A[], ‘q’ be size of B[] and ‘r’ be size of C[]&nbsp;&nbsp;</span></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <pre><span>1)   Start with i=0, j=0 and k=0 (Three index variables for A,</span><br><span>                                  B and C respectively)</span><br><span>//  p, q and r are sizes of A[], B[] and C[] respectively.</span><br><span>2)   Do following while i &lt; p and j &lt; q and k &lt; r</span><br><span>    a) Find min and maximum of A[i], B[j] and C[k]</span><br><span>    b) Compute diff = max(X, Y, Z) - min(A[i], B[j], C[k]).</span><br><span>    c) If new result is less than current result, change </span><br><span>       it to the new result.</span><br><span>    d) Increment the pointer of the array which contains </span><br><span>       the minimum.</span><br></pre>
 <p dir="ltr"><span>Note that we increment the pointer of the array which has the minimum because our goal is to decrease the difference. Increasing the maximum pointer increases the difference. Increase the second maximum pointer can potentially increase the difference.&nbsp;</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_133178" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find 3 elements such</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// that max(abs(A[i]-B[j]), abs(B[j]-C[k]), </code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// abs(C[k]-A[i])) is minimized.</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findClosest(</code><code class="keyword">int</code> <code class="plain">A[], </code><code class="keyword">int</code> <code class="plain">B[], </code><code class="keyword">int</code> <code class="plain">C[],</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p, </code><code class="keyword">int</code> <code class="plain">q, </code><code class="keyword">int</code> <code class="plain">r)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = Integer.MAX_VALUE; </code><code class="comments">// Initialize min diff</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize result</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_i =</code><code class="value">0</code><code class="plain">, res_j = </code><code class="value">0</code><code class="plain">, res_k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse arrays</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">, j = </code><code class="value">0</code><code class="plain">, k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; p &amp;&amp; j &lt; q &amp;&amp; k &lt; r)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find minimum and maximum of current three elements</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">minimum = Math.min(A[i],</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Math.min(B[j], C[k]));</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">maximum = Math.max(A[i], </code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Math.max(B[j], C[k]));</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Update result if current diff is </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// less than the min diff so far</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(maximum-minimum &lt; diff)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_i = i;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_j = j;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_k = k;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">diff = maximum - minimum;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We can't get less than 0 </code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as values are absolute</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(diff == </code><code class="value">0</code><code class="plain">) </code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Increment index of array</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with smallest value</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A[i] == minimum) i++;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(B[j] == minimum) j++;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">k++;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print result</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(A[res_i] + </code><code class="string">" "</code> <code class="plain">+</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">B[res_j] + </code><code class="string">" "</code> <code class="plain">+ C[res_k]);</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">A[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">};</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">B[] = {</code><code class="value">2</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">20</code><code class="plain">};</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">C[] = {</code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">};</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p = A.length;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q = B.length;</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = C.length;</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function calling</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findClosest(A, B, C, p, q, r);</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number66 index65 alt1"><code class="plain">}</code>
           </div>
           <div class="line number67 index66 alt2">
             &nbsp; 
           </div>
           <div class="line number68 index67 alt1"><code class="comments">// This code is contributed by Ajit.</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>Output:</strong></b><span>&nbsp;</span></p>
 <pre><span>10 15 10</span><br></pre>
 <p dir="ltr"><b><strong>Time complexity </strong></b><span>of this solution is O(p + q + r) where p, q and r are sizes of A[], B[] and C[] respectively.</span><br><b><strong>Auxiliary space</strong></b><span>: O(1) as constant space is required.</span></p>
 <p dir="ltr"><b><strong>Approach 2: Using Binary Search:</strong></b></p>
 <p dir="ltr"><span>Another approach to solve this problem can be to use binary search along with two pointers.</span></p>
 <p dir="ltr"><span>First, sort all the three arrays A, B, and C. Then, we take three pointers, one for each array. For each i, j, k combination, we calculate the maximum difference using the absolute value formula given in the problem. If the current maximum difference is less than the minimum difference found so far, then we update our result.</span></p>
 <p dir="ltr"><span>Next, we move our pointers based on the value of the maximum element among the current i, j, k pointers. We increment the pointer of the array with the smallest maximum element, hoping to find a smaller difference.</span></p>
 <p dir="ltr"><span>The time complexity of this approach will be O(nlogn) due to sorting, where n is the size of the largest array.</span></p>
 <p dir="ltr"><span>Here’s the code for this approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_763117" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">findClosest(</code><code class="keyword">int</code><code class="plain">[] A, </code><code class="keyword">int</code><code class="plain">[] B, </code><code class="keyword">int</code><code class="plain">[] C, </code><code class="keyword">int</code> <code class="plain">p, </code><code class="keyword">int</code> <code class="plain">q, </code><code class="keyword">int</code> <code class="plain">r) {</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(A);</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(B);</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(C);</code>
           </div>
           <div class="line number8 index7 alt1">
             &nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">diff = Integer.MAX_VALUE; </code><code class="comments">// Initialize min diff</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initialize result</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">res_i = </code><code class="value">0</code><code class="plain">, res_j = </code><code class="value">0</code><code class="plain">, res_k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Traverse arrays</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">, j = </code><code class="value">0</code><code class="plain">, k = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(i &lt; p &amp;&amp; j &lt; q &amp;&amp; k &lt; r) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find minimum and maximum of current three elements</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">minimum = Math.min(A[i], Math.min(B[j], C[k]));</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">maximum = Math.max(A[i], Math.max(B[j], C[k]));</code>
           </div>
           <div class="line number20 index19 alt1">
             &nbsp; 
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calculate the maximum difference for the current combination</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">curDiff = Math.abs(maximum - minimum);</code>
           </div>
           <div class="line number23 index22 alt2">
             &nbsp; 
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Update result if current diff is less than the min</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// diff so far</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(curDiff &lt; diff) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_i = i;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_j = j;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">res_k = k;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">diff = curDiff;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the maximum element of A is the smallest among the three,</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we move the A pointer forward</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(A[i] == minimum &amp;&amp; A[i] &lt;= B[j] &amp;&amp; A[i] &lt;= C[k])</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the maximum element of B is the smallest among the three,</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we move the B pointer forward</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(B[j] == minimum &amp;&amp; B[j] &lt;= A[i] &amp;&amp; B[j] &lt;= C[k])</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the maximum element of C is the smallest among the three,</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we move the C pointer forward</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k++;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print result</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(A[res_i] + </code><code class="string">" "</code> <code class="plain">+ B[res_j] + </code><code class="string">" "</code> <code class="plain">+ C[res_k]);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="comments">// Driver program</code>
           </div>
           <div class="line number54 index53 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] A = {</code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code><code class="plain">};</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] B = {</code><code class="value">2</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">20</code><code class="plain">};</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] C = {</code><code class="value">10</code><code class="plain">, </code><code class="value">12</code><code class="plain">};</code>
           </div>
           <div class="line number58 index57 alt1">
             &nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p = A.length;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q = B.length;</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = C.length;</code>
           </div>
           <div class="line number62 index61 alt1">
             &nbsp; 
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">findClosest(A, B, C, p, q, r);</code>
           </div>
           <div class="line number64 index63 alt1"><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p dir="ltr"><b><strong>OUTPUT:</strong></b></p>
 <pre><span>10 15 10</span><br></pre>
 <p dir="ltr"><b><strong>Time complexity :O(NlogN)&nbsp;</strong></b><br><b><strong>Auxiliary space: O(1)</strong></b><span> as constant space is required.</span></p>
 <p dir="ltr"><span>//Thanks to Gaurav Ahirwar for suggesting the above solutions.</span><br><span>&nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/?ref=lbp">Find the closest pair from two sorted arrays</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Binary Search for Rational Numbers without using floating point arithmetic</div> --> 
  <h1>Binary Search for Rational Numbers without using floating point arithmetic</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Searching"]');
                                            </script> 
<div class="text"> 
 <p>A rational is represented as p/qb, for example 2/3. Given a sorted array of rational numbers, how to search an element using Binary Search. Use of floating-point arithmetic is not allowed.</p>
 <p><strong>Example:&nbsp;&nbsp;</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <pre>Input:  arr[] = {1/5, 2/3, 3/2, 13/2}
        x = 3/2
Output: Found at index 2</pre>
 <p><strong>We strongly recommend you to minimize your browser and try this yourself first.</strong><br>To compare two rational numbers p/q and r/s, we can compare p*s with q*r.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_631713" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for Binary Search for Rational Numbers</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// without using floating point arithmetic</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">GFG</code>
           </div>
           <div class="line number4 index3 alt1"><code class="plain">{</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">Rational</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q;</code>
           </div>
           <div class="line number10 index9 alt1">
             &nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Rational(</code><code class="keyword">int</code> <code class="plain">p, </code><code class="keyword">int</code> <code class="plain">q)</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.p = p;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.q = q;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="plain">};</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="comments">// Utility function to compare two Rational numbers</code>
           </div>
           <div class="line number20 index19 alt1"><code class="comments">// 'a' and 'b'. It returns</code>
           </div>
           <div class="line number21 index20 alt2"><code class="comments">// 0 -. When 'a' and 'b' are same</code>
           </div>
           <div class="line number22 index21 alt1"><code class="comments">// 1 -. When 'a' is greater</code>
           </div>
           <div class="line number23 index22 alt2"><code class="comments">//-1 -. When 'b' is greater</code>
           </div>
           <div class="line number24 index23 alt1"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">compare(Rational a, Rational b)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">{</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If a/b == c/d then a*d = b*c:</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method to ignore division</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a.p * b.q == a.q * b.p)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(a.p * b.q &gt; a.q * b.p)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number33 index32 alt2"><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="comments">// Returns index of x in arr[l..r] if it is present, else</code>
           </div>
           <div class="line number36 index35 alt1"><code class="comments">// returns -1. It mainly uses Binary Search.</code>
           </div>
           <div class="line number37 index36 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(Rational arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r,</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Rational x)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(r &gt;= l)</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = l + (r - l)/</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the element is present at the middle itself</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(compare(arr[mid], x) == </code><code class="value">0</code><code class="plain">) </code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number47 index46 alt2">
             &nbsp; 
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is smaller than mid, then it can</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// only be present in left subarray</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(compare(arr[mid], x) &gt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, l, mid - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else the element can only be present in right</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// subarray</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, mid + </code><code class="value">1</code><code class="plain">, r, x);</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number59 index58 alt2"><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1">
             &nbsp; 
           </div>
           <div class="line number61 index60 alt2"><code class="comments">// Driver method</code>
           </div>
           <div class="line number62 index61 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number63 index62 alt2"><code class="plain">{</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Rational arr[] = {</code><code class="keyword">new</code> <code class="plain">Rational(</code><code class="value">1</code><code class="plain">, </code><code class="value">5</code><code class="plain">), </code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Rational(</code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">), </code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Rational(</code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">), </code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Rational(</code><code class="value">13</code><code class="plain">, </code><code class="value">2</code><code class="plain">)};</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Rational x = </code><code class="keyword">new</code> <code class="plain">Rational(</code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.printf(</code><code class="string">"Element found at index %d"</code><code class="plain">,</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x));</code>
           </div>
           <div class="line number72 index71 alt1"><code class="plain">}</code>
           </div>
           <div class="line number73 index72 alt2"><code class="plain">}</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="comments">// This code is contributed by Rajput-Ji</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <p><strong>Output:&nbsp;</strong></p>
 <pre>Element found at index 2</pre>
 <p><strong>Time Complexity: </strong>O(log n)</p>
 <p><strong>Auxiliary Space: </strong>O(1), &nbsp;since no extra space has been taken.</p>
 <p>Thanks to Utkarsh Trivedi for suggesting above solution.<br>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-three-closest-elements-from-given-three-sorted-arrays/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-three-closest-elements-from-given-three-sorted-arrays/?ref=lbp">Find three closest elements from given three sorted arrays</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Median of two sorted arrays of same size</div> --> 
  <h1>Median of two sorted arrays of same size</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Accolite","Amazon","D-E-Shaw","FactSet","Samsung"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Divide and Conquer","Mathematical","Searching"]');
                                            </script> 
<div class="text"> 
 <div>
   &nbsp; 
 </div>
 <p>There are 2 sorted arrays <strong>A</strong> and <strong>B</strong> of size n each. Write an algorithm to find the median of the array obtained after merging the above 2 arrays(i.e. array of length 2n). The complexity should be O(log(n))</p>
 <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/median-of-two-arrays.jpg" alt="median-of-two-arrays"></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Problem 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/sum-of-middle-elements-of-two-sorted-arrays/0">Sum of Middle Elements of two sorted arrays&nbsp;</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/sum-of-middle-elements-of-two-sorted-arrays/0">Solve Problem</a>
   </div>
  </div>
 </div>
 <blockquote>
  <p><strong>Note: </strong>Since the size of the set for which we are looking for the median is even (2n), we need to take the average of the middle two numbers and return the floor of the average.</p>
 </blockquote>
 <p><strong>Method 1 (Simply count while Merging)</strong>&nbsp;</p>
 <p>Use the merge procedure of merge sort. Keep track of count while comparing elements of two arrays. If count becomes n(For 2n elements), we have reached the median. Take the average of the elements at indexes n-1 and n in the merged array. See the below implementation.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_979764" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Simple Merge based O(n) solution </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// to find median of two sorted arrays</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Main</code>
           </div>
           <div class="line number5 index4 alt2"><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// function to calculate median</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMedian(</code><code class="keyword">int</code> <code class="plain">ar1[], </code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;&nbsp; </code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;&nbsp; </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">; </code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m1 = -</code><code class="value">1</code><code class="plain">, m2 = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Since there are 2n elements, median will </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">be average of elements at index n-1 and </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">n in the array obtained after merging ar1 </code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">and ar2 */</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(count = </code><code class="value">0</code><code class="plain">; count &lt;= n; count++)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Below is to handle case where all </code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements of ar1[] are smaller than </code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">smallest(or first) element of ar2[] */</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == n)</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = m2;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m2 = ar2[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Below is to handle case where all </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">elements of ar2[] are smaller than </code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">smallest(or first) element of ar1[] */</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(j == n)</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = m2;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m2 = ar1[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* equals sign because if two </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">arrays have some common elements */</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ar1[i] &lt;= ar2[j])</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;&nbsp; </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Store the prev median */</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = m2;&nbsp; </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m2 = ar1[i];</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Store the prev median */</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = m2;&nbsp; </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m2 = ar2[j];</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">j++;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(m1 + m2)/</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = {</code><code class="value">1</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">26</code><code class="plain">, </code><code class="value">38</code><code class="plain">};</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = {</code><code class="value">2</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">17</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">45</code><code class="plain">};</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n1 = ar1.length;</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n2 = ar2.length;</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n1 == n2)</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Median is "</code> <code class="plain">+</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">getMedian(ar1, ar2, n1));</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"arrays are of unequal size"</code><code class="plain">);</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number74 index73 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median is 16</pre>
 </div>
 <div>
   &nbsp; 
 </div>
 <p><strong>Time Complexity:</strong> O(n)<br><strong>Auxiliary Space:</strong> O(1)\</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p><strong>Method 2 (By Merging two arrays w/o extra space)</strong></p>
 <p>This method works by merging two arrays without extra space and then sorting them.</p>
 <p><strong>Algorithm :&nbsp;</strong></p>
 <pre>1) Merge the two input arrays ar1[] and ar2[].
2) Sort ar1[] and ar2[] respectively.
3) The median will be the last element of ar1[] + the first
   element of ar2[] divided by 2. [(ar1[n-1] + ar2[0])/2].</pre>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_699902" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG</code>
           </div>
           <div class="line number5 index4 alt2"><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="comments">/* This function returns</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">median of ar1[] and ar2[].</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Assumptions in this function:</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Both ar1[] and ar2[]</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">are sorted arrays</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">Both have n elements */</code>
           </div>
           <div class="line number13 index12 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMedian(</code><code class="keyword">int</code> <code class="plain">ar1[],</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="plain">{</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = n - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(ar1[i] &gt; ar2[j] &amp;&amp; j &lt; n &amp;&amp; i &gt; -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = ar1[i];</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ar1[i] = ar2[j];</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ar2[j] = temp;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i--; j++;</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(ar1);</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(ar2);</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(ar1[n - </code><code class="value">1</code><code class="plain">] + ar2[</code><code class="value">0</code><code class="plain">]) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="comments">// Driver code</code>
           </div>
           <div class="line number31 index30 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="plain">{</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">26</code><code class="plain">, </code><code class="value">38</code> <code class="plain">};</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = { </code><code class="value">2</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">17</code><code class="plain">, </code><code class="value">30</code><code class="plain">, </code><code class="value">45</code> <code class="plain">};</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n1 = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n2 = </code><code class="value">5</code><code class="plain">;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n1 == n2)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Median is "</code><code class="plain">+ getMedian(ar1, ar2, n1));</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Doesn't work for arrays of unequal size"</code><code class="plain">);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="comments">// This code is contributed by Manu Pathria</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median is 16</pre>
 </div>
 <blockquote>
  <p><strong>Time Complexity:</strong> O(nlogn)<br><strong>Auxiliary Space: </strong>O(1)</p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 </blockquote>
 <div>
   &nbsp; 
 </div>
 <p><strong>Method 3 (Using binary search)</strong></p>
 <p>This method can also be used for arrays of different sizes.</p>
 <p><strong>Algorithm:</strong></p>
 <p>We can find the kth element by using binary search on whole range of constraints of elements.</p>
 <ul>
  <li>Initialize<strong> ans = 0.0</strong></li>
  <li>Initialize <strong>low = -10^9, high = 10^9 </strong>and <strong>pos = n</strong></li>
  <li>Run a loop while(low &lt;= high): 
   <ul>
    <li>Calculate <strong>mid = (low + (high – low)&gt;&gt;1)</strong></li>
    <li>Find total elements less or equal to mid in the given arrays</li>
    <li>If the count is less or equal to <strong>pos</strong>
     <ul>
      <li>Update <strong>low = mid + 1</strong></li>
      <li>Else <strong>high = mid – 1</strong></li>
     </ul></li>
   </ul></li>
  <li>Store <strong>low </strong>in <strong>ans</strong>, i.e., <strong>ans = low</strong>.</li>
  <li>Again follow step3 with <strong>pos</strong> as <strong>n – 1</strong></li>
  <li>Return <strong>(sum + low * 1.0)/2</strong></li>
 </ul>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_200681" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">double</code> <code class="plain">getMedian(</code><code class="keyword">int</code><code class="plain">[] nums1, </code><code class="keyword">int</code><code class="plain">[] nums2,</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// according to given constraints all numbers are in</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// this range</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">low = (</code><code class="keyword">int</code><code class="plain">)-1e9, high = (</code><code class="keyword">int</code><code class="plain">)1e9;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = n;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">ans = </code><code class="value">0.0</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// binary search to find the element which will be</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// present at pos = totalLen/2 after merging two</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// arrays in sorted order</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) {</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + ((high - low) &gt;&gt; </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number21 index20 alt2">
             &nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// total number of elements in arrays which are</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// less than mid</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ub = upperBound(nums1, mid)</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ upperBound(nums2, mid);</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ub &lt;= pos)</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans = low;</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// As there are even number of elements, we will</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// also have to find element at pos = totalLen/2 - 1</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pos--;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = (</code><code class="keyword">int</code><code class="plain">)-1e9;</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = (</code><code class="keyword">int</code><code class="plain">)1e9;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt;= high) {</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + ((high - low) &gt;&gt; </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ub = upperBound(nums1, mid)</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ upperBound(nums2, mid);</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ub &lt;= pos)</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// average of two elements in case of even</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// number of elements</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans = (ans + low * </code><code class="value">1.0</code><code class="plain">) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a function which returns the index of smallest</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// element which is strictly greater than key (i.e. it</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// returns number of elements which are less than or</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// equal to key)</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">upperBound(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">key)</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">low = </code><code class="value">0</code><code class="plain">, high = arr.length;</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(low &lt; high) {</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = low + ((high - low) &gt;&gt; </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number68 index67 alt1">
             &nbsp; 
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &lt;= key)</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">low = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">high = mid;</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">low;</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number77 index76 alt2">
             &nbsp; 
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] brr = { </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code> <code class="plain">};</code>
           </div>
           <div class="line number82 index81 alt1">
             &nbsp; 
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">median = getMedian(arr, brr, arr.length);</code>
           </div>
           <div class="line number84 index83 alt1">
             &nbsp; 
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Median is "</code> <code class="plain">+ median);</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number87 index86 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median is 4.5</pre>
 </div>
 <p><strong>Time Complexity</strong>: O(log n)<br><strong>Auxiliary Space</strong>: O(1)</p>
 <p><a href="https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/"><strong>Median of two sorted arrays of different sizes</strong></a></p>
 <p>Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/binary-search-for-rational-numbers-without-using-floating-point-arithmetic/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/binary-search-for-rational-numbers-without-using-floating-point-arithmetic/?ref=lbp">Binary Search for Rational Numbers without using floating point arithmetic</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Median of two Sorted Arrays of Different Sizes</div> --> 
  <h1>Median of two Sorted Arrays of Different Sizes</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Binary Search","Divide and Conquer","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>&nbsp;Given two sorted arrays, </span><b><strong>a[]</strong></b><span> and </span><b><strong>b[]</strong></b><span>, the task is to find the median of these sorted arrays, where </span><b><strong>N</strong></b><span> is the number of elements in the first array, and </span><b><strong>M</strong></b><span> is the number of elements in the second array.&nbsp;</span></p>
 <p dir="ltr"><span>This is an extension of </span><a href="https://www.geeksforgeeks.org/median-of-two-sorted-arrays/"><b><strong>Median of two sorted arrays of equal size</strong></b></a><span> problem. Here we handle arrays of unequal size also.</span></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p dir="ltr"><b><strong>Examples:</strong></b><span>&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><b><strong>Input:</strong></b><span> a[] = {-5, 3, 6, 12, 15}, b[] = {-12, -10, -6, -3, 4, 10}</span><br><b><strong>Output:</strong></b><span> The median is 3.</span><br><b><strong>Explanation:</strong></b><span> The merged array is: ar3[] = {-12, -10, -6, -5 , -3, 3, 4, 6, 10, 12, 15}.</span><br><span>So the median of the merged array is 3</span></p>
  <p dir="ltr"><b><strong>Input:</strong></b><span> a[] = {2, 3, 5, 8}, b[] = {10, 12, 14, 16, 18, 20}</span><br><b><strong>Output: </strong></b><span>The median is 11.</span><br><b><strong>Explanation :</strong></b><span> The merged array is: ar3[] = {2, 3, 5, 8, 10, 12, 14, 16, 18, 20}</span><br><span>If the number of the elements are even.&nbsp;So there are two middle elements.</span><br><span>Take the average between the two: (10 + 12) / 2 = 11.</span></p>
 </blockquote>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/median-of-2-sorted-arrays-of-different-sizes/1/">Median of 2 Sorted Arrays of Different Sizes</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/median-of-2-sorted-arrays-of-different-sizes/1/">Try It!</a>
   </div>
  </div>
 </div>
 <h2><span>Naive Approach to find Median of two sorted Arrays of different sizes</span></h2>
 <p dir="ltr"><span>The idea is to merge them into third array and there are two cases:</span></p>
 <ul>
  <li value="1"><b><strong>Case 1:</strong></b><span> If the length of the third array is odd, then the median is at (length)/2</span><sup><span>th</span></sup><span> index in the array obtained after merging both the arrays.</span></li>
  <li value="2"><b><strong>Case 2:</strong></b><span> If the length of the third array is even, then the median will be the average of elements at index ((length)/2 ) and ((length)/2 – 1) in the array obtained after merging both arrays.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <blockquote>
  <p dir="ltr"><span>arr1[] = { -5, 3, 6, 12, 15 } , arr2[] = { -12, -10, -6, -3, 4, 10 }</span></p>
  <ul>
   <li value="1"><span>After merging them in a third array : arr3[] = { -5, 3, 6, 12, 15, -12, -10, -6, -3, 4, 10}</span></li>
   <li value="2"><span>Sort arr3[ ] = { -12, -10, -6, -5, -3, </span><b><strong>3</strong></b><span>, 4, 6, 10, 12, 15 }</span></li>
   <li value="3"><span>As the length of arr3 is odd, so the median is </span><b><strong>3</strong></b></li>
  </ul>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_209183" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for the above approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Arrays;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">Solution(</code><code class="keyword">int</code><code class="plain">[] arr)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If length of array is even</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code><code class="plain">) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">z = n / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">e = arr[z];</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q = arr[z - </code><code class="value">1</code><code class="plain">];</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = (e + q) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If length if array is odd</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">z = Math.round(n / </code><code class="value">2</code><code class="plain">);</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[z];</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1">
             &nbsp; 
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr1 = { -</code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">15</code> <code class="plain">};</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr2 = { -</code><code class="value">12</code><code class="plain">, -</code><code class="value">10</code><code class="plain">, -</code><code class="value">6</code><code class="plain">, -</code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = arr1.length;</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = arr2.length;</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr3 = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[i + j];</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Merge two array into one array</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.arraycopy(arr1, </code><code class="value">0</code><code class="plain">, arr3, </code><code class="value">0</code><code class="plain">, i);</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.arraycopy(arr2, </code><code class="value">0</code><code class="plain">, arr3, i, j);</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Sort the merged array</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr3);</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling the method</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Median = "</code> <code class="plain">+ Solution(arr3));</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number48 index47 alt1"><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="comments">// This code is contributed by Manas Tole</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median = 3

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity</strong></b><span>: O((N + M) * Log (N + M)), Time required to sort the array of size N + M</span><br><b><strong>Auxiliary Space</strong></b><span>: O(N + M), Creating a new array of size N+M.</span></p>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">Median of two sorted arrays of different sizes by Merging Arrays efficiently</strong></b></u><u><span class="GFGEditorTheme__textUnderline">:</span></u></h2>
 <blockquote>
  <p dir="ltr"><span>The given arrays are sorted, so </span><a href="https://www.geeksforgeeks.org/merge-two-sorted-arrays/"><span>merge the sorted arrays in an efficient way</span></a><span> and keep the count of elements inserted in the output array or printed form. So when the elements in the output array are half the original size of the given array print the element as a median element. There are two cases:&nbsp;</span></p>
  <ul>
   <li value="1"><b><strong>Case 1:</strong></b><span> M+N is odd, the median is at (M+N)/2</span><sup><span>th</span></sup><span> index in the array obtained after merging both the arrays.</span></li>
   <li value="2"><b><strong>Case 2:</strong></b><span> M+N is even, the median will be the average of elements at index ((M+N)/2 – 1) and (M+N)/2 in the array obtained after merging both the arrays</span></li>
  </ul>
 </blockquote>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 <blockquote>
  <p dir="ltr"><span>Given two array ar1[ ]= { 900 } and ar2[ ] = { 5, 8, 10, 20 } , n =&gt; </span><b><strong>Size of ar1 = 1</strong></b><span> and m =&gt; </span><b><strong>Size of ar2 = 4</strong></b></p>
  <ul>
   <li value="1"><span>Loop will run from 0 till 2.&nbsp;</span>
    <ul>
     <li value="1"><span>First iteration : { </span><b><strong>900</strong></b><span> } &nbsp;{ </span><b><strong>5</strong></b><span>, 8, 10, 20 } , </span><b><strong>m1 = 5&nbsp;</strong></b></li>
     <li value="2"><span>Second iteration : { </span><b><strong>900 </strong></b><span>} &nbsp;{ 5, </span><b><strong>8</strong></b><span>, 10, 20 }, </span><b><strong>m1 = 8</strong></b></li>
     <li value="3"><span>Third iteration : { </span><b><strong>900</strong></b><span> } &nbsp;{ 5, 8, </span><b><strong>10</strong></b><span>, 20 }, </span><b><strong>m1 = 10</strong></b></li>
    </ul></li>
   <li value="2"><span>As size of ar1 + ar2 = odd , hence we return m1 = 10 as the median</span></li>
  </ul>
 </blockquote>
 <div>
   &nbsp; 
 </div>
 <p dir="ltr"><span>Below is the implementation of the above approach:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_999364" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// A Simple Merge based O(n) solution</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// to find median of two sorted arrays</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number7 index6 alt2">
             &nbsp; 
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function to calculate median</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">getMedian(</code><code class="keyword">int</code> <code class="plain">ar1[], </code><code class="keyword">int</code> <code class="plain">ar2[], </code><code class="keyword">int</code> <code class="plain">n, </code><code class="keyword">int</code> <code class="plain">m)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Current index of input array ar1[]</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1">
             &nbsp; 
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Current index of input array ar2[]</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m1 = -</code><code class="value">1</code><code class="plain">, m2 = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Since there are (n+m) elements,</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// There are following two cases</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if n+m is odd then the middle</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// index is median i.e. (m+n)/2</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((m + n) % </code><code class="value">2</code> <code class="plain">== </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(count = </code><code class="value">0</code><code class="plain">; count &lt;= (n + m) / </code><code class="value">2</code><code class="plain">; count++) {</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i != n &amp;&amp; j != m) {</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = (ar1[i] &gt; ar2[j]) ? ar2[j++]</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: ar1[i++];</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(i &lt; n) {</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = ar1[i++];</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for case when j&lt;m,</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = ar2[j++];</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">m1;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// median will be average of elements</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// at index ((m+n)/2 - 1) and (m+n)/2</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in the array obtained after merging</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ar1 and ar2</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(count = </code><code class="value">0</code><code class="plain">; count &lt;= (n + m) / </code><code class="value">2</code><code class="plain">; count++) {</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m2 = m1;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i != n &amp;&amp; j != m) {</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = (ar1[i] &gt; ar2[j]) ? ar2[j++]</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: ar1[i++];</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(i &lt; n) {</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = ar1[i++];</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1">
             &nbsp; 
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for case when j&lt;m,</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">m1 = ar2[j++];</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(m1 + m2) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar1[] = { </code><code class="value">900</code> <code class="plain">};</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ar2[] = { </code><code class="value">5</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">20</code> <code class="plain">};</code>
           </div>
           <div class="line number71 index70 alt2">
             &nbsp; 
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n1 = ar1.length;</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n2 = ar2.length;</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(getMedian(ar1, ar2, n1, n2));</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number77 index76 alt2"><code class="plain">}</code>
           </div>
           <div class="line number78 index77 alt1">
             &nbsp; 
           </div>
           <div class="line number79 index78 alt2"><code class="comments">// This code is contributed by Yash Singhal</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>10

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(M + N).&nbsp;To merge both arrays O(M+N) time is needed.</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1).&nbsp;No extra space is required.</span></p>
 <h2><a href="https://www.geeksforgeeks.org/median-two-sorted-arrays-different-sizes-ologminn-m/" rel="noopener"><u><b><strong class="GFGEditorTheme__textUnderline">Median of two sorted arrays of different sizes using Binary Search</strong></b></u></a><u><b><strong class="GFGEditorTheme__textUnderline">:</strong></b></u></h2>
 <blockquote>
  <p dir="ltr"><span>The given two arrays are sorted, so we can utilize the ability of </span><a href="https://www.geeksforgeeks.org/binary-search/"><b><strong>Binary Search</strong></b></a><span> to divide the array and find the median.&nbsp;</span></p>
  <p dir="ltr"><span>Median means the point at which the whole array is divided into two parts. Hence since the two arrays are not merged so to get the median we require merging which is costly.&nbsp;</span></p>
  <p dir="ltr"><span>Hence instead of merging, we will use a </span><b><strong>modified binary search algorithm</strong></b><span> to efficiently find the median.</span></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_347106" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method to find median</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">double</code> <code class="plain">Median(</code><code class="keyword">int</code><code class="plain">[] A, </code><code class="keyword">int</code><code class="plain">[] B)</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = A.length;</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = B.length;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(n &gt; m)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Median(B,</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A); </code><code class="comments">// Swapping to make A smaller</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">start = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">end = n;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">realmidinmergedarray = (n + m + </code><code class="value">1</code><code class="plain">) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(start &lt;= end) {</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = (start + end) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">leftAsize = mid;</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">leftBsize = realmidinmergedarray - mid;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">leftA</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= (leftAsize &gt; </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">? A[leftAsize - </code><code class="value">1</code><code class="plain">]</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: Integer</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">.MIN_VALUE; </code><code class="comments">// checking overflow</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of indices</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">leftB = (leftBsize &gt; </code><code class="value">0</code><code class="plain">) ? B[leftBsize - </code><code class="value">1</code><code class="plain">]</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: Integer.MIN_VALUE;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">rightA = (leftAsize &lt; n)</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">? A[leftAsize]</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: Integer.MAX_VALUE;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">rightB = (leftBsize &lt; m)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">? B[leftBsize]</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">: Integer.MAX_VALUE;</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if correct partition is done</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(leftA &lt;= rightB &amp;&amp; leftB &lt;= rightA) {</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">((m + n) % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code><code class="plain">)</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(Math.max(leftA, leftB)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Math.min(rightA, rightB))</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">/ </code><code class="value">2.0</code><code class="plain">;</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Math.max(leftA, leftB);</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(leftA &gt; rightB) {</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">end = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">start = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0.0</code><code class="plain">;</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr1 = { -</code><code class="value">5</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">15</code> <code class="plain">};</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr2 = { -</code><code class="value">12</code><code class="plain">, -</code><code class="value">10</code><code class="plain">, -</code><code class="value">6</code><code class="plain">, -</code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Median of the two arrays are"</code><code class="plain">);</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Median(arr1, arr2));</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number60 index59 alt1"><code class="plain">}</code>
           </div>
           <div class="line number61 index60 alt2">
             &nbsp; 
           </div>
           <div class="line number62 index61 alt1"><code class="comments">// This code is contributed by Hritik</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median of the two arrays are
3

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O(min(log M, log N)): Since binary search is being applied on the smaller of the 2 arrays</span><br><b><strong>Auxiliary Space:</strong></b><span> O(1)</span></p>
 <div style="text-align:center;margin:20px 0;max-height:280px" id="GFG_AD_gfg_outstream_incontent-1"></div>
 <h2><u><b><strong class="GFGEditorTheme__textUnderline">Median of two sorted arrays of different sizes using Priority Queue:&nbsp;</strong></b></u></h2>
 <p dir="ltr"><span>In this Approach we have used </span><a href="https://www.geeksforgeeks.org/priority-queue-set-1-introduction/"><span>Priority Queue</span></a><span> (min Heap) to find out the median.&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>The Idea is simple, just push the elements into a single Priority Queue from both arrays. Now we have to find median from priority queue by performing a simple traversal through it upto median.</span></p>
 </blockquote>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <blockquote>
  <p dir="ltr"><b><strong>A[ ] </strong></b><span>= {-2, 3, 4, 5}, N = 4 &amp; </span><b><strong>B[ ] </strong></b><span>= {-4, -1, 7, 8, 9}, M = 5</span></p>
  <p dir="ltr"><b><strong>Step 1: </strong></b><span>Adding elements to priority queue(</span><b><strong>pq</strong></b><span>) from array</span><b><strong> A&nbsp;</strong></b></p>
  <ul>
   <li value="1"><b><strong>pq.push(-2)</strong></b></li>
   <li value="2"><b><strong>pq.push(3)</strong></b></li>
   <li value="3"><b><strong>pq.push(4)</strong></b></li>
   <li value="4"><b><strong>pq.push(5)</strong></b></li>
  </ul>
  <p dir="ltr"><span>After adding array </span><b><strong>A</strong></b><span> elements to priority queue it will look as</span><b><strong> pq = {-2, 3, 4, 5}</strong></b></p>
  <p dir="ltr"><b><strong>Step 2: </strong></b><span>Adding elements to priority queue(</span><b><strong>pq</strong></b><span>) from array </span><b><strong>B</strong></b></p>
  <ul>
   <li value="1"><b><strong>pq.push(-4)</strong></b></li>
   <li value="2"><b><strong>pq.push(-1)</strong></b></li>
   <li value="3"><b><strong>pq.push(7)</strong></b></li>
   <li value="4"><b><strong>pq.push(8)</strong></b></li>
   <li value="5"><b><strong>pq.push(9)</strong></b></li>
  </ul>
  <p dir="ltr"><span>After adding array </span><b><strong>B</strong></b><span> elements to priority queue it will look as</span><b><strong> pq = {-4, -2, -1, 3, 4, 5, 7, 8, 9}</strong></b></p>
  <p dir="ltr"><b><strong>Step 3: </strong></b><span>Now we have to find median from Priority Queue based on following conditions:&nbsp;</span></p>
  <ul>
   <li value="1"><b><strong>if N+M is odd&nbsp;</strong></b>
    <ul>
     <li value="1"><span>then traverse priority queue upto </span><b><strong>(n+m)/2 </strong></b><span>by popping element by element</span></li>
     <li value="2"><span>Then display median as </span><b><strong>pq.top()</strong></b></li>
    </ul></li>
   <li value="2"><b><strong>if N+M is even</strong></b><span>&nbsp;</span>
    <ul>
     <li value="1"><span>then traverse priority queue upto</span><b><strong> &nbsp;(n+m)/2 &amp;&amp; ((n+m)/2)-1</strong></b></li>
     <li value="2"><span>Then median = average of both top values of priority queue</span></li>
    </ul></li>
  </ul>
  <p dir="ltr"><span>In this case the </span><b><strong>median is 4</strong></b></p>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above problem:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_281" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.PriorityQueue;</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.Scanner;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Vector;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method to find median</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">double</code> <code class="plain">Median(Vector&lt;Integer&gt; A,</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; B)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = A.size();</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">m = B.size();</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// initializing Priority Queue (Min Heap)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; pq</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;Integer&gt;();</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pushing array A values to priority Queue</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(A.get(i));</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pushing array B values to priority Queue</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; m; i++) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(B.get(i));</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">check = n + m;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">count = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">mid1 = -</code><code class="value">1</code><code class="plain">, mid2 = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!pq.isEmpty()) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// returning mid value if combined length(n+m)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is odd</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check % </code><code class="value">2</code> <code class="plain">!= </code><code class="value">0</code> <code class="plain">&amp;&amp; count == check / </code><code class="value">2</code><code class="plain">) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">ans = pq.peek();</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// maintaining mid1 value if combined</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// length(n+m) is even where we need to maintain</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// both mid values in case of even combined</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// length</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">&amp;&amp; count == (check / </code><code class="value">2</code><code class="plain">) - </code><code class="value">1</code><code class="plain">) {</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mid1 = pq.peek();</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// now returning the mid2 value with previous</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// maintained mid1 value by 2</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(check % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code> <code class="plain">&amp;&amp; count == check / </code><code class="value">2</code><code class="plain">) {</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">mid2 = pq.peek();</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">ans = (mid1 + mid2) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.poll();</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">0.00000</code><code class="plain">;</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2">
             &nbsp; 
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; arr1 = </code><code class="keyword">new</code> <code class="plain">Vector&lt;Integer&gt;();</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr1.add(-</code><code class="value">2</code><code class="plain">);</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr1.add(</code><code class="value">3</code><code class="plain">);</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr1.add(</code><code class="value">4</code><code class="plain">);</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr1.add(</code><code class="value">5</code><code class="plain">);</code>
           </div>
           <div class="line number64 index63 alt1">
             &nbsp; 
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector&lt;Integer&gt; arr2 = </code><code class="keyword">new</code> <code class="plain">Vector&lt;Integer&gt;();</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr2.add(-</code><code class="value">4</code><code class="plain">);</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr2.add(-</code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr2.add(</code><code class="value">7</code><code class="plain">);</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr2.add(</code><code class="value">8</code><code class="plain">);</code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr2.add(</code><code class="value">9</code><code class="plain">);</code>
           </div>
           <div class="line number71 index70 alt2">
             &nbsp; 
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Median of the two arrays are"</code><code class="plain">);</code>
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Median(arr1, arr2));</code>
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number75 index74 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Median of the two arrays are
4

</pre>
 </div>
 <p dir="ltr"><b><strong>Time Complexity:</strong></b><span> O((n + m) log(n + m)), Since the priority queue is implemented from two arrays</span><br><b><strong>Auxiliary Space:</strong></b><span> O(N+M): for storing two array values in the priority queue.</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/nearly-sorted-algorithm/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/nearly-sorted-algorithm/?ref=lbp">Sort a nearly sorted (or K sorted) array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Search in an almost sorted array</div> --> 
  <h1>Search in an almost sorted array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given a sorted array <strong>arr[] </strong>of size <strong>N</strong>, some elements of array are moved to either of the adjacent positions, i.e., arr[i] may be present at arr[i+1] or arr[i-1] i.e. arr[i] can only be swapped with either arr[i+1] or arr[i-1]. The task is to search for an element in this array.</p>
 <p><strong>Examples :&nbsp;</strong></p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input:</strong> arr[] = &nbsp;{10, 3, 40, 20, 50, 80, 70}, key = 40<br><strong>Output: </strong>2&nbsp;<br><strong>Explanation: </strong>Output is index of 40 in given array i.e. 2</p>
  <p><strong>Input: </strong>arr[] = &nbsp;{10, 3, 40, 20, 50, 80, 70}, key = 90<br><strong>Output:</strong> -1<br><strong>Explanation: </strong>-1 is returned to indicate the element is not present</p>
 </blockquote>
 <p><strong>Naive Approach:</strong></p>
 <blockquote>
  <p>A simple solution is to linearly search the given key in array <strong>arr[]</strong>.</p>
 </blockquote>
 <p><strong>Below is implementation of the above approach:</strong></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_951422" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Geeksforgeeks{</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">linearSearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == x)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">40</code> <code class="plain">};</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = linearSearch(arr, x);</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code><code class="plain">);</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Element is present at index "</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ result);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="comments">// This code is contributed by Vishal Dhaygude</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3</pre>
 </div>
 <p><strong>Time complexity:</strong> O(N).&nbsp;<br><strong>Auxiliary Space: </strong>O(1)</p>
 <p>We can modify <a href="https://www.geeksforgeeks.org/binary-search/">binary search</a> to do it in O(Logn) time.&nbsp;</p>
 <h3><u>Search in an almost sorted array using Binary search:</u></h3>
 <blockquote>
  <p>The idea is to compare the key with middle <strong>3 elements</strong>, if present then return the index. If not present, then compare the key with middle element to decide whether to go in left half or right half. Comparing with middle element is enough as all the elements after <strong>mid+2 </strong>must be greater than element <strong>mid</strong> and all elements before <strong>mid-2 </strong>must be smaller than mid element.</p>
 </blockquote>
 <p>Follow the steps below to implement the idea:</p>
 <ul>
  <li>Construct a recursive function to search for <strong>x&nbsp;</strong> that takes array <strong>arr[], </strong>left pointer <strong>l</strong> and right pointer <strong>r</strong> as input and returns the index of <strong>x </strong>in array.&nbsp; 
   <ul>
    <li>Initialize a variable <strong>mid </strong>with l+(r-l)/2.</li>
    <li>If <strong>arr[mid]</strong> is equal to x return <strong>mid</strong>&nbsp;</li>
    <li>Else if <strong>arr[mid-1]</strong> is equal to <strong>x </strong>return <strong>mid-1&nbsp;</strong></li>
    <li>Else if <strong>arr[mid+1]</strong> is equal to <strong>x </strong>return <strong>mid+1</strong></li>
    <li>If <strong>arr[mid] &gt; x </strong>recur for search space <strong>l </strong>to <strong>mid-2 </strong>else recur for search space <strong>mid+2</strong> to <strong>r.</strong></li>
   </ul></li>
 </ul>
 <p>Below is the implementation of this approach.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_631801" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find an element</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// in an almost sorted array</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A recursive binary search based function.</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// It returns index of x in given array</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// arr[l..r] is present, otherwise -1</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(r &gt;= l) {</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = l + (r - l) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the element is present at</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// one of the middle 3 positions</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == x)</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &gt; l &amp;&amp; arr[mid - </code><code class="value">1</code><code class="plain">] == x)</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(mid - </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(mid &lt; r &amp;&amp; arr[mid + </code><code class="value">1</code><code class="plain">] == x)</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(mid + </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If element is smaller than mid, then</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it can only be present in left subarray</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &gt; x)</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, l, mid - </code><code class="value">2</code><code class="plain">, x);</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else the element can only be present</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in right subarray</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, mid + </code><code class="value">2</code><code class="plain">, r, x);</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We reach here when element is</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// not present in array</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">GFG ob = </code><code class="keyword">new</code> <code class="plain">GFG();</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">3</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">40</code> <code class="plain">};</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">result = ob.binarySearch(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(result == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is not present in array"</code><code class="plain">);</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Element is present at index "</code> <code class="plain">+ result);</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2"><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1">
             &nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="comments">// This code is contributed by Rajat Mishra</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element is present at index 3</pre>
 </div>
 <p><strong>Time complexity:</strong> O(Logn).<br><strong>Auxiliary Space: </strong>O(1)</p>
 <p> &nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/median-of-two-sorted-arrays/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/median-of-two-sorted-arrays/?ref=lbp">Median of two sorted arrays of same size</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find position of an element in a sorted array of infinite numbers</div> --> 
  <h1>Find position of an element in a sorted array of infinite numbers</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Searching"]');
                                            </script> 
<div class="text"> 
 <p>Suppose you have a sorted array of infinite numbers, how would you search an element in the array?<br>Source: Amazon Interview Experience.&nbsp;<br>Since array is sorted, the first thing clicks into mind is binary search, but the problem here is that we don’t know size of array.&nbsp;<br>If the array is infinite, that means we don’t have proper bounds to apply binary search. So in order to find position of key, first we find bounds and then apply binary search algorithm.<br>Let low be pointing to 1st element and high pointing to 2nd element of array, Now compare key with high index element,&nbsp;<br>-&gt;if it is greater than high index element then copy high index in low index and double the high index.&nbsp;<br>-&gt;if it is smaller, then apply binary search on high and low indices found.&nbsp;<br>&nbsp;</p>
 <p>Below are implementations of above algorithm<br>&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_277221" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate working of </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// an algorithm that finds an element in an </code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// array of infinite size</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Test</code>
           </div>
           <div class="line number6 index5 alt1"><code class="plain">{</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Simple binary search algorithm</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(r&gt;=l)</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = l + (r - l)/</code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] == x)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[mid] &gt; x)</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, l, mid-</code><code class="value">1</code><code class="plain">, x);</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, mid+</code><code class="value">1</code><code class="plain">, r, x);</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method takes an infinite size array and a key to be</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// searched and returns its position if found else -1.</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We don't know size of arr[] and we can assume size to be</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// infinite in this function.</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// NOTE THAT THIS FUNCTION ASSUMES arr[] TO BE OF INFINITE SIZE</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// THEREFORE, THERE IS NO INDEX OUT OF BOUND CHECKING</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPos(</code><code class="keyword">int</code> <code class="plain">arr[],</code><code class="keyword">int</code> <code class="plain">key) </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = </code><code class="value">0</code><code class="plain">, h = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">val = arr[</code><code class="value">0</code><code class="plain">];</code>
           </div>
           <div class="line number32 index31 alt1">
             &nbsp; 
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find h to do binary search</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(val &lt; key)</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = h;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="comments">// store previous high</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//check that 2*h doesn't exceeds array </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//length to prevent ArrayOutOfBoundException</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">(</code><code class="value">2</code><code class="plain">*h &lt; arr.length-</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">h = </code><code class="value">2</code><code class="plain">*h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">h = arr.length-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">val = arr[h]; </code><code class="comments">// update new val</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// at this point we have updated low</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and high indices, thus use binary </code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// search between them</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, l, h, key);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1">
             &nbsp; 
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver method to test the above function</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[]{</code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">90</code><code class="plain">, </code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">100</code><code class="plain">, </code><code class="value">130</code><code class="plain">, </code><code class="value">140</code><code class="plain">, </code><code class="value">160</code><code class="plain">, </code><code class="value">170</code><code class="plain">};</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = findPos(arr,</code><code class="value">10</code><code class="plain">);</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ans==-</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found"</code><code class="plain">);</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element found at index "</code> <code class="plain">+ ans);</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element found at index 4</pre>
 </div>
 <p>Let p be the position of element to be searched. Number of steps for finding high index ‘h’ is O(Log p). The value of ‘h’ must be less than 2*p. The number of elements between h/2 and h must be O(p). Therefore, time complexity of Binary Search step is also O(Log p) and overall time complexity is 2*O(Log p) which is O(Log p).</p>
 <p>&nbsp;</p>
 <p><strong>Approach:</strong> The problem can be solved based on the following observation:&nbsp;</p>
 <blockquote>
  <ul>
   <li>Since array is sorted we apply binary search but the length of array is infinite so that we take <strong>start = 0</strong> and <strong>end = 1</strong> .</li>
   <li>After that check value of target is greater than the value at end index,if it is true then change <strong>newStart = end + 1&nbsp;</strong> and <strong>newEnd = end +(end – start +1)*2 </strong>and apply binary search .</li>
   <li>Otherwise , apply binary search in the old index values.</li>
  </ul>
 </blockquote>
 <p>Below are implementations of above algorithm:<br>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_231544" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java code to implement the approach</code>
           </div>
           <div class="line number2 index1 alt1">
             &nbsp; 
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="comments">// Java program to demonstrate working of</code>
           </div>
           <div class="line number7 index6 alt2"><code class="comments">// an algorithm that finds an element in an</code>
           </div>
           <div class="line number8 index7 alt1"><code class="comments">// array of infinite size</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number11 index10 alt2">
             &nbsp; 
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findPos(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">target)</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first find the range</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first start with a box of size 2</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">start = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">end = </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number18 index17 alt1">
             &nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// condition for the target to lie in the range</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(target &gt; arr[end]) {</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = end + </code><code class="value">1</code><code class="plain">; </code><code class="comments">// this is my new start</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// double the box value</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// end = previous end + sizeofbox*2</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">end = end + (end - start + </code><code class="value">1</code><code class="plain">) * </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">start = temp;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">binarySearch(arr, target, start, end);</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">binarySearch(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">target,</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">start, </code><code class="keyword">int</code> <code class="plain">end)</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(start &lt;= end) {</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// find the middle element</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (start + end) / 2; //</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; might be possible that (start +</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end) exceeds the range of int in</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">mid = start + (end - start) / </code><code class="value">2</code><code class="plain">;</code>
           </div>
           <div class="line number39 index38 alt2">
             &nbsp; 
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(target &lt; arr[mid]) {</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">end = mid - </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(target &gt; arr[mid]) {</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">start = mid + </code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ans found</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">mid;</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = { </code><code class="value">3</code><code class="plain">,&nbsp;&nbsp; </code><code class="value">5</code><code class="plain">,&nbsp;&nbsp; </code><code class="value">7</code><code class="plain">,&nbsp;&nbsp; </code><code class="value">9</code><code class="plain">,&nbsp;&nbsp; </code><code class="value">10</code><code class="plain">, </code><code class="value">90</code><code class="plain">,</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="value">100</code><code class="plain">, </code><code class="value">130</code><code class="plain">, </code><code class="value">140</code><code class="plain">, </code><code class="value">160</code><code class="plain">, </code><code class="value">170</code> <code class="plain">};</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">target = </code><code class="value">10</code><code class="plain">;</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">ans = findPos(arr, target);</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(ans == -</code><code class="value">1</code><code class="plain">)</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element not found"</code><code class="plain">);</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Element found at index "</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ ans);</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number68 index67 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Element found at index 4</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(logN)&nbsp;<br><strong>Auxiliary Space:</strong> O(1)</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/search-almost-sorted-array/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/search-almost-sorted-array/?ref=lbp">Search in an almost sorted array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Find if there is a pair with a given sum in the rotated sorted Array</div> --> 
  <h1>Find if there is a pair with a given sum in the rotated sorted Array</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given an array <strong>arr[]</strong> of distinct elements size <strong>N</strong> that is sorted and then rotated around an unknown point, the task is to check if the array has a pair with a given sum <strong>X</strong>.</p>
 <p><strong>Examples :</strong>&nbsp;</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>Input: </strong>arr[] = {11, 15, 6, 8, 9, 10}, X = 16<br><strong>Output: </strong>true<br><strong>Explanation:</strong> There is a pair (6, 10) with sum 16</p>
  <p><strong>Input: </strong>arr[] = {11, 15, 26, 38, 9, 10}, X = 35<br><strong>Output: </strong>true<br><strong>Explanation:</strong> There is a pair (26, 9) with sum 35</p>
  <p><strong>Input: </strong>arr[] = {11, 15, 26, 38, 9, 10}, X = 45<br><strong>Output: </strong>false<br><strong>Explanation:</strong> There is no pair with sum 45.</p>
 </blockquote>
 <p>We have discussed an <a href="https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/">O(n) solution for a sorted array (See steps 2, 3, and 4 of Method 1)</a> in this article. We can extend this solution for the rotated arrays as well.&nbsp;</p>
 <p><strong>Approach:</strong> The idea is:&nbsp;</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <blockquote>
  <p>First find the largest element in an array which is the pivot point also and the element just after the largest is the smallest element. Once we have the indices of the largest and the smallest elements, we use a similar <strong>meet-in-middle algorithm</strong> (as discussed <a href="https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/">here in method 1</a>) to find if there is a pair.&nbsp;</p>
  <p>The only thing new here is indices are incremented and decremented in a rotational manner using modular arithmetic.</p>
 </blockquote>
 <p><strong>Illustration:</strong></p>
 <blockquote>
  <p>Let us take an example <strong>arr[]={11, 15, 6, 8, 9, 10}</strong>, <strong>sum=16</strong>.<br>pivot = 1, &nbsp;</p>
  <p><strong>l = 2, r = 1:</strong><br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[2] + arr[1] = 6 + 15 = 21 which is &gt; 16&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; So decrement r circularly. r = ( 6 + 1 – 1) % 6, <strong>r = 0</strong></p>
  <p><strong>l = 2, r = 0:</strong><br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[2] + arr[0] = 17 which is &gt; 16.&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; So decrement r circularly. r = (6 + 0 – 1) % 6, <strong>r = 5</strong></p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
  <p><strong>l = 2, r = 5:</strong><br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; arr[2] + arr[5] = 16 which is equal to 16.&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; =&gt; Hence return <strong>true</strong></p>
  <p>Hence there exists such a pair.</p>
 </blockquote>
 <p>Follow the steps mentioned below to implement the idea:</p>
 <ul>
  <li>We will run a for loop from <strong>0</strong> to <strong>N-1</strong>, to find out the <strong>pivot</strong> point.&nbsp;</li>
  <li>Set the <strong>left pointer(l)</strong> to the smallest value and&nbsp;the <strong>right pointer(r) </strong>to the highest value.</li>
  <li>To restrict the circular movement within the array we will apply the modulo operation by the size of the array.</li>
  <li>While <strong>l ! = r</strong>, we shall keep checking if <strong>arr[l] + arr[r] = sum</strong>. 
   <ul>
    <li>If <strong>arr[l] + arr[r]</strong> is greater than X, update <strong>r = (N+r-1) % N</strong>.</li>
    <li>If <strong>arr[l] + arr[r]</strong> is less than X, update <strong>l = (l+1) % N</strong>.</li>
    <li>If <strong>arr[l] + arr[r]</strong> is equal to the value X, then return true.</li>
   </ul></li>
  <li>If no such pair is found after the iteration is complete, return false.</li>
 </ul>
 <p>Below is the implementation of the above approach.&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_359768" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to find a pair with a given</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// sum in a sorted and rotated array</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">PairInSortedRotated {</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This function returns true if arr[0..n-1]</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// has a pair with sum equals to x.</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">pairInSortedRotated(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n,</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x)</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find the pivot element</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n - </code><code class="value">1</code><code class="plain">; i++)</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; arr[i + </code><code class="value">1</code><code class="plain">])</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// l is now index of smallest element</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">l = (i + </code><code class="value">1</code><code class="plain">) % n;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// r is now index of largest element</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r = i;</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Keep moving either l or r till they meet</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(l != r) {</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If we find a pair with sum x, we</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// return true</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[l] + arr[r] == x)</code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number29 index28 alt2">
             &nbsp; 
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If current pair sum is less, move</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to the higher sum</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[l] + arr[r] &lt; x)</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">l = (l + </code><code class="value">1</code><code class="plain">) % n;</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Move to the lower sum side</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">r = (n + r - </code><code class="value">1</code><code class="plain">) % n;</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number41 index40 alt2">
             &nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* Driver program to test above function */</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">11</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">};</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">X = </code><code class="value">16</code><code class="plain">;</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">N = arr.length;</code>
           </div>
           <div class="line number48 index47 alt1">
             &nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pairInSortedRotated(arr, N, X))</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"true"</code><code class="plain">);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"false"</code><code class="plain">);</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number54 index53 alt1"><code class="plain">}</code>
           </div>
           <div class="line number55 index54 alt2"><code class="comments">/*This code is contributed by Prakriti Gupta*/</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>true</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(N). The step to find the pivot can be optimized to O(Logn) using the Binary Search approach discussed <a href="https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/">here</a>.<br><strong>Auxiliary Space: </strong>O(1).</p>
 <p><strong>Exercise:</strong>&nbsp;<br>1) Extend the above solution to work for arrays with duplicates allowed. </p>
 <h4>Approach#2: Using two pointers and binary search</h4>
 <p>The approach finds the pivot element in the rotated sorted array and then uses two pointers to check if there is a pair with a given sum. The pointers move in a circular way using the modulo operator.</p>
 <h4>Algorithm</h4>
 <p>1. Find the pivot element in the rotated sorted array. If the pivot element is greater than the first element of the array, then the pivot lies in the second half of the array; otherwise, it lies in the first half of the array.<br>2. After finding the pivot element, initialize two pointers left and right at the start and end of the array, respectively.<br>3. Loop through the array and check if the sum of the elements at the left and right pointers is equal to the given sum. If it is, then return true.<br>4. If the sum is less than the given sum, increment the left pointer, else decrement the right pointer.<br>5. If the loop completes and no pair is found, return false.</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_768147" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">FindPairInRotatedArray {</code>
           </div>
           <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">boolean</code> <code class="plain">findPair(</code><code class="keyword">int</code><code class="plain">[] arr, </code><code class="keyword">int</code> <code class="plain">x) {</code>
           </div>
           <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// find pivot element</code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pivot = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n-</code><code class="value">1</code><code class="plain">; i++) {</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; arr[i+</code><code class="value">1</code><code class="plain">]) {</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pivot = i+</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">left = pivot;</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">right = pivot-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(left != right) {</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[left] + arr[right] == x) {</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(arr[left] + arr[right] &lt; x) {</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">left = (left+</code><code class="value">1</code><code class="plain">) % n;</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">right = (right-</code><code class="value">1</code><code class="plain">+n) % n;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="keyword">false</code><code class="plain">;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] arr = {</code><code class="value">11</code><code class="plain">, </code><code class="value">15</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code><code class="plain">};</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">16</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(findPair(arr, x));</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number33 index32 alt2"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>True</pre>
 </div>
 <p>Time Complexity: O(n), where n is the length of the input array.</p>
 <p>Space Complexity: O(1).<br>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/?ref=lbp">Find position of an element in a sorted array of infinite numbers</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">K’th Smallest/Largest Element in Unsorted Array | Worst case Linear Time</div> --> 
  <h1>K’th Smallest/Largest Element in Unsorted Array | Worst case Linear Time</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["ABCO","Cisco","Microsoft","VMWare"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Searching"]');
                                            </script> 
<div class="text"> 
 <p>We recommend reading the following posts as a prerequisite for this post.<br><a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array/">K’th Smallest/Largest Element in Unsorted Array</a>&nbsp;<br><a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array-expected-linear-time/">K’th Smallest/Largest Element in Unsorted Array | Expected Linear Time</a><br>Given an array and a number k where k is smaller than the size of the array, we need to find the k’th smallest element in the given array. It is given that all array elements are distinct.<br><strong>Examples:</strong>&nbsp;</p>
 <pre>Input: arr[] = {7, 10, 4, 3, 20, 15}
       k = 3
Output: 7

Input: arr[] = {7, 10, 4, 3, 20, 15}
       k = 4
Output: 10</pre>
 <div id="practiceLinkDiv">
  <div class="practiceLinkDiv-banner">
   <div class="info">
    <div class="small">
      Recommended Practice 
    </div>
    <div class="title"><a href="https://www.geeksforgeeks.org/problems/kth-smallest-element5635/1/">Kth smallest element</a>
    </div>
   </div>
   <div class="redirect"><a href="https://www.geeksforgeeks.org/problems/kth-smallest-element5635/1/">Try It!</a>
   </div>
  </div>
 </div>
 <p>In the <a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/">previous post</a>, we discussed an expected linear time algorithm. In this post, a worst-case linear time method is discussed. <i>The idea in this new method is similar to quickSelect(). We get worst-case linear time by selecting a pivot that divides the array in a balanced way (there are not very few elements on one side and many on another side)</i>. After the array is divided in a balanced way, we apply the same steps as used in quickSelect() to decide whether to go left or right of the pivot.<br>Following is the complete algorithm.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <blockquote>
  <p><strong>kthSmallest(arr[0..n-1], k)</strong>&nbsp;<br><strong>1)</strong> Divide arr[] into ?n/5? groups where size of each group is 5 except possibly the last group which may have less than 5 elements.&nbsp;<br><strong>2)</strong> Sort the above created ?n/5? groups and find median of all groups. Create an auxiliary array ‘median[]’ and store medians of all ?n/5? groups in this median array.<br>// Recursively call this method to find median of median[0..?n/5?-1]&nbsp;<br><strong>3)</strong> medOfMed = kthSmallest(median[0..?n/5?-1], ?n/10?)<br><strong>4)</strong> Partition arr[] around medOfMed and obtain its position.&nbsp;<br>pos = partition(arr, n, medOfMed)<br><strong>5)</strong> If pos == k return medOfMed&nbsp;<br><strong>6) </strong>If pos &gt; k return kthSmallest(arr[l..pos-1], k)&nbsp;<br><strong>7)</strong> If pos &lt; k return kthSmallest(arr[pos+1..r], k-pos+l-1)</p>
 </blockquote>
 <p>In the above algorithm, the last 3 steps are the same as the algorithm in the <a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/">previous post</a>. The first four steps are used to obtain a good point for partitioning the array (to ensure there are not too many elements on either side of the pivot).<br>Following is the implementation of the above algorithm.&nbsp;<br>&nbsp;</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_350755" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java implementation of worst&nbsp; </code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// case linear time algorithm </code>
           </div>
           <div class="line number3 index2 alt2"><code class="comments">// to find k'th smallest element </code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*; </code>
           </div>
           <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">GFG&nbsp; </code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{ </code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number9 index8 alt2"><code class="comments">// int partition(int arr[], int l, int r, int k); </code>
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number11 index10 alt2"><code class="comments">// A simple function to find median of arr[]. This is called </code>
           </div>
           <div class="line number12 index11 alt1"><code class="comments">// only for an array of size 5 in this program. </code>
           </div>
           <div class="line number13 index12 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">findMedian(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">i,</code><code class="keyword">int</code> <code class="plain">n) </code>
           </div>
           <div class="line number14 index13 alt1"><code class="plain">{ </code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Arrays.sort(arr, i, n); </code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[i+(n-i)/</code><code class="value">2</code><code class="plain">];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="comments">// sort the array and return middle element </code>
           </div>
           <div class="line number17 index16 alt2"><code class="plain">} </code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="comments">// Returns k'th smallest element </code>
           </div>
           <div class="line number21 index20 alt2"><code class="comments">// in arr[l..r] in worst case </code>
           </div>
           <div class="line number22 index21 alt1"><code class="comments">// linear time. ASSUMPTION: ALL&nbsp; </code>
           </div>
           <div class="line number23 index22 alt2"><code class="comments">// ELEMENTS IN ARR[] ARE DISTINCT </code>
           </div>
           <div class="line number24 index23 alt1"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">kthSmallest(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">k) </code>
           </div>
           <div class="line number25 index24 alt2"><code class="plain">{ </code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If k is smaller than&nbsp; </code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// number of elements in array </code>
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(k &gt; </code><code class="value">0</code> <code class="plain">&amp;&amp; k &lt;= r - l + </code><code class="value">1</code><code class="plain">) </code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = r - l + </code><code class="value">1</code> <code class="plain">; </code><code class="comments">// Number of elements in arr[l..r] </code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Divide arr[] in groups of size 5,&nbsp; </code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calculate median of every group </code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp; and store it in median[] array. </code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// There will be floor((n+4)/5) groups; </code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">[]median = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[(n + </code><code class="value">4</code><code class="plain">) / </code><code class="value">5</code><code class="plain">]; </code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = </code><code class="value">0</code><code class="plain">; i &lt; n/</code><code class="value">5</code><code class="plain">; i++) </code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">median[i] = findMedian(arr, l+i*</code><code class="value">5</code><code class="plain">, l+i*</code><code class="value">5</code><code class="plain">+</code><code class="value">5</code><code class="plain">); </code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp; 
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// For last group with less than 5 elements </code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i*</code><code class="value">5</code> <code class="plain">&lt; n)&nbsp; </code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">median[i] = findMedian(arr, l+i*</code><code class="value">5</code><code class="plain">, l+i*</code><code class="value">5</code><code class="plain">+n%</code><code class="value">5</code><code class="plain">);&nbsp; </code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++; </code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp; </code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Find median of all medians using recursive call. </code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If median[] has only one element, then no need </code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of recursive call </code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">medOfMed = (i == </code><code class="value">1</code><code class="plain">)? median[i - </code><code class="value">1</code><code class="plain">]: </code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">kthSmallest(median, </code><code class="value">0</code><code class="plain">, i - </code><code class="value">1</code><code class="plain">, i / </code><code class="value">2</code><code class="plain">); </code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Partition the array around a random element and </code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// get position of pivot element in sorted array </code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">pos = partition(arr, l, r, medOfMed); </code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If position is same as k </code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos-l == k - </code><code class="value">1</code><code class="plain">) </code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr[pos]; </code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pos-l &gt; k - </code><code class="value">1</code><code class="plain">) </code><code class="comments">// If position is more, recur for left </code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">kthSmallest(arr, l, pos - </code><code class="value">1</code><code class="plain">, k); </code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Else recur for right subarray </code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">kthSmallest(arr, pos + </code><code class="value">1</code><code class="plain">, r, k - pos + l - </code><code class="value">1</code><code class="plain">); </code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If k is more than number of elements in array </code>
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Integer.MAX_VALUE; </code>
           </div>
           <div class="line number71 index70 alt2"><code class="plain">} </code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number73 index72 alt2"><code class="keyword">static</code> <code class="keyword">int</code><code class="plain">[] swap(</code><code class="keyword">int</code> <code class="plain">[]arr, </code><code class="keyword">int</code> <code class="plain">i, </code><code class="keyword">int</code> <code class="plain">j) </code>
           </div>
           <div class="line number74 index73 alt1"><code class="plain">{ </code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">temp = arr[i]; </code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[i] = arr[j]; </code>
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arr[j] = temp; </code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">arr; </code>
           </div>
           <div class="line number79 index78 alt2"><code class="plain">} </code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number81 index80 alt2"><code class="comments">// It searches for x in arr[l..r], and&nbsp; </code>
           </div>
           <div class="line number82 index81 alt1"><code class="comments">// partitions the array around x. </code>
           </div>
           <div class="line number83 index82 alt2"><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">partition(</code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">l, </code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">r, </code><code class="keyword">int</code> <code class="plain">x) </code>
           </div>
           <div class="line number85 index84 alt2"><code class="plain">{ </code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Search for x in arr[l..r] and move it to end </code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i; </code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(i = l; i &lt; r; i++) </code>
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] == x) </code>
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">; </code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, r); </code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Standard partition algorithm </code>
           </div>
           <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i = l; </code>
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = l; j &lt;= r - </code><code class="value">1</code><code class="plain">; j++) </code>
           </div>
           <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[j] &lt;= x) </code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{ </code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, j); </code>
           </div>
           <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++; </code>
           </div>
           <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code>
           </div>
           <div class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">swap(arr, i, r); </code>
           </div>
           <div class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i; </code>
           </div>
           <div class="line number105 index104 alt2"><code class="plain">} </code>
           </div>
           <div class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number107 index106 alt2"><code class="comments">// Driver code </code>
           </div>
           <div class="line number108 index107 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) </code>
           </div>
           <div class="line number109 index108 alt2"><code class="plain">{ </code>
           </div>
           <div class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = {</code><code class="value">12</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">19</code><code class="plain">, </code><code class="value">26</code><code class="plain">}; </code>
           </div>
           <div class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = arr.length, k = </code><code class="value">3</code><code class="plain">; </code>
           </div>
           <div class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"K'th smallest element is "</code>
           </div>
           <div class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ kthSmallest(arr, </code><code class="value">0</code><code class="plain">, n - </code><code class="value">1</code><code class="plain">, k)); </code>
           </div>
           <div class="line number114 index113 alt1"><code class="plain">} </code>
           </div>
           <div class="line number115 index114 alt2"><code class="plain">} </code>
           </div>
           <div class="line number116 index115 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp; 
           </div>
           <div class="line number117 index116 alt2"><code class="comments">// This code has been contributed by 29AjayKumar and updated by ajayhajare </code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>K'th smallest element is 5</pre>
 </div>
 <p>The code implements the <strong>“Worst-case linear time algorithm to find the k-th smallest element”</strong> using the Decrease and Conquer strategy. The steps of the algorithm are as follows:</p>
 <p>If the value of k is greater than the number of elements in the array or k is less than 1, return INT_MAX (which is a constant representing the maximum value of an integer in C++).</p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <p>Divide the array into groups of five elements each (except possibly the last group, which may have less than five elements). Sort each group and find its median. Store all the medians in an array called ‘median’.</p>
 <p>Find the median of the ‘median’ array by recursively calling the kthSmallest() function. If the ‘median’ array has only one element, then it is the median of all medians.</p>
 <p>Partition the original array around the median of medians and find the position ‘pos’ of the pivot element in the sorted array.</p>
 <p>If pos-l is equal to k-1 (i.e., the pivot element is the k-th smallest element), return the pivot element.</p>
 <p>If pos-l is greater than k-1, then recursively call the kthSmallest() function on the left sub-array (i.e., arr[l…pos-1]).</p>
 <p>If pos-l is less than k-1, then recursively call the kthSmallest() function on the right sub-array (i.e., arr[pos+1…r]) with updated k value (k-(pos-l+1)).<br><strong>Time Complexity:&nbsp;</strong><br>The worst-case time complexity of the above algorithm is O(n). Let us analyze all steps.&nbsp;<br>Steps (1) and (2) take O(n) time as finding median of an array of size 5 takes O(1) time and there are n/5 arrays of size 5.&nbsp;<br>Step (3) takes T(n/5) time. Step (4) is a standard partition and takes O(n) time.&nbsp;<br>The interesting steps are 6) and 7). At most, one of them is executed. These are recursive steps. What is the worst-case size of these recursive calls? The answer is the maximum number of elements greater than medOfMed (obtained in step 3) or the maximum number of elements smaller than medOfMed.&nbsp;<br><i>How many elements are greater than medOfMed and how many are smaller?</i>&nbsp;<br>At least half of the medians found in step 2 are greater than or equal to medOfMed. Thus, at least half of the n/5 groups contribute 3 elements that are greater than medOfMed, except for the one group that has fewer than 5 elements. Therefore, the number of elements greater than medOfMed is at least.&nbsp;<br><img src="https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-6bff4ac487731b81a5ee0c1569ca44ad_l3.png" class="ql-img-inline-formula quicklatex-auto-format" alt="3\left (\left \lceil \frac{1}{2}\left \lceil \frac{n}{5} \right \rceil \right \rceil-2 \right )\geq \frac{3n}{10}-6         " title="Rendered by QuickLaTeX.com" height="32" width="282" style="vertical-align: -9px;"><br>Similarly, the number of elements which are less than medOfMed is at least 3n/10 – 6. In the worst case, the function recurs for at most n – (3n/10 – 6) which is 7n/10 + 6 elements.<br>Note that 7n/10 + 6 &lt; 20 and that any input of 80 or fewer elements requires O(1) time. We can therefore obtain the recurrence&nbsp;<br><img src="https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-26cc88e150856ccb8b72c5946007bcf6_l3.png" class="ql-img-inline-formula quicklatex-auto-format" alt="T(n)\leq \begin{cases} \Theta (1) &amp; \text{ if } n\leq 80 \\ T(\left \lceil \frac{n}{5} \right \rceil)+T(\frac{7n}{10}+6)+O(n) &amp; \text{ if } n> 90 \end{cases}         " title="Rendered by QuickLaTeX.com" height="79" width="566" style="vertical-align: -33px;"><br>We show that the running time is linear by substitution. Assume that T(n) cn for some constant c and all n &gt; 80. Substituting this inductive hypothesis into the right-hand side of the recurrence yields&nbsp;</p>
 <pre>T(n)  &lt;= cn/5 + c(7n/10 + 6) + O(n)
     &lt;= cn/5 + c + 7cn/10 + 6c + O(n)
    &lt;= 9cn/10 + 7c + O(n)
    &lt;= cn, </pre>
 <p>since we can pick c large enough so that c(n/10 – 7) is larger than the function described by the O(n) term for all n &gt; 80. The worst-case running time of is therefore linear <br>Note that the above algorithm is linear in the worst case, but the constants are very high for this algorithm. Therefore, this algorithm doesn’t work well in practical situations; <a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/">randomized quickSelect</a> works much better and is preferred.</p>
 <p>&nbsp;</p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/given-a-sorted-and-rotated-array-find-if-there-is-a-pair-with-a-given-sum/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/given-a-sorted-and-rotated-array-find-if-there-is-a-pair-with-a-given-sum/?ref=lbp">Find if there is a pair with a given sum in the rotated sorted Array</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">K&#8217;th largest element in a stream</div> --> 
  <h1>K’th largest element in a stream</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('["Amazon","Cisco"]');
                                                categoryTagsArray = JSON.parse('["Arrays","Binary Search Tree","Heap","Searching"]');
                                            </script> 
<div class="text"> 
 <p>Given an infinite stream of integers, find the <strong>K<sup>th</sup></strong> largest element at any point of time.</p>
 <p><strong>Note: </strong>Here we have a stream instead of a whole array and we are allowed to store only K elements.</p>
 <div id="GFG_AD_gfg_mobile_336x280"></div>
 <p><strong>Examples:&nbsp;</strong></p>
 <blockquote>
  <p><strong>Input:</strong> stream[] = {10, 20, 11, 70, 50, 40, 100, 5, . . .}, K = 3<br><strong>Output:</strong> {_, &nbsp; _, 10, 11, 20, 40, 50, &nbsp;50, . . .}</p>
  <p><strong>Input:</strong> stream[] = {2, 5, 1, 7, 9, . . .}, K = 2<br><strong>Output: </strong>{_, 2, 2, 5, 7, . . .}&nbsp;</p>
 </blockquote>
 <div id="practiceLinkDiv"><a href="https://www.geeksforgeeks.org/problems/kth-largest-element-in-a-stream2220/1/">Recommended PracticeK<sup>th</sup> largest element in a streamTry It!</a>
 </div>
 <p><strong>Naive Approach:</strong> To solve the problem follow the below idea:</p>
 <blockquote>
  <p>Keep an array of size K. The idea is to keep the array sorted so that the K<sup>th</sup> largest element can be found in O(1) time (we just need to return the first element of the array, if the array is sorted in increasing order</p>
  <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
  <p><strong>How to process a new element of the stream?&nbsp;</strong></p>
  <p>For every new element in the stream, check if the new element is smaller than the current K<sup>th</sup> largest element. If yes, then ignore it. If no, then remove the smallest element from the array and insert the new element in sorted order.&nbsp;</p>
  <p>The time complexity of processing a new element is O(K)</p>
 </blockquote>
 <h2>K<sup>th</sup> largest element in a stream using a <a href="https://www.geeksforgeeks.org/avl-tree-set-1-insertion/">self-balancing binary search tree</a>:</h2>
 <p>To solve the problem follow the below idea:</p>
 <blockquote>
  <p>Create a self-balancing binary search tree and for every new element in the stream, check if the new element is smaller than the current k’th largest element. If yes, then ignore it. If no, then remove the smallest element from the tree and insert a new element.&nbsp;</p>
  <p>The K<sup>th</sup> largest element can be found in O(log K) time.</p>
  <div style="text-align:center;margin:20px 0;max-height: 280px;" id="GFG_AD_gfg_outstream_incontent"></div>
 </blockquote>
 <h2>K<sup>th</sup> largest element in a stream using a <a href="https://www.geeksforgeeks.org/binary-heap/">Min-Heap</a>:</h2>
 <p>To solve the problem follow the below idea:</p>
 <blockquote>
  <p>An <strong>Efficient Solution</strong> is to use a Min Heap of size K to store K largest elements of the stream. The K<sup>th</sup> largest element is always at the root and can be found in O(1) time</p>
  <p><strong>How to process a new element of the stream?&nbsp;</strong></p>
  <p>Compare the new element with the root of the heap. If a new element is smaller, then ignore it. Otherwise, replace the root with a new element and call heapify for the root of the modified heap</p>
 </blockquote>
 <p>Below is the implementation of the above approach:</p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_42775" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for the above approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number4 index3 alt1">
             &nbsp; 
           </div>
           <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number6 index5 alt1">
             &nbsp; 
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">using min heap DS</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">how data are stored in min Heap DS</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">1</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">2&nbsp;&nbsp; 3</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if k==3 , then top element of heap</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">itself the kth largest largest element</code>
           </div>
           <div class="line number15 index14 alt2">
             &nbsp; 
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">*/</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">PriorityQueue&lt;Integer&gt; min;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">k;</code>
           </div>
           <div class="line number19 index18 alt2">
             &nbsp; 
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">List&lt;Integer&gt; getAllKthNumber(</code><code class="keyword">int</code> <code class="plain">arr[])</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1">
             &nbsp; 
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// list to store kth largest number</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">List&lt;Integer&gt; list = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;();</code>
           </div>
           <div class="line number25 index24 alt2">
             &nbsp; 
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// one by one adding values to the min heap</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">val : arr) {</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if the heap size is less than k , we add to</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the heap</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(min.size() &lt; k)</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min.add(val);</code>
           </div>
           <div class="line number33 index32 alt2">
             &nbsp; 
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/*</code>
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">otherwise ,</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">first we&nbsp; compare the current value with the</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">min heap TOP value</code>
           </div>
           <div class="line number38 index37 alt1">
             &nbsp; 
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">if TOP val &gt; current element , no need to</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">remove TOP , bocause it will be the largest kth</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">element anyhow</code>
           </div>
           <div class="line number42 index41 alt1">
             &nbsp; 
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">else&nbsp; we need to update the kth largest element</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">by removing the top lowest element</code>
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">*/</code>
           </div>
           <div class="line number46 index45 alt1">
             &nbsp; 
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(val &gt; min.peek()) {</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min.poll();</code>
           </div>
           <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min.add(val);</code>
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number53 index52 alt2">
             &nbsp; 
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if heap size &gt;=k we add</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// kth largest element</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// otherwise -1</code>
           </div>
           <div class="line number57 index56 alt2">
             &nbsp; 
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(min.size() &gt;= k)</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">list.add(min.peek());</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">list.add(-</code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">list;</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number65 index64 alt2">
             &nbsp; 
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">min = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;();</code>
           </div>
           <div class="line number70 index69 alt1">
             &nbsp; 
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">k = </code><code class="value">3</code><code class="plain">;</code>
           </div>
           <div class="line number72 index71 alt1">
             &nbsp; 
           </div>
           <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number74 index73 alt1">
             &nbsp; 
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">List&lt;Integer&gt; res = getAllKthNumber(arr);</code>
           </div>
           <div class="line number77 index76 alt2">
             &nbsp; 
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">x : res)</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Kth largest element is "</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ x);</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number82 index81 alt1">
             &nbsp; 
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This code is Contributed by Pradeep Mondal P</code>
           </div>
           <div class="line number84 index83 alt1"><code class="plain">}</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>Kth largest element is -1 
Kth largest element is -1 
Kth largest element is 1
Kth largest element is 2
Kth largest element is 3
Kth largest element is 4</pre>
 </div>
 <p><strong>Time Complexity: </strong>O(N * log K)<br><strong>Auxiliary Space: </strong>O(K)</p>
 <h3>Below is the implementation of the above approach using <a href="https://www.geeksforgeeks.org/priority-queue-set-1-introduction/">priority-queue</a>:</h3>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_779779" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program for the above approach</code>
           </div>
           <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code>
           </div>
           <div class="line number3 index2 alt2">
             &nbsp; 
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code><code class="plain">[] kthLargest(</code><code class="keyword">int</code> <code class="plain">k, </code><code class="keyword">int</code> <code class="plain">arr[], </code><code class="keyword">int</code> <code class="plain">n)</code>
           </div>
           <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] ans = </code><code class="keyword">new</code> <code class="keyword">int</code><code class="plain">[n];</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating a min-heap using priority queue</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;Integer&gt; pq</code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;((a, b) -&gt; a - b);</code>
           </div>
           <div class="line number13 index12 alt2">
             &nbsp; 
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Iterating through each element</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code>
           </div>
           <div class="line number16 index15 alt1">
             &nbsp; 
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If size of priority</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// queue is less than k</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pq.size() &lt; k)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(arr[i]);</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="plain">{</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(arr[i] &gt; pq.peek()) {</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.remove();</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(arr[i]);</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2">
             &nbsp; 
           </div>
           <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If size is less than k</code>
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(pq.size() &lt; k)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans[i] = -</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ans[i] = pq.peek();</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1">
             &nbsp; 
           </div>
           <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">ans;</code>
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number37 index36 alt2">
             &nbsp; 
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver Code</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code>
           </div>
           <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">6</code><code class="plain">;</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">arr[] = { </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code> <code class="plain">};</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">k = </code><code class="value">4</code><code class="plain">;</code>
           </div>
           <div class="line number44 index43 alt1">
             &nbsp; 
           </div>
           <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code><code class="plain">[] v = kthLargest(k, arr, n);</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">it : v)</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(it + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number50 index49 alt1"><code class="plain">}</code>
           </div>
           <div class="line number51 index50 alt2">
             &nbsp; 
           </div>
           <div class="line number52 index51 alt1"><code class="comments">// This code is contributed by shikhasingrajput</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>-1 -1 -1 1 2 3 </pre>
 </div>
 <p><strong>Time Complexity:</strong> O(N * log K)&nbsp;<br><strong>Auxiliary Space:</strong> O(K)</p>
 <p><strong>Related Articles:</strong><br><a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/">K’th Smallest/Largest Element in Unsorted Array | Set 1</a>&nbsp;<br><a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/">K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)</a><br><a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/">K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)</a></p>
 <p></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
 <div class="d-row content-bw article-pgnavi v-divider-gfg" style="margin-top: 20px;"> 
  <div class="article-pgnavi_prev"> <a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array-worst-case-linear-time/?ref=lbp" class="pg-head"> <span class="gfg-icon gfg-icon_previous"></span> <span style="margin-left: 5px;">Previous</span> </a> <!-- <div class="pg-meta">8 Min Read&ensp;|&ensp;<a href="#">Java</a></div> --> 
   <div class="pg-main"> <a href="https://www.geeksforgeeks.org/kth-smallest-largest-element-in-unsorted-array-worst-case-linear-time/?ref=lbp">K’th Smallest/Largest Element in Unsorted Array | Worst case Linear Time</a> 
   </div> 
  </div> 
 </div> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
<div style="position: relative;"> 
 <div class="article-title"> <!-- <div class="title">Best First Search (Informed Search)</div> --> 
  <h1>Best First Search (Informed Search)</h1> 
 </div> 
</div> <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab--> <!-- menu --> 
<div id="myDropdown" class="three_dot_dropdown_content"> 
</div> 
<script>
                                                $('#practice-tab-main').show();
                                            </script> 
<script>
                                                $('#video-tab-main').show();
                                                $('#courses-tab-main').show();
                                                companyTagsArray = JSON.parse('[]');
                                                categoryTagsArray = JSON.parse('["BFS","Graph","Searching"]');
                                            </script> 
<div class="text"> 
 <p dir="ltr"><span>In </span><a href="https://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/"><span>BFS</span></a><span> and </span><a href="https://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/"><span>DFS</span></a><span>, when we are at a node, we can consider any of the adjacent as the next node. So both BFS and DFS blindly explore paths without considering any cost function.&nbsp;</span></p>
 <blockquote>
  <p dir="ltr"><span>The idea of </span><b><strong>Best First Search</strong></b><span> is to use an evaluation function to decide which adjacent is most promising and then explore.</span></p>
  <div id="GFG_AD_gfg_mobile_336x280"></div>
 </blockquote>
 <p dir="ltr"><span>Best First Search falls under the category of Heuristic Search or Informed Search.</span></p>
 <p dir="ltr"><u><b><strong class="GFGEditorTheme__textUnderline">Implementation of Best First Search:</strong></b></u></p>
 <p dir="ltr"><span>We use a </span><a href="https://www.geeksforgeeks.org/priority-queue-set-1-introduction/"><span>priority queue</span></a><span> or </span><a href="https://www.geeksforgeeks.org/heap-data-structure/"><span>heap</span></a><span> to store the costs of nodes that have the lowest evaluation function value. So the implementation is a variation of BFS, we just need to change Queue to PriorityQueue.&nbsp;</span></p>
 <pre><span>// Pseudocode for Best First Search</span><br><b><strong>Best-First-Search</strong></b><span>(Graph g, Node start)</span><br><span>    1) Create an empty PriorityQueue</span><br><span>       PriorityQueue </span><b><strong>pq</strong></b><span>;</span><br><span>    2) Insert "start" in pq.</span><br><span>       pq.insert(start)</span><br><span>    3) Until PriorityQueue is empty</span><br><span>          u = PriorityQueue.DeleteMin</span><br><span>          If u is the goal</span><br><span>             Exit</span><br><span>          Else</span><br><span>             Foreach neighbor v of u</span><br><span>                If v "Unvisited"</span><br><span>                    Mark v "Visited"                    </span><br><span>                    pq.insert(v)</span><br><span>             Mark u "Examined"                    </span><br><span>End procedure</span><br></pre>
 <p dir="ltr"><b><strong>Illustration:</strong></b></p>
 <p dir="ltr"><span>Let us consider the below example:</span></p>
 <div id="GFG_AD_Desktop_InContent_ATF_336x280" style="text-align:center;max-height: 280px;"></div>
 <blockquote>
  <p style="text-align: center;"></p>
  <div style="width: 810px" class="wp-caption alignnone">
   <img alt="Best-First-Search-Informed-Search" height="500" src="https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search.jpg" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search.jpg 1000w,https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search-100.jpg 100w,https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search-200.jpg 200w,https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search-300.jpg 300w,https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search-660.jpg 660w,https://media.geeksforgeeks.org/wp-content/uploads/20231221111714/Best-First-Search-Informed-Search-768.jpg 768w" width="1000">
   <p class="wp-caption-text">Best First Search (Informed Search)</p>
  </div>
  <ul>
   <li value="1"><span>We start from source “S” and search for goal “I” using given costs and Best First search.</span><br><span>&nbsp;</span></li>
   <li value="2"><span>pq initially contains S</span>
    <ul>
     <li value="1"><span>We remove S from pq and process unvisited neighbors of S to pq.</span></li>
     <li value="2"><span>pq now contains {A, C, B} (C is put before B because C has lesser cost)</span><br><span>&nbsp;</span></li>
    </ul></li>
   <li value="3"><span>We remove A from pq and process unvisited neighbors of A to pq.</span>
    <ul>
     <li value="1"><span>pq now contains {C, B, E, D}</span><br><span>&nbsp;</span></li>
    </ul></li>
   <li value="4"><span>We remove C from pq and process unvisited neighbors of C to pq.</span>
    <ul>
     <li value="1"><span>pq now contains {B, H, E, D}</span><br><span>&nbsp;</span></li>
    </ul></li>
   <li value="5"><span>We remove B from pq and process unvisited neighbors of B to pq.</span>
    <ul>
     <li value="1"><span>pq now contains {H, E, D, F, G}</span></li>
    </ul></li>
   <li value="6"><span>We remove H from pq. &nbsp;</span></li>
   <li value="7"><span>Since our goal “I” is a neighbor of H, we return.</span></li>
  </ul>
 </blockquote>
 <p dir="ltr"><span>Below is the implementation of the above idea:</span></p>
 <div class="responsive-tabs">
  <h2 class="tabtitle">Java</h2>
  <div class="tabcontent">
   <div class="code-block">
    <div class="code-gutter">
     <div class="editor-buttons-container">
      <div class="editor-buttons">
       <p></p>
      </div>
      <p></p>
     </div>
     <p></p>
    </div>
    <div class="code-container">
     <div id="highlighter_127394" class="syntaxhighlighter nogutter  ">
      <table border="0" cellpadding="0" cellspacing="0">
       <tbody>
        <tr>
         <td class="code">
          <div class="container">
           <div class="line number1 index0 alt2"><code class="comments">// Java program to implement Best First Search using priority</code>
           </div>
           <div class="line number2 index1 alt1"><code class="comments">// queue</code>
           </div>
           <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.ArrayList;</code>
           </div>
           <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.PriorityQueue;</code>
           </div>
           <div class="line number5 index4 alt2">
             &nbsp; 
           </div>
           <div class="line number6 index5 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG</code>
           </div>
           <div class="line number7 index6 alt2"><code class="plain">{</code>
           </div>
           <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">ArrayList&lt;ArrayList&lt;edge&gt; &gt; adj = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;();</code>
           </div>
           <div class="line number9 index8 alt2">
             &nbsp; 
           </div>
           <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Function for adding edges to graph</code>
           </div>
           <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">class</code> <code class="plain">edge </code><code class="keyword">implements</code> <code class="plain">Comparable&lt;edge&gt; </code>
           </div>
           <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">v, cost;</code>
           </div>
           <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">edge(</code><code class="keyword">int</code> <code class="plain">v, </code><code class="keyword">int</code> <code class="plain">cost)</code>
           </div>
           <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.v = v;</code>
           </div>
           <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.cost = cost;</code>
           </div>
           <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">compareTo(edge o)</code>
           </div>
           <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(o.cost &lt; cost) {</code>
           </div>
           <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code>
           </div>
           <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">-</code><code class="value">1</code><code class="plain">;</code>
           </div>
           <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number28 index27 alt1">
             &nbsp; 
           </div>
           <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">GFG(</code><code class="keyword">int</code> <code class="plain">v)</code>
           </div>
           <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; v; i++) {</code>
           </div>
           <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">adj.add(</code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;());</code>
           </div>
           <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number35 index34 alt2">
             &nbsp; 
           </div>
           <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Function For Implementing Best First Search</code>
           </div>
           <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Gives output path having lowest cost</code>
           </div>
           <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">best_first_search(</code><code class="keyword">int</code> <code class="plain">source, </code><code class="keyword">int</code> <code class="plain">target, </code><code class="keyword">int</code> <code class="plain">v)</code>
           </div>
           <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number40 index39 alt1">
             &nbsp; 
           </div>
           <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// MIN HEAP priority queue</code>
           </div>
           <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PriorityQueue&lt;edge&gt; pq = </code><code class="keyword">new</code> <code class="plain">PriorityQueue&lt;&gt;();</code>
           </div>
           <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">visited[] = </code><code class="keyword">new</code> <code class="keyword">boolean</code><code class="plain">[v];</code>
           </div>
           <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">visited = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number45 index44 alt2">
             &nbsp; 
           </div>
           <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// sorting in pq gets done by first value of pair</code>
           </div>
           <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(</code><code class="keyword">new</code> <code class="plain">edge(source, -</code><code class="value">1</code><code class="plain">));</code>
           </div>
           <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(!pq.isEmpty()) {</code>
           </div>
           <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = pq.poll().v;</code>
           </div>
           <div class="line number50 index49 alt1">
             &nbsp; 
           </div>
           <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Displaying the path having lowest cost</code>
           </div>
           <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(x + </code><code class="string">" "</code><code class="plain">);</code>
           </div>
           <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(target == x) {</code>
           </div>
           <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code>
           </div>
           <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(edge adjacentNodeEdge : adj.get(x)) {</code>
           </div>
           <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(!visited[adjacentNodeEdge.v]) {</code>
           </div>
           <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">visited[adjacentNodeEdge.v] = </code><code class="keyword">true</code><code class="plain">;</code>
           </div>
           <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">pq.add(adjacentNodeEdge);</code>
           </div>
           <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">addedge(</code><code class="keyword">int</code> <code class="plain">u, </code><code class="keyword">int</code> <code class="plain">v, </code><code class="keyword">int</code> <code class="plain">cost)</code>
           </div>
           <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">adj.get(u).add(</code><code class="keyword">new</code> <code class="plain">edge(v, cost));</code>
           </div>
           <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">adj.get(v).add(</code><code class="keyword">new</code> <code class="plain">edge(u, cost));</code>
           </div>
           <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number69 index68 alt2">
             &nbsp; 
           </div>
           <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Driver code to test above methods</code>
           </div>
           <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code>
           </div>
           <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">{</code>
           </div>
           <div class="line number73 index72 alt2">
             &nbsp; 
           </div>
           <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// No. of Nodes</code>
           </div>
           <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">v = </code><code class="value">14</code><code class="plain">;</code>
           </div>
           <div class="line number76 index75 alt1">
             &nbsp; 
           </div>
           <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The nodes shown in above example(by alphabets) are</code>
           </div>
           <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// implemented using integers addedge(x,y,cost);</code>
           </div>
           <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">GFG graph = </code><code class="keyword">new</code> <code class="plain">GFG(v);</code>
           </div>
           <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">0</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">3</code><code class="plain">);</code>
           </div>
           <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">0</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">6</code><code class="plain">);</code>
           </div>
           <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">5</code><code class="plain">);</code>
           </div>
           <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">1</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">9</code><code class="plain">);</code>
           </div>
           <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">1</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">8</code><code class="plain">);</code>
           </div>
           <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">2</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">12</code><code class="plain">);</code>
           </div>
           <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">2</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">14</code><code class="plain">);</code>
           </div>
           <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">3</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">7</code><code class="plain">);</code>
           </div>
           <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">5</code><code class="plain">);</code>
           </div>
           <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">6</code><code class="plain">);</code>
           </div>
           <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">9</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">1</code><code class="plain">);</code>
           </div>
           <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">9</code><code class="plain">, </code><code class="value">12</code><code class="plain">, </code><code class="value">10</code><code class="plain">);</code>
           </div>
           <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">graph.addedge(</code><code class="value">9</code><code class="plain">, </code><code class="value">13</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code>
           </div>
           <div class="line number93 index92 alt2">
             &nbsp; 
           </div>
           <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">source = </code><code class="value">0</code><code class="plain">;</code>
           </div>
           <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">target = </code><code class="value">9</code><code class="plain">;</code>
           </div>
           <div class="line number96 index95 alt1">
             &nbsp; 
           </div>
           <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Function call</code>
           </div>
           <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">best_first_search(source, target, v);</code>
           </div>
           <div class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code>
           </div>
           <div class="line number100 index99 alt1"><code class="plain">}</code>
           </div>
           <div class="line number101 index100 alt2">
             &nbsp; 
           </div>
           <div class="line number102 index101 alt1"><code class="comments">// This code is contributed by Prithi_Dey</code>
           </div>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="code-editor-container"></div>
    <p></p>
   </div>
   <div class="code-output-container">
    <div class="output-block">
     <i id="output-icon" title="Output" class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
     <p></p>
     <pre class="output-pre"></pre>
     <p></p>
    </div>
    <div class="ide-link-div">
     <i id="copy-url-button" title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
     <p></p>
     <pre id="ide-url"></pre>
     <p></p>
    </div>
    <p></p>
   </div>
  </div>
 </div>
 <div class="code-output"><strong>Output</strong>
  <p></p>
  <pre>0 1 3 2 8 9 
</pre>
 </div>
 <p dir="ltr"><b><strong>Analysis :</strong></b><span>&nbsp;</span></p>
 <ul>
  <li value="1"><span>The worst-case time complexity for Best First Search is O(n * log n) where n is the number of nodes. In the worst case, we may have to visit all nodes before we reach goal. Note that priority queue is implemented using Min(or Max) Heap, and insert and remove operations take O(log n) time.</span></li>
  <li value="2"><span>The performance of the algorithm depends on how well the cost or evaluation function is designed.</span></li>
 </ul>
 <p dir="ltr"><b><strong>Special cases of Best first search:</strong></b></p>
 <ol>
  <li value="1"><span>Greedy Best first search algorithm</span></li>
  <li value="2"><a href="https://www.geeksforgeeks.org/a-search-algorithm/"><span>A* search algorithm</span></a></li>
 </ol>
 <p dir="ltr"><span> &nbsp;</span></p>
 <br>
 <div id="AP_G4GR_6"></div> 
 <br> 
 <style>
                            .three90cta{
                                background:#fffdd0; color:#000 !important; text-decoration:none !important; text-align:center;padding:0px 5px;
                                line-height: 1.5;
                                font-size: 17px;
                                font-family: var(--font-secondary);
                            }
                            .three90cta:hover{
                                text-decoration:underline !important;
                            }
                            </style> 
</div> 
<div class="practice-content" id="practice-tab-content" style="min-height:800px; margin-bottom:50px;" hidden> 
</div> <!-- Place for new job section--> 
<div id="courses_nav_tab_content" class="courses_nav_tab_content" style="min-height: 800px;" hidden></div> 
<div id="video-tab-content" class="video-tab-content" style="min-height: 768px;" hidden></div>
